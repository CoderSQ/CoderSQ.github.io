<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>ZSQ&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.willingcloud.com/"/>
  <updated>2018-10-13T09:06:30.281Z</updated>
  <id>http://www.willingcloud.com/</id>
  
  <author>
    <name>ZSQ</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何将一个10G的文件逆序写入一个新的文件</title>
    <link href="http://www.willingcloud.com/2018/04/18/%E5%A6%82%E4%BD%95%E5%B0%86%E4%B8%80%E4%B8%AA10G%E7%9A%84%E6%96%87%E4%BB%B6%E9%80%86%E5%BA%8F%E5%86%99%E5%85%A5%E4%B8%80%E4%B8%AA%E6%96%B0%E7%9A%84%E6%96%87%E4%BB%B6/"/>
    <id>http://www.willingcloud.com/2018/04/18/如何将一个10G的文件逆序写入一个新的文件/</id>
    <published>2018-04-18T06:39:04.000Z</published>
    <updated>2018-10-13T09:06:30.281Z</updated>
    
    <content type="html"><![CDATA[<p>最近的同事的组内分享的内容就是标题的内容，这是一道大数据处理的算法的经典面试题，以前也经常碰到，用到的是mmap的知识，了解过，但是没有自己实际去写过。趁这个机会，就再一次回顾下,用swift来实现一把。</p><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p> <em>特权级， 用户态，内核态，用户空间，内核空间，线程上下文，中断上下文， MMU等概念请参考下文</em></p><p><a href="https://blog.csdn.net/xiaoaid01/article/details/51659037" target="_blank" rel="noopener">linux一些概念</a></p><p><a href="https://www.cnblogs.com/huxiao-tee/p/4660352.html" target="_blank" rel="noopener">mmap分析</a></p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>由于指定数据的内容比较大，所以我们不能直接通过read,write的方式将大文件直接读入内容，因为这样内存会不够用，所以我们需要借助linux中的mmap的知识，进行<a href="">内存映射</a>。</p><h2 id="mmap工作原理"><a href="#mmap工作原理" class="headerlink" title="mmap工作原理"></a><a href="https://www.zhihu.com/question/48161206/answer/110418693" target="_blank" rel="noopener">mmap工作原理</a></h2><blockquote><p>mmap的工作原理，当你发起这个调用的时候，它只是在你的虚拟空间中分配了一段空间，连真实的物理地址都不会分配的，当你访问这段空间，CPU陷入OS内核执行异常处理，然后异常处理会在这个时间分配物理内存，并用文件的内容填充这片内存，然后才返回你进程的上下文，这时你的程序才会感知到这片内存里有数据</p></blockquote><h3 id="mmap函数"><a href="#mmap函数" class="headerlink" title="mmap函数"></a>mmap函数</h3><blockquote><p>void <em>mmap(void </em>start,size_t length,int prot,int flags,int fd,off_t offsize); </p></blockquote><p>具体参数含义</p><pre><code>start ：  指向欲映射的内存起始地址，通常设为 NULL，代表让系统自动选定地址，映射成功后返回该地址。length：  代表将文件中多大的部分映射到内存。prot  ：  映射区域的保护方式。可以为以下几种方式的组合：                PROT_EXEC 映射区域可被执行                PROT_READ 映射区域可被读取                PROT_WRITE 映射区域可被写入                PROT_NONE 映射区域不能存取flags ：  影响映射区域的各种特性。在调用mmap()时必须要指定MAP_SHARED 或MAP_PRIVATE。                MAP_FIXED 如果参数start所指的地址无法成功建立映射时，则放弃映射，不对地址做修正。通常不鼓励用此旗标。                MAP_SHARED 对映射区域的写入数据会复制回文件内，而且允许其他映射该文件的进程共享。                MAP_PRIVATE 对映射区域的写入操作会产生一个映射文件的复制，即私人的“写入时复制”（copy on write）对此区域作的任何修改都不会写回原来的文件内容。                MAP_ANONYMOUS建立匿名映射。此时会忽略参数fd，不涉及文件，而且映射区域无法和其他进程共享。                MAP_DENYWRITE只允许对映射区域的写入操作，其他对文件直接写入的操作将会被拒绝。                MAP_LOCKED 将映射区域锁定住，这表示该区域不会被置换（swap）。fd    ：  要映射到内存中的文件描述符。如果使用匿名内存映射时，即flags中设置了MAP_ANONYMOUS，fd设为-1。有些系统不支持匿名内存映射，则可以使用fopen打开/dev/zero文件，      然后对该文件进行映射，可以同样达到匿名内存映射的效果。offset：文件映射的偏移量，通常设置为0，代表从文件最前方开始对应，offset必须是PAGE_SIZE的整数倍。</code></pre><p>返回值：<br>      若映射成功则返回映射区的内存起始地址，否则返回MAP_FAILED(－1)，错误原因存于errno 中。</p><p>错误代码：<br>            EBADF  参数fd 不是有效的文件描述词<br>            EACCES 存取权限有误。如果是MAP_PRIVATE 情况下文件必须可读，使用MAP_SHARED则要有PROT_WRITE以及该文件要能写入。<br>            EINVAL 参数start、length 或offset有一个不合法。<br>            EAGAIN 文件被锁住，或是有太多内存被锁住。<br>            ENOMEM 内存不足。</p><p>用户层的调用很简单，其具体功能就是直接将物理内存直接映射到用户虚拟内存，使用户空间可以直接对物理空间操作。但是对于内核层而言，其具体实现比较复杂。</p><h3 id="munmap函数"><a href="#munmap函数" class="headerlink" title="munmap函数"></a>munmap函数</h3><p>通过mmap映射出来的内存，通过munmap来解除映射关系</p><blockquote><p>int munmap( void * addr, size_t len )</p></blockquote><p>在进程地址空间中解除一个映射关系，当映射关系解除后，对原来映射地址的访问将导致段错误发生。</p><pre><code>void * addr ：调用mmap()时返回的地址size_t len ：映射区的大小</code></pre><h3 id="msync函数"><a href="#msync函数" class="headerlink" title="msync函数"></a>msync函数</h3><blockquote><p>int msync ( void * addr , size_t len, int flags)</p></blockquote><p>一般说来，进程在映射空间的对共享内容的改变并不直接写回到磁盘文件中，往往在调用munmap()后才执行该操作。可以调用msync()实现磁盘上文件与共享内存区的内容一致。</p><pre><code>void * addr ：调用mmap()时返回的地址size_t len ：映射区的大小int flags ：MS_ASYN: 异步写，MS_SYN : 同步写，MS_INVALIDAT : 无效的cache 数据。</code></pre><p>具体代码如下<br><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">handleFile</span><span class="params">()</span></span> &#123;</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">let</span> filePath = <span class="type">Bundle</span>.main.path(forResource: <span class="string">"data"</span>, ofType: <span class="string">"txt"</span>)</span><br><span class="line">       <span class="keyword">let</span> filePathOut = <span class="type">Bundle</span>.main.path(forResource: <span class="string">"dataout"</span>, ofType: <span class="string">".txt"</span>)</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">let</span> fhIn = <span class="type">FileHandle</span>.<span class="keyword">init</span>(forReadingAtPath: filePath!)</span><br><span class="line">       <span class="keyword">let</span> fhOut = <span class="type">FileHandle</span>.<span class="keyword">init</span>(forWritingAtPath: filePathOut!)</span><br><span class="line">       </span><br><span class="line">       <span class="comment">// 清空输出文件的内容</span></span><br><span class="line">       fhOut?.truncateFile(atOffset: <span class="number">0</span>)</span><br><span class="line">       </span><br><span class="line">       <span class="comment">// 获取文件大小</span></span><br><span class="line">       <span class="keyword">let</span> fileSize = fhIn?.seekToEndOfFile()</span><br><span class="line">       </span><br><span class="line">       <span class="comment">// 由于要处理的文件较大，所以不能一次将文件全部映射进内存，采用一个合适的映射内存大小。</span></span><br><span class="line">       <span class="comment">// 通过count来执行映射次数</span></span><br><span class="line">       <span class="keyword">let</span> <span class="built_in">count</span> = fileSize! / <span class="type">MEM_SIZE</span></span><br><span class="line">       <span class="comment">// 剩余部分内存</span></span><br><span class="line">       <span class="keyword">let</span> leftSize = fileSize! % <span class="type">MEM_SIZE</span></span><br><span class="line">       </span><br><span class="line">       </span><br><span class="line">       <span class="comment">// 两部分分开处理，剩余部分写入</span></span><br><span class="line">       <span class="comment">// 文件最后的，写入文件的最开始位置</span></span><br><span class="line">       <span class="keyword">let</span> leftPart = mmap(<span class="type">UnsafeMutableRawPointer</span>.<span class="keyword">init</span>(bitPattern: <span class="number">0</span>), <span class="type">Int</span>(leftSize), <span class="type">PROT_READ</span>, <span class="type">MAP_SHARED</span>, fhIn!.fileDescriptor, off_t(<span class="type">MEM_SIZE</span> * <span class="built_in">count</span>))</span><br><span class="line">       <span class="keyword">if</span> leftPart == <span class="type">MAP_FAILED</span> &#123;</span><br><span class="line">           <span class="built_in">print</span>(<span class="string">"剩余部分映射失败)"</span>)</span><br><span class="line">           <span class="keyword">return</span></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">let</span> leftBuf = malloc(<span class="type">Int</span>(leftSize))</span><br><span class="line">       memcpy(leftBuf, leftPart, <span class="type">Int</span>(leftSize))</span><br><span class="line">       <span class="keyword">var</span> data = <span class="type">Data</span>.<span class="keyword">init</span>(bytes: leftBuf!, <span class="built_in">count</span>: <span class="type">Int</span>(leftSize))</span><br><span class="line">       data.<span class="built_in">reverse</span>()</span><br><span class="line">       fhOut?.write(data)</span><br><span class="line">       fhOut?.synchronizeFile()</span><br><span class="line">       </span><br><span class="line">       munmap(leftPart, <span class="type">Int</span>(leftSize))</span><br><span class="line">       free(leftBuf)</span><br><span class="line">       </span><br><span class="line">       <span class="built_in">print</span>(<span class="string">"剩余部分写入成功"</span>)</span><br><span class="line">       </span><br><span class="line">       </span><br><span class="line">       <span class="comment">// 多线程处理大小的内存，加快处理速度</span></span><br><span class="line">       <span class="keyword">let</span> queue = <span class="type">OperationQueue</span>.<span class="keyword">init</span>()</span><br><span class="line">       queue.maxConcurrentOperationCount = <span class="number">5</span> <span class="comment">// 设置最大并发数，线程太多，因为线程切换，速度反而也降低</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">// 使用信号量，防止资源写入的时候，多线程seek文件的问题</span></span><br><span class="line">       <span class="keyword">let</span> semaphore = <span class="type">DispatchSemaphore</span>.<span class="keyword">init</span>(value: <span class="number">1</span>)</span><br><span class="line">       </span><br><span class="line">       <span class="comment">// 从第0到count段数据，分别写入文件的相应位置</span></span><br><span class="line">       <span class="keyword">for</span> i <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="built_in">count</span> &#123;</span><br><span class="line">           </span><br><span class="line">           queue.addOperation &#123;</span><br><span class="line">               <span class="keyword">let</span> part = mmap(<span class="type">UnsafeMutableRawPointer</span>.<span class="keyword">init</span>(bitPattern: <span class="number">0</span>), <span class="type">Int</span>(<span class="type">MEM_SIZE</span>), <span class="type">PROT_READ</span>, <span class="type">MAP_SHARED</span>, fhIn!.fileDescriptor, off_t(i * <span class="type">MEM_SIZE</span>))</span><br><span class="line">               </span><br><span class="line">               <span class="keyword">if</span> part == <span class="type">MAP_FAILED</span> &#123;</span><br><span class="line">                   <span class="built_in">print</span>(<span class="string">"映射失败 i = \(i)"</span>)</span><br><span class="line">                   <span class="keyword">return</span></span><br><span class="line">               &#125;</span><br><span class="line">               <span class="keyword">let</span> buf = malloc(<span class="type">Int</span>(<span class="type">MEM_SIZE</span>))</span><br><span class="line">               memcpy(buf, part, <span class="type">Int</span>(<span class="type">MEM_SIZE</span>))</span><br><span class="line">               <span class="keyword">var</span> data = <span class="type">Data</span>.<span class="keyword">init</span>(bytes: buf!, <span class="built_in">count</span>: <span class="type">Int</span>(<span class="type">MEM_SIZE</span>))</span><br><span class="line">               data.<span class="built_in">reverse</span>()</span><br><span class="line">               free(buf)</span><br><span class="line">               </span><br><span class="line">               semaphore.wait() <span class="comment">// 抢占信号资源</span></span><br><span class="line">               fhOut?.seek(toFileOffset: leftSize + <span class="type">MEM_SIZE</span> * (<span class="built_in">count</span> - i - <span class="number">1</span>))</span><br><span class="line">               fhOut?.write(data)</span><br><span class="line">               fhOut?.synchronizeFile()</span><br><span class="line">               semaphore.signal() <span class="comment">// 释放信号资源</span></span><br><span class="line"></span><br><span class="line">               munmap(part, <span class="type">Int</span>(<span class="type">MEM_SIZE</span>))</span><br><span class="line">               <span class="built_in">print</span>(<span class="string">"操作成功 i= \(i)"</span>)</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//等队列中所有操作结束，才能执行后面的close句柄的操作</span></span><br><span class="line">       queue.waitUntilAllOperationsAreFinished()</span><br><span class="line">       fhIn?.closeFile()</span><br><span class="line">       fhOut?.closeFile()</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近的同事的组内分享的内容就是标题的内容，这是一道大数据处理的算法的经典面试题，以前也经常碰到，用到的是mmap的知识，了解过，但是没有自己实际去写过。趁这个机会，就再一次回顾下,用swift来实现一把。&lt;/p&gt;
&lt;h2 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文
      
    
    </summary>
    
      <category term="算法" scheme="http://www.willingcloud.com/categories/%E7%AE%97%E6%B3%95/"/>
    
      <category term="大数据" scheme="http://www.willingcloud.com/categories/%E7%AE%97%E6%B3%95/%E5%A4%A7%E6%95%B0%E6%8D%AE/"/>
    
    
      <category term="算法" scheme="http://www.willingcloud.com/tags/%E7%AE%97%E6%B3%95/"/>
    
      <category term="mmap" scheme="http://www.willingcloud.com/tags/mmap/"/>
    
  </entry>
  
  <entry>
    <title>ReactNative启动流程</title>
    <link href="http://www.willingcloud.com/2018/04/03/ReactNative%E6%BA%90%E7%A0%81%E8%A7%A3%E8%AF%BB%E5%87%86%E5%A4%87%E7%AF%87/"/>
    <id>http://www.willingcloud.com/2018/04/03/ReactNative源码解读准备篇/</id>
    <published>2018-04-03T08:13:14.000Z</published>
    <updated>2018-10-12T12:10:23.164Z</updated>
    
    <content type="html"><![CDATA[<p>最近在学习ReactNative,很好奇其中的实现原理，并且在网上基本上是启动和通讯原理的介绍，通讯原理并没有理顺，所以想这段时间打算把ReactNative原理给整清楚，出一个针对iOS专题系列</p><p><a href="">ReactNative源码解读准备篇</a></p><p><a href="">ReactNative启动流程</a></p><p><a href="">ReactNative通信原理</a></p><p><a href="">ReactNative事件传播机制</a></p><p><a href="">ReactNative布局原理</a></p><p><a href="">ReactNative渲染流程</a></p><h2 id="在iOS中如何导出类给RN使用"><a href="#在iOS中如何导出类给RN使用" class="headerlink" title="在iOS中如何导出类给RN使用"></a>在iOS中如何导出类给RN使用</h2><p>在这里我斗胆借用一下【ReactNative](<a href="https://reactnative.cn/docs/0.51/native-modules-ios.html#content)中的话" target="_blank" rel="noopener">https://reactnative.cn/docs/0.51/native-modules-ios.html#content)中的话</a></p><blockquote><p>在React Native中，一个“原生模块”就是一个实现了“RCTBridgeModule”协议的Objective-C类，其中RCT是ReaCT的缩写。</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@interface</span> <span class="title">TestBridgeClass</span> : <span class="title">NSObject</span> &lt;<span class="title">RCTBridgeModule</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><blockquote><p>为了实现RCTBridgeModule协议，你的类需要包含RCT_EXPORT_MODULE()宏。这个宏也可以添加一个参数用来指定在Javascript中访问这个模块的名字。如果你不指定，默认就会使用这个Objective-C类的名字。</p></blockquote><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">TestBridgeClass</span></span></span><br><span class="line"></span><br><span class="line">RCT_EXPORT_MODULE();</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)loveFoods:(<span class="built_in">NSString</span> * )name &#123;</span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@"我需要被导出"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>这样我们在RN中就能访问<code>TestBridgeClass</code>这个类了，那么要访问他的 <code>- (void)loveFoods:(NSString * )name</code> 方法呢,这时我们需要通过<code>RCT_EXPORT_METHOD()</code>宏来导出该方法.方式如下</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">TestBridgeClass</span></span></span><br><span class="line"></span><br><span class="line">RCT_EXPORT_MODULE();</span><br><span class="line"></span><br><span class="line">RCT_EXPORT_METHOD(loveFoods:(<span class="built_in">NSString</span>*) name) &#123;</span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@"我是导出的方法"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)test &#123;</span><br><span class="line">  <span class="built_in">NSLog</span>(<span class="string">@"在RN中无法访问我"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@end</span></span><br></pre></td></tr></table></figure><p>这样在RN中就可以访问<code>TestBridgeClass</code>了，需要注意的是，只有native端导出的方法才能被RN端访问</p><h2 id="在RN中如何使用iOS导出的类"><a href="#在RN中如何使用iOS导出的类" class="headerlink" title="在RN中如何使用iOS导出的类"></a>在RN中如何使用iOS导出的类</h2><p>在RN中使用native端导出的类很简单，代码如下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; NativeModules &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> TestBridgeClass = NativeModules.TestBridgeClass;</span><br><span class="line"></span><br><span class="line">CalendarManager.loveFoods(<span class="string">"banana"</span>);</span><br></pre></td></tr></table></figure></p><p>重新复述一遍上面的内容，主要是为了分析里面的两个重要的宏的作用，<code>RCT_EXPORT_MODULE()</code> 和<code>RCT_EXPORT_METHOD()</code></p><h3 id="理解RCT-EXPORT-MODULE"><a href="#理解RCT-EXPORT-MODULE" class="headerlink" title="理解RCT_EXPORT_MODULE"></a>理解RCT_EXPORT_MODULE</h3><p>我们一个一个来理解。下面，我们把该宏一步步展开，展开代码如下：</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#define RCT_EXPORT_MODULE(js_name) \</span></span><br><span class="line">RCT_EXTERN <span class="keyword">void</span> RCTRegisterModule(Class); \</span><br><span class="line">+ (<span class="built_in">NSString</span> *)moduleName &#123; <span class="keyword">return</span> @<span class="meta">#js_name; &#125; \</span></span><br><span class="line">+ (<span class="keyword">void</span>)load &#123; RCTRegisterModule(<span class="keyword">self</span>); &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//RCT_EXTERN定义如下</span></span><br><span class="line"><span class="meta">#if defined(__cplusplus)</span></span><br><span class="line"><span class="meta">#define RCT_EXTERN extern <span class="meta-string">"C"</span> __attribute__((visibility(<span class="meta-string">"default"</span>)))</span></span><br><span class="line"><span class="meta">#define RCT_EXTERN_C_BEGIN extern <span class="meta-string">"C"</span> &#123;</span></span><br><span class="line"><span class="meta">#define RCT_EXTERN_C_END &#125;</span></span><br><span class="line"><span class="meta">#else</span></span><br><span class="line"><span class="meta">#define RCT_EXTERN extern __attribute__((visibility(<span class="meta-string">"default"</span>)))</span></span><br><span class="line"><span class="meta">#define RCT_EXTERN_C_BEGIN</span></span><br><span class="line"><span class="meta">#define RCT_EXTERN_C_END</span></span><br><span class="line"><span class="meta">#endif</span></span><br></pre></td></tr></table></figure><p>关于RCT_EXTER的宏定义，我们只关心if和else中的第一行。以下解析来自<a href="https://www.aliyun.com/jiaocheng/369170.html" target="_blank" rel="noopener">MJRefresh源码阅读</a></p><blockquote><p>其中__cplusplus 是cpp中的自定义宏,那么定义了这个宏的话表示这是一段cpp的代码,也就是说,上面的代码的含义是:如果这是一段cpp的代码,那么加入extern”C”和其中的代码。</p></blockquote><blockquote><p>extern是C/C++语言中表明函数和全局变量作用范围(可见性)的关键字,该关键字告诉编译器,其声明的函数和变量可以在本模块或其它模块中使用。 </p></blockquote><blockquote><p>那extern “C”呢?C++之父在设计C++之时,考虑到当时已经存在了大量的C代码,为了支持原来的C代码和已经写好C库,需要在C++中尽可能的支持C,而 extern “C”就是其中的一个策略。</p></blockquote><blockquote><p>attribute是GNU C的一种机制,用法为attribute_ ((attribute-list))。当项目需要作为一个库被外包引用的时候通常在编译时可以用参数-fvisibility指定所有符号的可见性。在编译命令中加入 -fvisibility=hidden参数,会将所有默认的public的属性变为hidden。此时,如果对函数设置attribute((visibility (“default”)))参数,使特定的函数仍然按默认的public属性处理,则-fvisibility=hidden参数不会对该函数起作用。所以,设置了-fvisibility=hidden参数之后,只有设置了attribute((visibility (“default”)))的函数才是对外可见的。</p></blockquote><p>关于attribute_更详细的用法请参考<a href="https://blog.csdn.net/veryitman/article/details/46756683" target="_blank" rel="noopener">GCC系列: <strong>attribute</strong>((visibility(“”)))</a></p><p>那么<code>RCT_EXTERN void RCTRegisterModule(Class);</code>的含义其实就是往当前类中导入<code>RCTRegisterModule(Class)这个C方法</code>，该方法的定义在<code>RCTBridge.m</code>中。</p><p><code>+ (NSString *)moduleName { return @#js_name; }</code> 这行是生命一个类方法，该类方法返回在RN中该类的名称。 #在C中的语法，作用是把宏参数变为一个字符，如果js_name=”aaa”， 则<code>@#js_name</code> 的结果是<code>@&quot;aaa&quot;</code> ，则在RN中可以按一下方式访问该类</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> TestBridgeClass = NativeModules.aaa;</span><br></pre></td></tr></table></figure><p><code>+ (void)load { RCTRegisterModule(self); }</code>则是在类中重写了Load方法，该方法调用之前导入的<code>RCTRegisterModule</code>函数, <code>RCTRegisterModule</code>方法很简单，只是在<code>RCTModuleClasses</code>数组中保存了当前导出到RN的类</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="built_in">NSMutableArray</span>&lt;Class&gt; *RCTModuleClasses; <span class="comment">// RCTBridge中的全局静态变量</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> RCTRegisterModule(Class moduleClass)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</span><br><span class="line">  <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class="line">    RCTModuleClasses = [<span class="built_in">NSMutableArray</span> new];</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  RCTAssert([moduleClass conformsToProtocol:<span class="class"><span class="keyword">@protocol</span>(<span class="title">RCTBridgeModule</span>)],</span></span><br><span class="line">            <span class="string">@"%@ does not conform to the RCTBridgeModule protocol"</span>,</span><br><span class="line">            moduleClass);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Register module</span></span><br><span class="line">  [RCTModuleClasses addObject:moduleClass];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="理解RCT-EXPORT-METHOD"><a href="#理解RCT-EXPORT-METHOD" class="headerlink" title="理解RCT_EXPORT_METHOD()"></a>理解RCT_EXPORT_METHOD()</h3><p><code>RCT_EXPORT_METHOD</code>源码展开如下</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#define RCT_EXPORT_METHOD(method) \</span></span><br><span class="line">  RCT_REMAP_METHOD(, method)</span><br><span class="line"></span><br><span class="line"><span class="meta">#define RCT_REMAP_METHOD(js_name, method) \</span></span><br><span class="line">  _RCT_EXTERN_REMAP_METHOD(js_name, method, <span class="literal">NO</span>) \</span><br><span class="line">  - (<span class="keyword">void</span>)method; <span class="comment">// 在类中声明导出的方法</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#define _RCT_EXTERN_REMAP_METHOD(js_name, method, is_blocking_synchronous_method) \</span></span><br><span class="line">  + (<span class="keyword">const</span> RCTMethodInfo *)RCT_CONCAT(__rct_export__, RCT_CONCAT(js_name, RCT_CONCAT(__LINE__, __COUNTER__))) &#123; \</span><br><span class="line">    <span class="keyword">static</span> RCTMethodInfo config = &#123;<span class="meta">#js_name, #method, is_blocking_synchronous_method&#125;; \</span></span><br><span class="line">    <span class="keyword">return</span> &amp;config; \</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><code>_RCT_EXTERN_REMAP_METHOD</code> 要知道这个宏定义的作用，我们先了解下<code>RCT_CONCAT</code>这个宏定义</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#define RCT_CONCAT2(A, B) A ## B</span></span><br><span class="line"><span class="meta">#define RCT_CONCAT(A, B) RCT_CONCAT2(A, B)</span></span><br></pre></td></tr></table></figure><p>显然，这个宏将被替换为 <code>A ## B</code>, <code>##</code>在C语言中是作为连接字符的意思，如果A=”aa”, B=”BB”,则 <code>A ## B</code>的结果为<code>aabb</code>, <code>RCT_CONCAT</code>在<code>_RCT_EXTERN_REMAP_METHOD</code>方法中的作用主要是生成一个类方法名。 <code>__LINE__</code> 是获取当前的line, <code>__COUTER__</code>是在当前文件中的计数，从0开始，每使用一次，计数加1 如我们的<code>loveFoods</code>方法，在这个宏定义后会生成一个名为 <code>+ [TestBridgeClass __rct_export__150]</code>的类方法， 其中的数字15由<code>__LINE__</code>提供， 数字0由<code>__COUNTER__</code>提供.</p><p>我们可以通过app的<a href="http://blog.cnbang.net/tech/2296/" target="_blank" rel="noopener">linkmap</a>来验证上面的内容:<br>1.XCode开启编译选项Write Link Map File<br>XCode -&gt; Project -&gt; Build Settings -&gt; 搜map -&gt; 把Write Link Map File选项设为yes，并指定好linkMap的存储位置.<img src="https://ws4.sinaimg.cn/large/006tNc79gy1fpziy6kdv8j31kg0fyn1a.jpg" alt=""></p><p>编译后，到指定位置找到该文件，打开该文件，搜索<code>Symbols</code>,第一个后面就能找到你要的信息。我的内容如下</p><p><img src="https://ws1.sinaimg.cn/large/006tNc79gy1fpzj1uyemnj30iy03c77q.jpg" alt=""></p><p>嗯，到这里我们就知道了iOS端这些宏定义具体做了啥，下一篇，我们来看启动流程篇吧…</p><p>if you have any question, leave a message!</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在学习ReactNative,很好奇其中的实现原理，并且在网上基本上是启动和通讯原理的介绍，通讯原理并没有理顺，所以想这段时间打算把ReactNative原理给整清楚，出一个针对iOS专题系列&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;&quot;&gt;ReactNative源码解读准备篇&lt;
      
    
    </summary>
    
      <category term="ReactNative" scheme="http://www.willingcloud.com/categories/ReactNative/"/>
    
    
      <category term="ReactNative" scheme="http://www.willingcloud.com/tags/ReactNative/"/>
    
  </entry>
  
  <entry>
    <title>ReactNative启动流程</title>
    <link href="http://www.willingcloud.com/2018/04/03/ReactNative%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/"/>
    <id>http://www.willingcloud.com/2018/04/03/ReactNative启动流程/</id>
    <published>2018-04-03T01:57:14.000Z</published>
    <updated>2018-10-13T09:00:06.362Z</updated>
    
    <content type="html"><![CDATA[<p>最近在学习ReactNative,很好奇其中的实现原理，并且在网上基本上是启动和通讯原理的介绍，通讯原理并没有理顺，所以想这段时间打算把ReactNative原理给整清楚，出一个针对iOS专题系列</p><p><a href="">ReactNative源码解读准备篇</a></p><p><a href="">ReactNative启动流程</a></p><p><a href="">ReactNative通信原理</a></p><p><a href="">ReactNative事件传播机制</a></p><p><a href="">ReactNative布局原理</a></p><p><a href="">ReactNative渲染流程</a></p><h2 id="启动流程"><a href="#启动流程" class="headerlink" title="启动流程"></a>启动流程</h2><p><span id="inline-blue">注意: 本系列粘贴的所有代码，会忽略非重要的代码 </span></p><p>新建一个ReactNative项目，打开其中的iOS项目，我们就可以分析app的启动流程了。首先在<code>AppDelegate</code>中，有如下两行代码<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="built_in">BOOL</span>)application:(<span class="built_in">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class="built_in">NSDictionary</span> *)launchOptions</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">NSURL</span> *jsCodeLocation;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 这个方法主要是根据环境来确定当前js文件的具体路径</span></span><br><span class="line">  jsCodeLocation = [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:<span class="string">@"index"</span> fallbackResource:<span class="literal">nil</span>];</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 这个是我们app的根视图</span></span><br><span class="line">  RCTRootView *rootView = [[RCTRootView alloc] initWithBundleURL:jsCodeLocation</span><br><span class="line">                                                      moduleName:<span class="string">@"LoveFoods"</span></span><br><span class="line">                                               initialProperties:<span class="literal">nil</span></span><br><span class="line">                                                   launchOptions:launchOptions];</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">YES</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在创建app根视图的时候创建了bridge对象,该对象负责native和js的交互，js运行环境的准备等工作<br><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">RCTBridge *bridge = [[RCTBridge alloc] initWithBundleURL:bundleURL</span><br><span class="line">                                            moduleProvider:<span class="literal">nil</span></span><br><span class="line">                                             launchOptions:launchOptions];</span><br><span class="line"><span class="keyword">return</span> [<span class="keyword">self</span> initWithBridge:bridge moduleName:moduleName initialProperties:initialProperties];</span><br></pre></td></tr></table></figure></p><p>在<code>RCTBridge</code>的初始化方法<code>nitWithBundleURL: moduleProvider: launchOptions:</code>中调用了setUp方法, 我们直接来看setUp方法</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">- (<span class="keyword">void</span>)setUp</span><br><span class="line">&#123;</span><br><span class="line">  Class bridgeClass = <span class="keyword">self</span>.bridgeClass;</span><br><span class="line"></span><br><span class="line">  <span class="meta">#if RCT_DEV // dev的情况下注册监听command+r的键盘事件，在这里我们暂时不需要关心</span></span><br><span class="line">  RCTExecuteOnMainQueue(^&#123;</span><br><span class="line">    RCTRegisterReloadCommandListener(<span class="keyword">self</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="meta">#endif</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">self</span>.batchedBridge = [[bridgeClass alloc] initWithParentBridge:<span class="keyword">self</span>];</span><br><span class="line">  [<span class="keyword">self</span>.batchedBridge start];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>setup方法中创建了<code>batchedBridge</code>对象，该对象为<code>RCTCxxBridge</code>的实例，<code>RCTBridge</code>的工作，实际都转交给了<code>batchedBridge</code>对象</p><p>我们来下，创建<code>batchedBridge</code>对象时，做了什么事情<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">- (instancetype)initWithParentBridge:(RCTBridge *)bridge</span><br><span class="line">&#123;</span><br><span class="line">  RCTAssertParam(bridge);</span><br><span class="line"></span><br><span class="line">  if ((self = [super initWithDelegate:bridge.delegate</span><br><span class="line">                            bundleURL:bridge.bundleURL</span><br><span class="line">                       moduleProvider:bridge.moduleProvider</span><br><span class="line">                        launchOptions:bridge.launchOptions])) &#123;</span><br><span class="line">    _parentBridge = bridge; //保存bridge</span><br><span class="line">    _valid = YES;</span><br><span class="line">    _loading = YES;</span><br><span class="line">    _pendingCalls = [NSMutableArray new];</span><br><span class="line">    _displayLink = [RCTDisplayLink new]; // 创建定时器，该定时器会定时调用_jsThreadUpdate方法</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    // 创建用来保存所有导出给js使用的模块信息的数组</span><br><span class="line">    _moduleDataByName = [NSMutableDictionary new];</span><br><span class="line">    _moduleClassesByID = [NSMutableArray new];</span><br><span class="line">    _moduleDataByID = [NSMutableArray new];</span><br><span class="line"></span><br><span class="line">    //设置RCTBridge.m文件中的静态对象RCTCurrentBridgeInstance==batchedBridge</span><br><span class="line">    [RCTBridge setCurrentBridge:self];</span><br><span class="line">  &#125;</span><br><span class="line">  return self;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在学习ReactNative,很好奇其中的实现原理，并且在网上基本上是启动和通讯原理的介绍，通讯原理并没有理顺，所以想这段时间打算把ReactNative原理给整清楚，出一个针对iOS专题系列&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;&quot;&gt;ReactNative源码解读准备篇&lt;
      
    
    </summary>
    
      <category term="ReactNative" scheme="http://www.willingcloud.com/categories/ReactNative/"/>
    
    
      <category term="ReactNative" scheme="http://www.willingcloud.com/tags/ReactNative/"/>
    
  </entry>
  
  <entry>
    <title>hexo + github 搭建个人博客</title>
    <link href="http://www.willingcloud.com/2018/04/02/hexo-github-%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <id>http://www.willingcloud.com/2018/04/02/hexo-github-搭建个人博客/</id>
    <published>2018-04-02T03:56:46.000Z</published>
    <updated>2018-10-12T12:03:08.238Z</updated>
    
    <content type="html"><![CDATA[<p>现在hexo+github搭建个人博客的文章已经非常多了，写这篇文章的目的是因为喜欢Anisina这个主题，而这个主题的作者有一段时间没更新了，缺少一些功能。为了用这个主题添加自己想要的功能，所以就有了这篇博文。希望这边文章能帮助喜欢Anisina主题的小伙伴，少踩一点坑。</p><h3 id="参考博客"><a href="#参考博客" class="headerlink" title="参考博客"></a>参考博客</h3><p><a href="https://www.jianshu.com/p/13e64c9e2295" target="_blank" rel="noopener">博客</a><br><a href="https://haojen.github.io/2017/05/09/Anisina-%E4%B8%AD%E6%96%87%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/#undefined" target="_blank" rel="noopener">Anisina主题</a><br><a href="https://www.jianshu.com/p/f054333ac9e6" target="_blank" rel="noopener">主题配置</a><br><a href="https://www.jianshu.com/p/f054333ac9e6" target="_blank" rel="noopener">Next主题配置</a></p><h3 id="Hexo安装"><a href="#Hexo安装" class="headerlink" title="Hexo安装"></a>Hexo安装</h3><h4 id="安装node-js"><a href="#安装node-js" class="headerlink" title="安装node.js"></a>安装node.js</h4><h4 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h4><p>在terminal中执行以下命令</p><blockquote><p>$ sudo npm install -g hexo </p></blockquote><h3 id="初始化自己的博客项目"><a href="#初始化自己的博客项目" class="headerlink" title="初始化自己的博客项目"></a>初始化自己的博客项目</h3><h4 id="创建你用来保存博客的文件夹，比如：Blog-创建文件夹的命令如下"><a href="#创建你用来保存博客的文件夹，比如：Blog-创建文件夹的命令如下" class="headerlink" title="创建你用来保存博客的文件夹，比如：Blog  创建文件夹的命令如下"></a>创建你用来保存博客的文件夹，比如：Blog  创建文件夹的命令如下</h4><blockquote><p>$ mkdir Blog</p></blockquote><h4 id="cd到刚创建的文件夹中"><a href="#cd到刚创建的文件夹中" class="headerlink" title="cd到刚创建的文件夹中"></a>cd到刚创建的文件夹中</h4><blockquote><p>$ cd Blog</p></blockquote><h4 id="初始化hexo"><a href="#初始化hexo" class="headerlink" title="初始化hexo"></a>初始化hexo</h4><blockquote><p>$ hexo init</p></blockquote><h4 id="安装hexo工程所需包"><a href="#安装hexo工程所需包" class="headerlink" title="安装hexo工程所需包"></a>安装hexo工程所需包</h4><blockquote><p>$ npm install</p></blockquote><h4 id="启动hexo服务"><a href="#启动hexo服务" class="headerlink" title="启动hexo服务"></a>启动hexo服务</h4><blockquote><p>$ hexo s</p></blockquote><p>此时，浏览器中打开网址<a href="http://localhost:4000，能看到如下页面：" target="_blank" rel="noopener">http://localhost:4000，能看到如下页面：</a><br><img src="https://ws3.sinaimg.cn/large/006tNc79gy1fp4hdtduzcj31kw0w47wh.jpg" alt="此处输入图片的描述"></p><h3 id="统计博客总字数"><a href="#统计博客总字数" class="headerlink" title="统计博客总字数"></a>统计博客总字数</h3><blockquote><p>$ npm install hexo-wordcount –save<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;span class=&quot;post-count&quot;&gt;博客全站共 &lt;%= totalcount(site) %&gt; 字&lt;/span&gt;</span><br></pre></td></tr></table></figure></p></blockquote><h3 id="统计博文字数以及阅读时间"><a href="#统计博文字数以及阅读时间" class="headerlink" title="统计博文字数以及阅读时间"></a>统计博文字数以及阅读时间</h3><p>同上安装插件,在post.ejs中加入以下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;span&gt;字数: &lt;%= wordcount(page.content) %&gt;&lt;/span&gt;</span><br><span class="line">&lt;span class=&quot;post-count&quot;&gt; 阅读时长: &lt;%= min2read(page.content) %&gt; 分钟&lt;/span&gt;</span><br></pre></td></tr></table></figure></p><h3 id="宠物"><a href="#宠物" class="headerlink" title="宠物"></a>宠物</h3><blockquote><p>npm install –save hexo-helper-live2d<br>npm install {your model’s package name} </p></blockquote><h4 id="系统自带宠物名"><a href="#系统自带宠物名" class="headerlink" title="系统自带宠物名"></a>系统自带宠物名</h4><pre><code>live2d中自带的宠物模型</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">live2d-widget-model-chitose</span><br><span class="line">live2d-widget-model-epsilon2_1</span><br><span class="line">live2d-widget-model-gf</span><br><span class="line">live2d-widget-model-haru/01 (use npm install --save live2d-widget-model-haru)</span><br><span class="line">live2d-widget-model-haru/02 (use npm install --save live2d-widget-model-haru)</span><br><span class="line">live2d-widget-model-haruto</span><br><span class="line">live2d-widget-model-hibiki</span><br><span class="line">live2d-widget-model-hijiki</span><br><span class="line">live2d-widget-model-izumi</span><br><span class="line">live2d-widget-model-koharu</span><br><span class="line">live2d-widget-model-miku</span><br><span class="line">live2d-widget-model-ni-j</span><br><span class="line">live2d-widget-model-nico</span><br><span class="line">live2d-widget-model-nietzsche</span><br><span class="line">live2d-widget-model-nipsilon</span><br><span class="line">live2d-widget-model-nito</span><br><span class="line">live2d-widget-model-shizuku</span><br><span class="line">live2d-widget-model-tororo</span><br><span class="line">live2d-widget-model-tsumiki</span><br><span class="line">live2d-widget-model-unitychan</span><br><span class="line">live2d-widget-model-wanko</span><br><span class="line">live2d-widget-model-z16</span><br></pre></td></tr></table></figure><h4 id="配置宠物"><a href="#配置宠物" class="headerlink" title="配置宠物"></a>配置宠物</h4><pre><code>在_config.yml中添加以下配置</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># #宠物</span><br><span class="line">live2d:</span><br><span class="line">  enable: true</span><br><span class="line">  scriptFrom: local</span><br><span class="line">  model:</span><br><span class="line">    use: live2d-widget-model-wanko</span><br><span class="line">  display:</span><br><span class="line">    position: right</span><br><span class="line">    width: 120</span><br><span class="line">    height: 240</span><br><span class="line">  mobile:</span><br><span class="line">    show: false</span><br></pre></td></tr></table></figure><h3 id="动态背景"><a href="#动态背景" class="headerlink" title="动态背景"></a>动态背景</h3><pre><code>只需要在 footer.ejs中添加以下代码即可</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 动态背景 --&gt;</span><br><span class="line">&lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="文章结尾"><a href="#文章结尾" class="headerlink" title="文章结尾"></a>文章结尾</h3><p>在post.ejs中添加一下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 文章结束 --&gt;</span><br><span class="line">  &lt;% if(is_post()) &#123; %&gt;</span><br><span class="line">      &lt;div style=&quot;text-align:center;color: #ccc;font-size:14px;&quot;&gt;-------------本文结束&lt;i class=&quot;fa fa-paw&quot;&gt;&lt;/i&gt;感谢您的阅读-------------&lt;/div&gt;</span><br><span class="line">  &lt;% &#125; %&gt;</span><br><span class="line">  &lt;br&gt;</span><br><span class="line">  &lt;hr&gt;</span><br></pre></td></tr></table></figure></p><h3 id="博文版权声明"><a href="#博文版权声明" class="headerlink" title="博文版权声明"></a>博文版权声明</h3><h4 id="在hexo-theme-Anisina主题目录中，找到-source-css文件夹，新建文件copyright-styl-文件中写入一下内容"><a href="#在hexo-theme-Anisina主题目录中，找到-source-css文件夹，新建文件copyright-styl-文件中写入一下内容" class="headerlink" title="在hexo-theme-Anisina主题目录中，找到 source/css文件夹，新建文件copyright.styl,文件中写入一下内容"></a>在hexo-theme-Anisina主题目录中，找到 source/css文件夹，新建文件copyright.styl,文件中写入一下内容</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">.copyright &#123;</span><br><span class="line">  width: 85%;</span><br><span class="line">  max-width: 45em;</span><br><span class="line">  margin: 2.8em auto 0;</span><br><span class="line">  padding: 0.5em 1.0em;</span><br><span class="line">  border: 1px solid #d3d3d3;</span><br><span class="line">  font-size: 0.93rem;</span><br><span class="line">  line-height: 1.6em;</span><br><span class="line">  word-break: break-all;</span><br><span class="line">  background: rgba(255,255,255,0.4);</span><br><span class="line">&#125;</span><br><span class="line">.copyright p&#123;margin:0;&#125;</span><br><span class="line">.copyright span &#123;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  width: 5.2em;</span><br><span class="line">  color: #b5b5b5;</span><br><span class="line">  font-weight: bold;</span><br><span class="line">&#125;</span><br><span class="line">.copyright .raw &#123;</span><br><span class="line">  margin-left: 1em;</span><br><span class="line">  width: 5em;</span><br><span class="line">&#125;</span><br><span class="line">.copyright a &#123;</span><br><span class="line">  color: #808080;</span><br><span class="line">  border-bottom:0;</span><br><span class="line">&#125;</span><br><span class="line">.copyright a:hover &#123;</span><br><span class="line">  color: #a3d2a3;</span><br><span class="line">  text-decoration: underline;</span><br><span class="line">&#125;</span><br><span class="line">.copyright:hover .fa-clipboard &#123;</span><br><span class="line">  color: #000;</span><br><span class="line">&#125;</span><br><span class="line">.copyright .post-url:hover &#123;</span><br><span class="line">  font-weight: normal;</span><br><span class="line">&#125;</span><br><span class="line">.copyright .copy-path &#123;</span><br><span class="line">  margin-left: 1em;</span><br><span class="line">  width: 1em;</span><br><span class="line">  +mobile()&#123;display:none;&#125;</span><br><span class="line">&#125;</span><br><span class="line">.copyright .copy-path:hover &#123;</span><br><span class="line">  color: #808080;</span><br><span class="line">  cursor: pointer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在head-ejs-中-添加一下代码"><a href="#在head-ejs-中-添加一下代码" class="headerlink" title="在head.ejs 中 添加一下代码"></a>在head.ejs 中 添加一下代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;%- css(&apos;css/copyright&apos;) %&gt;</span><br></pre></td></tr></table></figure><h4 id="在post-ejs中的-lt-page-content-gt-这行代码下面加入以下代码"><a href="#在post-ejs中的-lt-page-content-gt-这行代码下面加入以下代码" class="headerlink" title="在post.ejs中的&lt;%- page.content %&gt;这行代码下面加入以下代码"></a>在post.ejs中的<em>&lt;%- page.content %&gt;</em>这行代码下面加入以下代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 版权声明 --&gt;</span><br><span class="line">&lt;% if(is_post()) &#123; %&gt;</span><br><span class="line">&lt;div class=&quot;copyright&quot;&gt;</span><br><span class="line">    &lt;script src=&quot;//cdn.bootcss.com/clipboard.js/1.5.10/clipboard.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;!-- JS库 sweetalert 可修改路径 --&gt;</span><br><span class="line">    &lt;script src=&quot;https://cdn.bootcss.com/jquery/2.0.0/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script src=&quot;https://unpkg.com/sweetalert/dist/sweetalert.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">    &lt;p&gt;&lt;span&gt;本文标题:&lt;/span&gt;&lt;a href=&quot;&lt;%= url_for(page.path) %&gt;&quot;&gt; &lt;%= page.title %&gt;&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&lt;span&gt;文章作者:&lt;/span&gt;&lt;a href=&quot;/&quot; title=&quot;访问 &lt;%= theme.author %&gt; 的个人博客&quot;&gt;&lt;%= config.author %&gt;&lt;/a&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&lt;span&gt;发布时间:&lt;/span&gt;&lt;%= page.date.format(&quot;YYYY年MM月DD日 - HH:MM&quot;) %&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&lt;span&gt;最后更新:&lt;/span&gt;&lt;%= page.updated.format(&quot;YYYY年MM月DD日 - HH:MM&quot;) %&gt;&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&lt;span&gt;原始链接:&lt;/span&gt;&lt;a href=&quot;&lt;%= url_for(page.path) %&gt;&quot; title=&quot;&lt;%= page.title %&gt;&quot;&gt;&lt;%= page.permalink %&gt;&lt;/a&gt;</span><br><span class="line">      &lt;span class=&quot;copy-path&quot;  title=&quot;点击复制文章链接&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; data-clipboard-text=&quot;&lt;%= page.permalink %&gt;&quot;  aria-label=&quot;复制成功！&quot;&gt;&lt;/i&gt;&lt;/span&gt;</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">    &lt;p&gt;&lt;span&gt;许可协议:&lt;/span&gt;&lt;i class=&quot;fa fa-creative-commons&quot;&gt;&lt;/i&gt; &lt;a rel=&quot;license&quot; href=&quot;https://creativecommons.org/licenses/by-nc-nd/4.0/&quot; target=&quot;_blank&quot; title=&quot;Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)&quot;&gt;署名-非商业性使用-禁止演绎 4.0 国际&lt;/a&gt; 转载请保留原文链接及作者。&lt;/p&gt;  </span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;script&gt; </span><br><span class="line">      var clipboard = new Clipboard(&apos;.fa-clipboard&apos;);</span><br><span class="line">        $(&quot;.fa-clipboard&quot;).click(function()&#123;</span><br><span class="line">        clipboard.on(&apos;success&apos;, function()&#123;</span><br><span class="line">          swal(&#123;   </span><br><span class="line">            title: &quot;&quot;,   </span><br><span class="line">            text: &apos;复制成功&apos;,</span><br><span class="line">            icon: &quot;success&quot;, </span><br><span class="line">            showConfirmButton: true</span><br><span class="line">            &#125;);</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;);  </span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><h3 id="集成来必力评论系统"><a href="#集成来必力评论系统" class="headerlink" title="集成来必力评论系统"></a>集成来必力评论系统</h3><pre><code>在你的 _config.yml 里添加use_livere: true ，然后注册一个来比力后，再配置livere_uid: 你的来比力 UID，然后 hexo clean &amp;&amp; hexo deploy -g  附上[来必力官网](https://livere.com/)来必力UID获取方式如下: 登录-&gt;个人头像-&gt;管理页面-&gt;代码管理-&gt;一般网站，框起来的为UID</code></pre><p><img src="https://ws2.sinaimg.cn/large/006tNc79gy1fp5fs0fou2j310w0l5dju.jpg" alt=""></p><h3 id="添加简书"><a href="#添加简书" class="headerlink" title="添加简书"></a>添加简书</h3><p>在footer.ejs中  添加如下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;% if (config.jianshu_username) &#123; %&gt;</span><br><span class="line">   &lt;li&gt;</span><br><span class="line">       &lt;a target=&quot;_blank&quot;  href=&quot;https://www.jianshu.com/users/&lt;%= config.jianshu_username %&gt;&quot;&gt;</span><br><span class="line">       &lt;span class=&quot;fa-stack fa-lg&quot;&gt;</span><br><span class="line">       &lt;i class=&quot;fa fa-circle fa-stack-2x&quot;&gt;&lt;/i&gt;</span><br><span class="line">       &lt;i class=&quot;fa fa-jianshu fa-stack-1x fa-inverse&quot;&gt;简&lt;/i&gt;</span><br><span class="line">       &lt;/span&gt;</span><br><span class="line">       &lt;/a&gt;</span><br><span class="line">   &lt;/li&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure></p><p>在_config.xml中添加如下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jianshu_username: ecf4f97c26fa # 你的简书ID</span><br></pre></td></tr></table></figure></p><h3 id="daovoice即时聊天系统"><a href="#daovoice即时聊天系统" class="headerlink" title="daovoice即时聊天系统"></a>daovoice即时聊天系统</h3><h4 id="注册daovoice账号"><a href="#注册daovoice账号" class="headerlink" title="注册daovoice账号"></a>注册daovoice账号</h4><p>点<a href="http://dashboard.daovoice.io/" target="_blank" rel="noopener">这里</a>注册，注册后按以后步骤拿到你的appid<img src="https://ws2.sinaimg.cn/large/006tKfTcgy1fpuvr58pfbj30xi0nc7al.jpg" alt="获取appid"></p><h4 id="添加配置"><a href="#添加配置" class="headerlink" title="添加配置"></a>添加配置</h4><p>在_config.yml中添加一下配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># daovoice 及时聊天</span><br><span class="line">daovoice: true</span><br><span class="line">daovoice_app_id: 7dfaf13b #这里填你的刚才获得的 app_id</span><br></pre></td></tr></table></figure></p><h4 id="在head-esj模板中添加以下代码"><a href="#在head-esj模板中添加以下代码" class="headerlink" title="在head.esj模板中添加以下代码"></a>在head.esj模板中添加以下代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- daovoice --&gt;</span><br><span class="line">&lt;% if(config.daovoice) &#123; %&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">(function(i,s,o,g,r,a,m)&#123;i[&quot;DaoVoiceObject&quot;]=r;i[r]=i[r]||function()&#123;(i[r].q=i[r].q||[]).push(arguments)&#125;,i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=&quot;utf-8&quot;;m.parentNode.insertBefore(a,m)&#125;)(window,document,&quot;script&quot;,(&apos;https:&apos; == document.location.protocol ? &apos;https:&apos; : &apos;http:&apos;) + &quot;//widget.daovoice.io/widget/0f81ff2f.js&quot;,&quot;daovoice&quot;)</span><br><span class="line">  daovoice(&apos;init&apos;, &#123;</span><br><span class="line">      app_id: &quot;&lt;%= theme.daovoice_app_id%&gt;&quot;</span><br><span class="line">    &#125;);</span><br><span class="line">  daovoice(&apos;update&apos;);</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><h3 id="增加打赏功能"><a href="#增加打赏功能" class="headerlink" title="增加打赏功能"></a>增加打赏功能</h3><h4 id="截图自己微信以及支付宝的收款款码"><a href="#截图自己微信以及支付宝的收款款码" class="headerlink" title="截图自己微信以及支付宝的收款款码"></a>截图自己微信以及支付宝的收款款码</h4><h4 id="在-config-yml中添加如下配置"><a href="#在-config-yml中添加如下配置" class="headerlink" title="在_config.yml中添加如下配置"></a>在_config.yml中添加如下配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#打赏二维码</span><br><span class="line">qrcodes: [</span><br><span class="line">  &#123;</span><br><span class="line">      img: https://ws1.sinaimg.cn/large/006tNc79gy1fp6mjdk6jmj30hc0hcmy3.jpg,</span><br><span class="line">      text: 支付宝打赏</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">      img: https://ws1.sinaimg.cn/large/006tNc79gy1fp6mjdbp68j30hc0hcdh3.jpg,</span><br><span class="line">      text: 微信打赏</span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h4 id="在post-ejs中添加一下代码"><a href="#在post-ejs中添加一下代码" class="headerlink" title="在post.ejs中添加一下代码"></a>在post.ejs中添加一下代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> &lt;!-- 打赏 --&gt;</span><br><span class="line"> &lt;% if(is_post()) &#123; %&gt;</span><br><span class="line">    &lt;% if(config.qrcodes) &#123; %&gt;</span><br><span class="line">        &lt;div class=&quot;qrcode&quot;&gt;</span><br><span class="line">            &lt;!-- &lt;h5 class=&quot;text-center&quot;&gt;打赏&lt;/h5&gt; --&gt;</span><br><span class="line">            &lt;% config.qrcodes.forEach(function(code)&#123; %&gt;</span><br><span class="line">            &lt;div class=&quot;qrcode-item&quot;&gt;</span><br><span class="line">                &lt;img src=&quot;&lt;%= code.img %&gt;&quot; class=&quot;qrcode-item-img&quot; /&gt;</span><br><span class="line">                &lt;div class=&quot;qrcode-item-text&quot;&gt;&lt;%= code.text %&gt;&lt;/div&gt;</span><br><span class="line">            &lt;/div&gt;</span><br><span class="line">            &lt;% &#125;); %&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;% &#125; %&gt;</span><br><span class="line">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure><h4 id="在source-css文件夹中新建qrcode-styl文件，该文件的内容如下"><a href="#在source-css文件夹中新建qrcode-styl文件，该文件的内容如下" class="headerlink" title="在source/css文件夹中新建qrcode.styl文件，该文件的内容如下"></a>在source/css文件夹中新建qrcode.styl文件，该文件的内容如下</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">.qrcode &#123;</span><br><span class="line">    display: flex;</span><br><span class="line">    width: 100%;</span><br><span class="line">    flex-direction: row;</span><br><span class="line">    justify-content: space-around;</span><br><span class="line">    align-items: space-between;</span><br><span class="line">    flex-wrap: wrap;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.qrcode-tem &#123;</span><br><span class="line">    text-align: center;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    align-items: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.qrcode-item-img &#123;</span><br><span class="line">    // flex: 1;</span><br><span class="line">    width: 250px;</span><br><span class="line">    height: 250px;</span><br><span class="line">    // height: 40%;</span><br><span class="line">    min-width : 200px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.qrcode-item-text &#123;</span><br><span class="line">    color: rgb(73, 177, 245);</span><br><span class="line">    font-size: 14px;</span><br><span class="line">    // align-content: center;</span><br><span class="line">    text-align: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="在head-esj中加入一下代码"><a href="#在head-esj中加入一下代码" class="headerlink" title="在head.esj中加入一下代码"></a>在head.esj中加入一下代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 打赏 --&gt;</span><br><span class="line">&lt;%- css(&apos;css/qrcode&apos;) %&gt;</span><br></pre></td></tr></table></figure><h2 id="Next主题"><a href="#Next主题" class="headerlink" title="Next主题"></a>Next主题</h2><h3 id="文字背景色使用"><a href="#文字背景色使用" class="headerlink" title="文字背景色使用"></a>文字背景色使用</h3><p><span id="inline-blue"> 站点配置文件 </span><br><span id="inline-purple"> 主题配置文件 </span><br><span id="inline-yellow"> 站点配置文件 </span><br><span id="inline-green"> 主题配置文件 </span></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;span id=&quot;inline-blue&quot;&gt; 站点配置文件 &lt;/span&gt;</span><br><span class="line">&lt;span id=&quot;inline-purple&quot;&gt; 主题配置文件 &lt;/span&gt;</span><br><span class="line">&lt;span id=&quot;inline-yellow&quot;&gt; 站点配置文件 &lt;/span&gt;</span><br><span class="line">&lt;span id=&quot;inline-green&quot;&gt; 主题配置文件 &lt;/span&gt;</span><br></pre></td></tr></table></figure><blockquote><p>if you have any questions, leave a message.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;现在hexo+github搭建个人博客的文章已经非常多了，写这篇文章的目的是因为喜欢Anisina这个主题，而这个主题的作者有一段时间没更新了，缺少一些功能。为了用这个主题添加自己想要的功能，所以就有了这篇博文。希望这边文章能帮助喜欢Anisina主题的小伙伴，少踩一点坑。
      
    
    </summary>
    
      <category term="Hexo" scheme="http://www.willingcloud.com/categories/Hexo/"/>
    
    
      <category term="hexo" scheme="http://www.willingcloud.com/tags/hexo/"/>
    
      <category term="Anisina" scheme="http://www.willingcloud.com/tags/Anisina/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://www.willingcloud.com/2017/10/28/hello-world/"/>
    <id>http://www.willingcloud.com/2017/10/28/hello-world/</id>
    <published>2017-10-28T00:39:58.000Z</published>
    <updated>2017-10-28T00:39:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
