{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/alipay.jpeg","path":"images/alipay.jpeg","modified":0,"renderable":1},{"_id":"themes/next/source/images/wechatpay.jpeg","path":"images/wechatpay.jpeg","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.png","path":"images/avatar.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1539315304777},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1539315304777},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1539315304777},{"_id":"themes/next/.gitignore","hash":"0b5c2ffd41f66eb1849d6426ba8cf9649eeed329","modified":1539315304778},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1539315304778},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1539315304778},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1539315304779},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1539315304779},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1539315304779},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1539315304779},{"_id":"themes/next/README.cn.md","hash":"2c766b3369ed477bce134a5450dab45bef161504","modified":1539315304779},{"_id":"themes/next/README.md","hash":"8ce60ce578963eb4e1eb5e33e1efc2fc4779af9c","modified":1539315304780},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1539315304780},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1539315304780},{"_id":"themes/next/_config.yml","hash":"aba2e62799d4d3dd4a987acce5dcdc48b06a2fc3","modified":1539421545613},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1539315304799},{"_id":"source/_posts/ReactNative启动流程.md","hash":"94ef96cf8b6caca7d35f442595951b6e55428a18","modified":1539421206362},{"_id":"source/_posts/ReactNative源码解读准备篇.md","hash":"e20fcaa3856ea08fd815b05d54491d78a747e5d7","modified":1539346223164},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1509151198000},{"_id":"source/_posts/hexo-github-搭建个人博客.md","hash":"f6f333e47a6e08dd91613460ce59375780065282","modified":1539345788238},{"_id":"source/_posts/如何将一个10G的文件逆序写入一个新的文件.md","hash":"435a99c274a7fced34f9915245bf82963eb2308d","modified":1539421590281},{"_id":"themes/next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1539315304770},{"_id":"themes/next/.git/config","hash":"bf7d1df65cf34d0f25a7184a58c37a09f72e4be7","modified":1539315304772},{"_id":"themes/next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1539315277723},{"_id":"themes/next/.git/index","hash":"43ee07dc5700abf1a24d746f9d9d2d092f70b51e","modified":1539315304894},{"_id":"themes/next/.git/packed-refs","hash":"69237944e31c16fe545d1f47b0b1e5b1d99660da","modified":1539315304768},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"3b5eafd32abb718e56ccf8d1cee0607ad8ce611d","modified":1539315304777},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"50d48c47162817a3810a9d9ad51104e83947419a","modified":1539315304778},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"902f627155a65099e0a37842ff396a58d0dc306f","modified":1539315304778},{"_id":"themes/next/.github/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1539315304778},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1539315304781},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1539315304781},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1539315304781},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1539315304781},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1539315304781},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1539315304781},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1539315304781},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1539315304782},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1539315304782},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1539315304782},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1539315304782},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1539315304782},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1539315304782},{"_id":"themes/next/languages/zh-Hans.yml","hash":"16ef56d0dea94638de7d200984c90ae56f26b4fe","modified":1539315304782},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1539315304783},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1539315304783},{"_id":"themes/next/layout/_layout.swig","hash":"6ddb7a830c09b8ac5e5a495788a25b8889960ac0","modified":1539346487411},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1539315304798},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1539315304798},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1539315304798},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1539315304798},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1539315304799},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1539315304799},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1539315304799},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1539315304799},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1539315304800},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1539315304893},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1539315304893},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1539315304893},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1539315304845},{"_id":"themes/next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1539315277725},{"_id":"themes/next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1539315277724},{"_id":"themes/next/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1539315277725},{"_id":"themes/next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1539315277727},{"_id":"themes/next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1539315277727},{"_id":"themes/next/.git/hooks/pre-commit.sample","hash":"33729ad4ce51acda35094e581e4088f3167a0af8","modified":1539315277725},{"_id":"themes/next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1539315277727},{"_id":"themes/next/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1539315277724},{"_id":"themes/next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1539315277726},{"_id":"themes/next/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1539315277726},{"_id":"themes/next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1539315277727},{"_id":"themes/next/.git/info/exclude","hash":"bb5a85730dcf100facee799c05cc4f6affec0745","modified":1539315277723},{"_id":"themes/next/.git/logs/HEAD","hash":"0bddbe2f83f50ec87cf0cec5230448ba7b063814","modified":1539315304771},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1539315304783},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1539315304783},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1539315304784},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1539315304784},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1539315304784},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1539315304784},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1539315304784},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1539315304784},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1539315304785},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c4d6181f5d3db5365e622f78714af8cc58d7a45e","modified":1539315304785},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1539315304785},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1539315304786},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1539315304786},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1539315304786},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1539315304786},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1539315304788},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1539315304789},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1539315304790},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1539315304794},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1539315304795},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1539315304795},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1539315304795},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1539315304795},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1539315304795},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1539315304796},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1539315304800},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1539315304801},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1539315304801},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1539315304801},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1539315304801},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1539315304802},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1539315304802},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1539315304802},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1539315304802},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1539315304845},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1539315304845},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1539315304846},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1539315304846},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1539315304846},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1539315304846},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1539315304847},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1539315304847},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1539315304847},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1539315304848},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1539315304848},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1539315304848},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1539315304848},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1539315304848},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1539315304849},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1539315304849},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1539315304849},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1539315304849},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1539315304849},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1539315304790},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1539315304790},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1539315304819},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1539315304819},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1539315304820},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1539315304844},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1539315304845},{"_id":"themes/next/source/images/alipay.jpeg","hash":"27fb35760bd1b08a8283f4908d3479df03e224fa","modified":1539317989916},{"_id":"themes/next/source/images/wechatpay.jpeg","hash":"5a3feedb648cd6825a87d927da211ada64d9e0e2","modified":1539317953294},{"_id":"themes/next/.git/refs/heads/master","hash":"7999da428ebb87e5a2b27315d8d5123c1ccdfaa5","modified":1539315304771},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1539315304785},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1539315304786},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1539315304787},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1539315304787},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1539315304787},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1539315304787},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1539315304788},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1539315304788},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1539315304788},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1539315304789},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1539315304789},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1539315304790},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1539315304790},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1539315304790},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1539315304791},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1539315304791},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1539315304791},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1539315304791},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1539315304791},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1539315304792},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1539315304792},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1539315304792},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1539315304792},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1539315304792},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1539315304792},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1539315304793},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1539315304793},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1539315304793},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1539315304793},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1539315304794},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1539315304794},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1539315304794},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1539315304794},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1539315304794},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1539315304797},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1539315304797},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1539315304797},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1539315304797},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1539315304819},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1539315304819},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1539315304820},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1539315304820},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1539315304844},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1539315304844},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1539315304844},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1539315304845},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1539315304850},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1539315304850},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1539315304850},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1539315304851},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1539315304851},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1539315304851},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1539315304851},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1539315304851},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1539315304852},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1539315304852},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1539315304852},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1539315304860},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1539315304856},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1539315304860},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1539315304860},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1539315304860},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1539315304864},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1539315304864},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1539315304865},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1539315304865},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1539315304866},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1539315304866},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1539315304866},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1539315304866},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1539315304866},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1539315304878},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1539315304884},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1539315304885},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1539315304885},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1539315304881},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1539315304882},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1539315304882},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1539315304882},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1539315304882},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1539315304882},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1539315304883},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1539315304883},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1539315304883},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1539315304883},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1539315304883},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1539315304884},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1539315304884},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1539315304884},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1539315304881},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1539315304881},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1539315304881},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1539315304879},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1539315304879},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1539315304879},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1539315304880},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1539315304880},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1539315304880},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1539315304889},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1539315304890},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1539315304892},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1539315304892},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1539315304892},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1539315304879},{"_id":"themes/next/.git/logs/refs/heads/master","hash":"0bddbe2f83f50ec87cf0cec5230448ba7b063814","modified":1539315304771},{"_id":"themes/next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1539315304770},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1539315304796},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1539315304796},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1539315304803},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1539315304803},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1539315304803},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1539315304803},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1539315304803},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1539315304807},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1539315304813},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1539315304817},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1539315304818},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1539315304818},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1539315304818},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1539315304818},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1539315304819},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1539315304819},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1539315304820},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1539315304821},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1539315304821},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1539315304821},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1539315304821},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1539315304821},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1539315304822},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1539315304822},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1539315304823},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1539315304823},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1539315304823},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1539315304823},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1539315304823},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1539315304824},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1539315304824},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1539315304824},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1539315304825},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1539315304825},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1539315304825},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1539315304852},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1539315304855},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1539315304856},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1539315304856},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1539315304861},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1539315304861},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1539315304861},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1539315304861},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1539315304861},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1539315304862},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1539315304863},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1539315304864},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1539315304864},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1539315304865},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1539315304865},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1539315304867},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1539315304867},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1539315304868},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1539315304889},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1539315304889},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1539315304855},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1539315304877},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1539315304878},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1539315304891},{"_id":"themes/next/.git/logs/refs/remotes/origin/HEAD","hash":"0bddbe2f83f50ec87cf0cec5230448ba7b063814","modified":1539315304770},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1539315304804},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1539315304804},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1539315304804},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1539315304804},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1539315304804},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1539315304805},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1539315304805},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1539315304805},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1539315304805},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1539315304806},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1539315304806},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1539315304806},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1539315304806},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1539315304806},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1539315304807},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1539315304807},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1539315304807},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1539315304808},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1539315304808},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1539315304809},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1539315304809},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1539315304810},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1539315304810},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1539315304810},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1539315304810},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1539315304811},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1539315304811},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1539315304811},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1539315304811},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1539315304811},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1539315304812},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1539315304812},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1539315304812},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1539315304812},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1539315304812},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1539315304813},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1539315304813},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1539315304813},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1539315304813},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1539315304814},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1539315304814},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1539315304814},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1539315304814},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1539315304814},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1539315304815},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1539315304815},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1539315304815},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1539315304815},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1539315304815},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1539315304816},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1539315304816},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1539315304816},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1539315304816},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1539315304816},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1539315304817},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1539315304817},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1539315304817},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1539315304817},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1539315304822},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1539315304822},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1539315304824},{"_id":"themes/next/source/images/avatar.png","hash":"bdf8c50d808b758a531f342632f09dae7cc7148e","modified":1539316664623},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1539315304853},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1539315304853},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1539315304854},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1539315304854},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1539315304854},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1539315304862},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1539315304862},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1539315304862},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1539315304863},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1539315304863},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1539315304863},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1539315304870},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1539315304871},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1539315304877},{"_id":"themes/next/.git/objects/pack/pack-09df78575dd506cafcb2c517908ed591431fdc71.idx","hash":"be430c584ec6e1499b87f9e416e72d0fbc2e3a26","modified":1539315304756},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1539315304859},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1539315304888},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1539315304875},{"_id":"themes/next/.git/objects/pack/pack-09df78575dd506cafcb2c517908ed591431fdc71.pack","hash":"eee901eb2f4a4df31eaa41634f4e9de643c3fb4e","modified":1539315304751},{"_id":"public/atom.xml","hash":"e027625b70b402f59144f9eb70915950c6cc0a5c","modified":1539421595007},{"_id":"public/archives/2017/index.html","hash":"acd14195469ff031b8b4382f5d4f0f0635be8035","modified":1539421595198},{"_id":"public/archives/2017/10/index.html","hash":"7b27cf3965e2a0d75c1f02b85d511d8a3e81e8e7","modified":1539421595199},{"_id":"public/archives/2018/index.html","hash":"6a14f8718c5a9613e4704501f5520272fbde2336","modified":1539421595199},{"_id":"public/archives/2018/04/index.html","hash":"0a4c6d7ca5766f99bc5b1eed1c7564549ee216d4","modified":1539421595199},{"_id":"public/categories/ReactNative/index.html","hash":"5821101d7adfdd5a5b33f74adb91195066bd6b1b","modified":1539421595199},{"_id":"public/categories/Hexo/index.html","hash":"5853eb266531c9da829d146b1a46b86d25cf20c8","modified":1539421595199},{"_id":"public/2018/04/03/ReactNative源码解读准备篇/index.html","hash":"15a27c7bf0823a1ab8bc41bd2fc11e78e0e49540","modified":1539421595199},{"_id":"public/2018/04/02/hexo-github-搭建个人博客/index.html","hash":"0c7d27b1a01c03ace41e75cf8557d8a0eb1ed4c7","modified":1539421595199},{"_id":"public/2017/10/28/hello-world/index.html","hash":"ce5378a182aa719a909df0d03675b9759da7bd76","modified":1539421595199},{"_id":"public/archives/index.html","hash":"06bc91bb2055db58f8eba22250d66d5bfe695125","modified":1539421595200},{"_id":"public/tags/ReactNative/index.html","hash":"2adcb10095091cea75c5d5ca4282a30a79712531","modified":1539421595490},{"_id":"public/tags/hexo/index.html","hash":"52fbf76b8156290b34bb67be54b8ff08bf1560d9","modified":1539421595492},{"_id":"public/tags/Anisina/index.html","hash":"c30ddcfb52ea814780c1511fb65cfde015705287","modified":1539421595492},{"_id":"public/index.html","hash":"19d0f20d6afa5d31c21c096e49f73734b48c1ec0","modified":1539421595492},{"_id":"public/categories/算法/大数据/index.html","hash":"34659aa1fd3120a75e478fad00b1428f237cda67","modified":1539421595500},{"_id":"public/categories/算法/index.html","hash":"1d89e3863fd6604f7159ef63c9b713059149badc","modified":1539421595500},{"_id":"public/tags/算法/index.html","hash":"9b5b493ee009d56a7a45d52caa0a41bb260536cd","modified":1539421595500},{"_id":"public/tags/mmap/index.html","hash":"e843fd695d466dae3696f3b6c24e144daa5da3f1","modified":1539421595500},{"_id":"public/2018/04/03/ReactNative启动流程/index.html","hash":"b86f1d0255404d56f10e52eb1f31f4f8fe6a1aa3","modified":1539421595500},{"_id":"public/2018/04/18/如何将一个10G的文件逆序写入一个新的文件/index.html","hash":"6b0bdf1dc5922b95508bfc2ef2eff359e488c2bb","modified":1539421595501},{"_id":"public/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1539421595501},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1539421595501},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1539421595501},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1539421595501},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1539421595501},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1539421595502},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1539421595502},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1539421595502},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1539421595502},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1539421595502},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1539421595502},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1539421595502},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1539421595502},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1539421595502},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1539421595502},{"_id":"public/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1539421595502},{"_id":"public/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1539421595503},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1539421595503},{"_id":"public/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1539421595503},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1539421595503},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1539421595503},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1539421595503},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1539421595503},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1539421595503},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1539421595503},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1539421595503},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1539421595503},{"_id":"public/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1539421595503},{"_id":"public/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1539421595503},{"_id":"public/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1539421595503},{"_id":"public/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1539421595503},{"_id":"public/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1539421595504},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1539421595504},{"_id":"public/images/alipay.jpeg","hash":"27fb35760bd1b08a8283f4908d3479df03e224fa","modified":1539421596134},{"_id":"public/images/wechatpay.jpeg","hash":"5a3feedb648cd6825a87d927da211ada64d9e0e2","modified":1539421596136},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1539421596145},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1539421596145},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1539421596159},{"_id":"public/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1539421596159},{"_id":"public/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1539421596159},{"_id":"public/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1539421596159},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1539421596159},{"_id":"public/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1539421596159},{"_id":"public/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1539421596159},{"_id":"public/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1539421596159},{"_id":"public/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1539421596159},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1539421596159},{"_id":"public/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1539421596160},{"_id":"public/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1539421596160},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1539421596160},{"_id":"public/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1539421596160},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1539421596160},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1539421596160},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1539421596160},{"_id":"public/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1539421596160},{"_id":"public/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1539421596160},{"_id":"public/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1539421596161},{"_id":"public/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1539421596161},{"_id":"public/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1539421596161},{"_id":"public/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1539421596161},{"_id":"public/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1539421596161},{"_id":"public/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1539421596161},{"_id":"public/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1539421596161},{"_id":"public/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1539421596161},{"_id":"public/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1539421596163},{"_id":"public/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1539421596163},{"_id":"public/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1539421596163},{"_id":"public/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1539421596163},{"_id":"public/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1539421596163},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1539421596164},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1539421596165},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1539421596165},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1539421596165},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1539421596165},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1539421596169},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1539421596169},{"_id":"public/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1539421596170},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1539421596170},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1539421596170},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1539421596170},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1539421596171},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1539421596171},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1539421596171},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1539421596171},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1539421596171},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1539421596171},{"_id":"public/css/main.css","hash":"11041e5e33988066bc935fb9d09950407b46bccc","modified":1539421596171},{"_id":"public/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1539421596171},{"_id":"public/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1539421596171},{"_id":"public/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1539421596171},{"_id":"public/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1539421596172},{"_id":"public/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1539421596172},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1539421596172},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1539421596172},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1539421596172},{"_id":"public/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1539421596173},{"_id":"public/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1539421596173},{"_id":"public/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1539421596173},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1539421596173},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1539421596173},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1539421596173},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1539421596173},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1539421596173},{"_id":"public/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1539421596173},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1539421596173},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1539421596173},{"_id":"public/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1539421596174},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1539421596174},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1539421596175},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1539421596175},{"_id":"public/images/avatar.png","hash":"bdf8c50d808b758a531f342632f09dae7cc7148e","modified":1539421596215},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1539421596215}],"Category":[{"name":"ReactNative","_id":"cjn77vbrf0002n8qskcss6bi7"},{"name":"Hexo","_id":"cjn77vbrq000an8qsj98pikd4"},{"name":"算法","_id":"cjn77vbrs000fn8qs8s9cur19"},{"name":"大数据","parent":"cjn77vbrs000fn8qs8s9cur19","_id":"cjn77vbru000kn8qsnukyyebg"}],"Data":[],"Page":[],"Post":[{"title":"ReactNative启动流程","date":"2018-04-03T01:57:14.000Z","_content":"\n最近在学习ReactNative,很好奇其中的实现原理，并且在网上基本上是启动和通讯原理的介绍，通讯原理并没有理顺，所以想这段时间打算把ReactNative原理给整清楚，出一个针对iOS专题系列\n\n[ReactNative\b源码解读准备篇]()\n\n[ReactNative启动流程]()\n\n[ReactNative通信原理]()\n\n\b[\bReactNative\b事件传播机制]()\n\n[ReactNative布局原理]()\n\n[ReactNative渲染流程]()\n\n## 启动流程\n<span id=\"inline-blue\">注意: 本系列粘贴的所有代码，会忽略非重要的代码 </span>\n\n\b新建一个ReactNative项目，\b\b打开其中的iOS项目，我们就可以分析app的启动流程了。首先在`AppDelegate`中，有如下两行代码\n```objc\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n{\n  NSURL *jsCodeLocation;\n  \n  // 这个方法主要是根据环境来确定当前js文件的具体路径\n  jsCodeLocation = [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index\" fallbackResource:nil];\n\n  // 这个是\b我们app的根视图\n  RCTRootView *rootView = [[RCTRootView alloc] initWithBundleURL:jsCodeLocation\n                                                      moduleName:@\"LoveFoods\"\n                                               initialProperties:nil\n                                                   launchOptions:launchOptions];\n  return YES;\n}\n```\n\n在创建app根视图的时候创建了bridge对象,该对象负责native和js的交互，js运行环境的准备等工作\n```objc\nRCTBridge *bridge = [[RCTBridge alloc] initWithBundleURL:bundleURL\n                                            moduleProvider:nil\n                                             launchOptions:launchOptions];\nreturn [self initWithBridge:bridge moduleName:moduleName initialProperties:initialProperties];\n```\n\n在`RCTBridge`的初始化方法`nitWithBundleURL: moduleProvider: launchOptions:`中调用了setUp方法, 我们直接来看setUp方法\n\n```objc\n- (void)setUp\n{\n  Class bridgeClass = self.bridgeClass;\n\n  #if RCT_DEV // \bdev的情况下注册监听command+r\b的键盘事件，在这里我们暂时不需要关心\n  RCTExecuteOnMainQueue(^{\n    RCTRegisterReloadCommandListener(self);\n  });\n  #endif\n\n  self.batchedBridge = [[bridgeClass alloc] initWithParentBridge:self];\n  [self.batchedBridge start];\n}\n```\nsetup方法中创建了`batchedBridge`对象，该对象为`RCTCxxBridge`的实例，`RCTBridge`的工作，实际都转交给了`batchedBridge`对象\n\n\n我们来下，创建`batchedBridge`对象时，做了什么事情\n```\n- (instancetype)initWithParentBridge:(RCTBridge *)bridge\n{\n  RCTAssertParam(bridge);\n\n  if ((self = [super initWithDelegate:bridge.delegate\n                            bundleURL:bridge.bundleURL\n                       moduleProvider:bridge.moduleProvider\n                        launchOptions:bridge.launchOptions])) {\n    _parentBridge = bridge; \b//保存bridge\n    _valid = YES;\n    _loading = YES;\n    _pendingCalls = [NSMutableArray new];\n    _displayLink = [RCTDisplayLink new]; // 创建定时器，该定时器会定时调用_jsThreadUpdate方法\n\n\n    // 创建用来保存所有导出给js使用的模块信息的数组\n    _moduleDataByName = [NSMutableDictionary new];\n    _moduleClassesByID = [NSMutableArray new];\n    _moduleDataByID = [NSMutableArray new];\n\n    //\b设置RCTBridge.m文件中\u001d的静态对象RCTCurrentBridgeInstance==batchedBridge\n    [RCTBridge setCurrentBridge:self];\n  }\n  return self;\n}\n```\n\n\n","source":"_posts/ReactNative启动流程.md","raw":"---\ntitle: ReactNative启动流程\ndate: 2018-04-03 09:57:14\ntags: ReactNative\ncategories: ReactNative\n---\n\n最近在学习ReactNative,很好奇其中的实现原理，并且在网上基本上是启动和通讯原理的介绍，通讯原理并没有理顺，所以想这段时间打算把ReactNative原理给整清楚，出一个针对iOS专题系列\n\n[ReactNative\b源码解读准备篇]()\n\n[ReactNative启动流程]()\n\n[ReactNative通信原理]()\n\n\b[\bReactNative\b事件传播机制]()\n\n[ReactNative布局原理]()\n\n[ReactNative渲染流程]()\n\n## 启动流程\n<span id=\"inline-blue\">注意: 本系列粘贴的所有代码，会忽略非重要的代码 </span>\n\n\b新建一个ReactNative项目，\b\b打开其中的iOS项目，我们就可以分析app的启动流程了。首先在`AppDelegate`中，有如下两行代码\n```objc\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions\n{\n  NSURL *jsCodeLocation;\n  \n  // 这个方法主要是根据环境来确定当前js文件的具体路径\n  jsCodeLocation = [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:@\"index\" fallbackResource:nil];\n\n  // 这个是\b我们app的根视图\n  RCTRootView *rootView = [[RCTRootView alloc] initWithBundleURL:jsCodeLocation\n                                                      moduleName:@\"LoveFoods\"\n                                               initialProperties:nil\n                                                   launchOptions:launchOptions];\n  return YES;\n}\n```\n\n在创建app根视图的时候创建了bridge对象,该对象负责native和js的交互，js运行环境的准备等工作\n```objc\nRCTBridge *bridge = [[RCTBridge alloc] initWithBundleURL:bundleURL\n                                            moduleProvider:nil\n                                             launchOptions:launchOptions];\nreturn [self initWithBridge:bridge moduleName:moduleName initialProperties:initialProperties];\n```\n\n在`RCTBridge`的初始化方法`nitWithBundleURL: moduleProvider: launchOptions:`中调用了setUp方法, 我们直接来看setUp方法\n\n```objc\n- (void)setUp\n{\n  Class bridgeClass = self.bridgeClass;\n\n  #if RCT_DEV // \bdev的情况下注册监听command+r\b的键盘事件，在这里我们暂时不需要关心\n  RCTExecuteOnMainQueue(^{\n    RCTRegisterReloadCommandListener(self);\n  });\n  #endif\n\n  self.batchedBridge = [[bridgeClass alloc] initWithParentBridge:self];\n  [self.batchedBridge start];\n}\n```\nsetup方法中创建了`batchedBridge`对象，该对象为`RCTCxxBridge`的实例，`RCTBridge`的工作，实际都转交给了`batchedBridge`对象\n\n\n我们来下，创建`batchedBridge`对象时，做了什么事情\n```\n- (instancetype)initWithParentBridge:(RCTBridge *)bridge\n{\n  RCTAssertParam(bridge);\n\n  if ((self = [super initWithDelegate:bridge.delegate\n                            bundleURL:bridge.bundleURL\n                       moduleProvider:bridge.moduleProvider\n                        launchOptions:bridge.launchOptions])) {\n    _parentBridge = bridge; \b//保存bridge\n    _valid = YES;\n    _loading = YES;\n    _pendingCalls = [NSMutableArray new];\n    _displayLink = [RCTDisplayLink new]; // 创建定时器，该定时器会定时调用_jsThreadUpdate方法\n\n\n    // 创建用来保存所有导出给js使用的模块信息的数组\n    _moduleDataByName = [NSMutableDictionary new];\n    _moduleClassesByID = [NSMutableArray new];\n    _moduleDataByID = [NSMutableArray new];\n\n    //\b设置RCTBridge.m文件中\u001d的静态对象RCTCurrentBridgeInstance==batchedBridge\n    [RCTBridge setCurrentBridge:self];\n  }\n  return self;\n}\n```\n\n\n","slug":"ReactNative启动流程","published":1,"updated":"2018-10-13T09:00:06.362Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjn77vbr90000n8qsd06icpdn","content":"<p>最近在学习ReactNative,很好奇其中的实现原理，并且在网上基本上是启动和通讯原理的介绍，通讯原理并没有理顺，所以想这段时间打算把ReactNative原理给整清楚，出一个针对iOS专题系列</p>\n<p><a href=\"\">ReactNative\b源码解读准备篇</a></p>\n<p><a href=\"\">ReactNative启动流程</a></p>\n<p><a href=\"\">ReactNative通信原理</a></p>\n<p>\b<a href=\"\">\bReactNative\b事件传播机制</a></p>\n<p><a href=\"\">ReactNative布局原理</a></p>\n<p><a href=\"\">ReactNative渲染流程</a></p>\n<h2 id=\"启动流程\"><a href=\"#启动流程\" class=\"headerlink\" title=\"启动流程\"></a>启动流程</h2><p><span id=\"inline-blue\">注意: 本系列粘贴的所有代码，会忽略非重要的代码 </span></p>\n<p>\b新建一个ReactNative项目，\b\b打开其中的iOS项目，我们就可以分析app的启动流程了。首先在<code>AppDelegate</code>中，有如下两行代码<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"built_in\">BOOL</span>)application:(<span class=\"built_in\">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class=\"built_in\">NSDictionary</span> *)launchOptions</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"built_in\">NSURL</span> *jsCodeLocation;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 这个方法主要是根据环境来确定当前js文件的具体路径</span></span><br><span class=\"line\">  jsCodeLocation = [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:<span class=\"string\">@\"index\"</span> fallbackResource:<span class=\"literal\">nil</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 这个是\b我们app的根视图</span></span><br><span class=\"line\">  RCTRootView *rootView = [[RCTRootView alloc] initWithBundleURL:jsCodeLocation</span><br><span class=\"line\">                                                      moduleName:<span class=\"string\">@\"LoveFoods\"</span></span><br><span class=\"line\">                                               initialProperties:<span class=\"literal\">nil</span></span><br><span class=\"line\">                                                   launchOptions:launchOptions];</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在创建app根视图的时候创建了bridge对象,该对象负责native和js的交互，js运行环境的准备等工作<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RCTBridge *bridge = [[RCTBridge alloc] initWithBundleURL:bundleURL</span><br><span class=\"line\">                                            moduleProvider:<span class=\"literal\">nil</span></span><br><span class=\"line\">                                             launchOptions:launchOptions];</span><br><span class=\"line\"><span class=\"keyword\">return</span> [<span class=\"keyword\">self</span> initWithBridge:bridge moduleName:moduleName initialProperties:initialProperties];</span><br></pre></td></tr></table></figure></p>\n<p>在<code>RCTBridge</code>的初始化方法<code>nitWithBundleURL: moduleProvider: launchOptions:</code>中调用了setUp方法, 我们直接来看setUp方法</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)setUp</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  Class bridgeClass = <span class=\"keyword\">self</span>.bridgeClass;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">#if RCT_DEV // \bdev的情况下注册监听command+r\b的键盘事件，在这里我们暂时不需要关心</span></span><br><span class=\"line\">  RCTExecuteOnMainQueue(^&#123;</span><br><span class=\"line\">    RCTRegisterReloadCommandListener(<span class=\"keyword\">self</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"meta\">#endif</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">self</span>.batchedBridge = [[bridgeClass alloc] initWithParentBridge:<span class=\"keyword\">self</span>];</span><br><span class=\"line\">  [<span class=\"keyword\">self</span>.batchedBridge start];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>setup方法中创建了<code>batchedBridge</code>对象，该对象为<code>RCTCxxBridge</code>的实例，<code>RCTBridge</code>的工作，实际都转交给了<code>batchedBridge</code>对象</p>\n<p>我们来下，创建<code>batchedBridge</code>对象时，做了什么事情<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (instancetype)initWithParentBridge:(RCTBridge *)bridge</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  RCTAssertParam(bridge);</span><br><span class=\"line\"></span><br><span class=\"line\">  if ((self = [super initWithDelegate:bridge.delegate</span><br><span class=\"line\">                            bundleURL:bridge.bundleURL</span><br><span class=\"line\">                       moduleProvider:bridge.moduleProvider</span><br><span class=\"line\">                        launchOptions:bridge.launchOptions])) &#123;</span><br><span class=\"line\">    _parentBridge = bridge; \b//保存bridge</span><br><span class=\"line\">    _valid = YES;</span><br><span class=\"line\">    _loading = YES;</span><br><span class=\"line\">    _pendingCalls = [NSMutableArray new];</span><br><span class=\"line\">    _displayLink = [RCTDisplayLink new]; // 创建定时器，该定时器会定时调用_jsThreadUpdate方法</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    // 创建用来保存所有导出给js使用的模块信息的数组</span><br><span class=\"line\">    _moduleDataByName = [NSMutableDictionary new];</span><br><span class=\"line\">    _moduleClassesByID = [NSMutableArray new];</span><br><span class=\"line\">    _moduleDataByID = [NSMutableArray new];</span><br><span class=\"line\"></span><br><span class=\"line\">    //\b设置RCTBridge.m文件中\u001d的静态对象RCTCurrentBridgeInstance==batchedBridge</span><br><span class=\"line\">    [RCTBridge setCurrentBridge:self];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return self;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近在学习ReactNative,很好奇其中的实现原理，并且在网上基本上是启动和通讯原理的介绍，通讯原理并没有理顺，所以想这段时间打算把ReactNative原理给整清楚，出一个针对iOS专题系列</p>\n<p><a href=\"\">ReactNative\b源码解读准备篇</a></p>\n<p><a href=\"\">ReactNative启动流程</a></p>\n<p><a href=\"\">ReactNative通信原理</a></p>\n<p>\b<a href=\"\">\bReactNative\b事件传播机制</a></p>\n<p><a href=\"\">ReactNative布局原理</a></p>\n<p><a href=\"\">ReactNative渲染流程</a></p>\n<h2 id=\"启动流程\"><a href=\"#启动流程\" class=\"headerlink\" title=\"启动流程\"></a>启动流程</h2><p><span id=\"inline-blue\">注意: 本系列粘贴的所有代码，会忽略非重要的代码 </span></p>\n<p>\b新建一个ReactNative项目，\b\b打开其中的iOS项目，我们就可以分析app的启动流程了。首先在<code>AppDelegate</code>中，有如下两行代码<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"built_in\">BOOL</span>)application:(<span class=\"built_in\">UIApplication</span> *)application didFinishLaunchingWithOptions:(<span class=\"built_in\">NSDictionary</span> *)launchOptions</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"built_in\">NSURL</span> *jsCodeLocation;</span><br><span class=\"line\">  </span><br><span class=\"line\">  <span class=\"comment\">// 这个方法主要是根据环境来确定当前js文件的具体路径</span></span><br><span class=\"line\">  jsCodeLocation = [[RCTBundleURLProvider sharedSettings] jsBundleURLForBundleRoot:<span class=\"string\">@\"index\"</span> fallbackResource:<span class=\"literal\">nil</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 这个是\b我们app的根视图</span></span><br><span class=\"line\">  RCTRootView *rootView = [[RCTRootView alloc] initWithBundleURL:jsCodeLocation</span><br><span class=\"line\">                                                      moduleName:<span class=\"string\">@\"LoveFoods\"</span></span><br><span class=\"line\">                                               initialProperties:<span class=\"literal\">nil</span></span><br><span class=\"line\">                                                   launchOptions:launchOptions];</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"literal\">YES</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>在创建app根视图的时候创建了bridge对象,该对象负责native和js的交互，js运行环境的准备等工作<br><figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">RCTBridge *bridge = [[RCTBridge alloc] initWithBundleURL:bundleURL</span><br><span class=\"line\">                                            moduleProvider:<span class=\"literal\">nil</span></span><br><span class=\"line\">                                             launchOptions:launchOptions];</span><br><span class=\"line\"><span class=\"keyword\">return</span> [<span class=\"keyword\">self</span> initWithBridge:bridge moduleName:moduleName initialProperties:initialProperties];</span><br></pre></td></tr></table></figure></p>\n<p>在<code>RCTBridge</code>的初始化方法<code>nitWithBundleURL: moduleProvider: launchOptions:</code>中调用了setUp方法, 我们直接来看setUp方法</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (<span class=\"keyword\">void</span>)setUp</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  Class bridgeClass = <span class=\"keyword\">self</span>.bridgeClass;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"meta\">#if RCT_DEV // \bdev的情况下注册监听command+r\b的键盘事件，在这里我们暂时不需要关心</span></span><br><span class=\"line\">  RCTExecuteOnMainQueue(^&#123;</span><br><span class=\"line\">    RCTRegisterReloadCommandListener(<span class=\"keyword\">self</span>);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">  <span class=\"meta\">#endif</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">self</span>.batchedBridge = [[bridgeClass alloc] initWithParentBridge:<span class=\"keyword\">self</span>];</span><br><span class=\"line\">  [<span class=\"keyword\">self</span>.batchedBridge start];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>setup方法中创建了<code>batchedBridge</code>对象，该对象为<code>RCTCxxBridge</code>的实例，<code>RCTBridge</code>的工作，实际都转交给了<code>batchedBridge</code>对象</p>\n<p>我们来下，创建<code>batchedBridge</code>对象时，做了什么事情<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- (instancetype)initWithParentBridge:(RCTBridge *)bridge</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  RCTAssertParam(bridge);</span><br><span class=\"line\"></span><br><span class=\"line\">  if ((self = [super initWithDelegate:bridge.delegate</span><br><span class=\"line\">                            bundleURL:bridge.bundleURL</span><br><span class=\"line\">                       moduleProvider:bridge.moduleProvider</span><br><span class=\"line\">                        launchOptions:bridge.launchOptions])) &#123;</span><br><span class=\"line\">    _parentBridge = bridge; \b//保存bridge</span><br><span class=\"line\">    _valid = YES;</span><br><span class=\"line\">    _loading = YES;</span><br><span class=\"line\">    _pendingCalls = [NSMutableArray new];</span><br><span class=\"line\">    _displayLink = [RCTDisplayLink new]; // 创建定时器，该定时器会定时调用_jsThreadUpdate方法</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">    // 创建用来保存所有导出给js使用的模块信息的数组</span><br><span class=\"line\">    _moduleDataByName = [NSMutableDictionary new];</span><br><span class=\"line\">    _moduleClassesByID = [NSMutableArray new];</span><br><span class=\"line\">    _moduleDataByID = [NSMutableArray new];</span><br><span class=\"line\"></span><br><span class=\"line\">    //\b设置RCTBridge.m文件中\u001d的静态对象RCTCurrentBridgeInstance==batchedBridge</span><br><span class=\"line\">    [RCTBridge setCurrentBridge:self];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  return self;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n"},{"title":"ReactNative启动流程","date":"2018-04-03T08:13:14.000Z","_content":"\n最近在学习ReactNative,很好奇其中的实现原理，并且在网上基本上是启动和通讯原理的介绍，通讯原理并没有理顺，所以想这段时间打算把ReactNative原理给整清楚，出一个针对iOS专题系列\n\n[ReactNative\b源码解读准备篇]()\n\n[ReactNative启动流程]()\n\n\b[\bReactNative通信原理]()\n\n\b[\bReactNative\b事件传播机制]()\n\n[ReactNative布局原理]()\n\n[ReactNative渲染流程]()\n\n\n## 在iOS中如何导出类给RN使用\n    \n在这里我斗胆借用一下【ReactNative\b](https://reactnative.cn/docs/0.51/native-modules-ios.html#content)中的话\n\n> 在React Native中，一个“原生模块”就是一个实现了“RCTBridgeModule”协议的Objective-C类，其中RCT是ReaCT的缩写。\n\n```objc\n@interface TestBridgeClass : NSObject <RCTBridgeModule>\n\n@end\n```\n\n>为了实现RCTBridgeModule协议，你的类需要包含RCT_EXPORT_MODULE()宏。这个宏也可以添加一个参数用来指定在Javascript中访问这个模块的名字。如果你不指定，默认就会使用这个Objective-C类的名字。\n\n```objc\n@implementation TestBridgeClass\n\nRCT_EXPORT_MODULE();\n\n- (void)loveFoods:(NSString * )name {\n  NSLog(@\"我需要被导出\");\n}\n@end\n```\n这样我们在RN\b中就能访问`TestBridgeClass`这个类了，那么要访问他的 ` - (void)loveFoods:(NSString * )name ` 方法呢,这时我们需要通过`RCT_EXPORT_METHOD()`宏来导出该方法.方式如下\n\n```objc\n@implementation TestBridgeClass\n\nRCT_EXPORT_MODULE();\n\nRCT_EXPORT_METHOD(loveFoods:(NSString*) name) {\n  NSLog(@\"我是导出的方法\");\n}\n\n- (void)test {\n  NSLog(@\"在RN中无法访问我\");\n}\n\n@end\n```\n\n这样在RN中就可以访问`TestBridgeClass`了，\b需要注意的是，只有native端导出的方法\b\b才能被RN端访问\n\n## 在RN中如何使用iOS导出的类\n在RN中使用\bnative端导出的类很简单，代码如下\n```javascript\nimport { NativeModules } from 'react-native';\n\nvar TestBridgeClass = NativeModules.TestBridgeClass;\n\nCalendarManager.loveFoods(\"\bbanana\");\n```\n\n重新复述一遍\b上面的内容，主要是为了分析里面的两个重要的宏的作用，`RCT_EXPORT_MODULE()` 和`RCT_EXPORT_METHOD()`\n\n\n### 理解RCT_EXPORT_MODULE\n我们一个一个来理解。下面，我们把该宏一步步展开，展开代码如下：\n\n```objc\n#define RCT_EXPORT_MODULE(js_name) \\\nRCT_EXTERN void RCTRegisterModule(Class); \\\n+ (NSString *)moduleName { return @#js_name; } \\\n+ (void)load { RCTRegisterModule(self); }\n\n//RCT_EXTERN定义如下\n#if defined(__cplusplus)\n#define RCT_EXTERN extern \"C\" __attribute__((visibility(\"default\")))\n#define RCT_EXTERN_C_BEGIN extern \"C\" {\n#define RCT_EXTERN_C_END }\n#else\n#define RCT_EXTERN extern __attribute__((visibility(\"default\")))\n#define RCT_EXTERN_C_BEGIN\n#define RCT_EXTERN_C_END\n#endif\n```\n关于RCT_EXTER的宏定义，我们只关心if和else中的第一行。\b以下解析来自[MJRefresh源码\b阅读](https://www.aliyun.com/jiaocheng/369170.html)\n\n>其中__cplusplus 是cpp中的自定义宏,那么定义了这个宏的话表示这是一段cpp的代码,也就是说,上面的代码的含义是:如果这是一段cpp的代码,那么加入extern\"C\"和其中的代码。\n\n>extern是C/C++语言中表明函数和全局变量作用范围(可见性)的关键字,该关键字告诉编译器,其声明的函数和变量可以在本模块或其它模块中使用。 \n\n>那extern \"C\"呢?C++之父在设计C++之时,考虑到当时已经存在了大量的C代码,为了支持原来的C代码和已经写好C库,需要在C++中尽可能的支持C,而 extern \"C\"就是其中的一个策略。\n\n>attribute是GNU C的一种机制,用法为attribute_ ((attribute-list))。当项目需要作为一个库被外包引用的时候通常在编译时可以用参数-fvisibility指定所有符号的可见性。在编译命令中加入 -fvisibility=hidden参数,会将所有默认的public的属性变为hidden。此时,如果对函数设置attribute((visibility (\"default\")))参数,使特定的函数仍然按默认的public属性处理,则-fvisibility=hidden参数不会对该函数起作用。所以,设置了-fvisibility=hidden参数之后,只有设置了attribute((visibility (\"default\")))的函数才是对外可见的。\n\n关于attribute_更详细的用法请参考[GCC系列: __attribute__((visibility(\"\")))](https://blog.csdn.net/veryitman/article/details/46756683)\n\n那么`RCT_EXTERN void RCTRegisterModule(Class);`的含义其实就是往当前类中导入`RCTRegisterModule(Class)这个C方法`，该方法的定义在`RCTBridge.m`中。\n\n\n`+ (NSString *)moduleName { return @#js_name; }` \b这行是生命一个类方法，\b该类方法返回在RN中该\b类的名称。 #在C中的语法，作用是把宏参数变为一个字符，如果js_name=\"aaa\"， 则`@#js_name` 的结果是`@\"aaa\"` ，\b则在RN中可以按一下方式访问该类\b\n\n```javascript\n    var TestBridgeClass = NativeModules.aaa;\n```\n\n`+ (void)load { RCTRegisterModule(self); }`则是\b在类中重写了Load方法，该方法调用之前导入的`RCTRegisterModule`函数, `RCTRegisterModule`方法很简单，只是在`RCTModuleClasses`数组中保存了当前导出到RN的类\n\n```objc\n\nstatic NSMutableArray<Class> *RCTModuleClasses; // RCTBridge\b中的全局静态变量\n\nvoid RCTRegisterModule(Class moduleClass)\n{\n  static dispatch_once_t onceToken;\n  dispatch_once(&onceToken, ^{\n    RCTModuleClasses = [NSMutableArray new];\n  });\n\n  RCTAssert([moduleClass conformsToProtocol:@protocol(RCTBridgeModule)],\n            @\"%@ does not conform to the RCTBridgeModule protocol\",\n            moduleClass);\n\n  // Register module\n  [RCTModuleClasses addObject:moduleClass];\n}\n```\n\n### \b理解RCT_EXPORT_METHOD()\n`\bRCT_EXPORT_METHOD`源码展开如下\n\n```objc\n#define RCT_EXPORT_METHOD(method) \\\n  RCT_REMAP_METHOD(, method)\n\n#define RCT_REMAP_METHOD(js_name, method) \\\n  _RCT_EXTERN_REMAP_METHOD(js_name, method, NO) \\\n  - (void)method; // 在类中声明导出的方法\n\n#define _RCT_EXTERN_REMAP_METHOD(js_name, method, is_blocking_synchronous_method) \\\n  + (const RCTMethodInfo *)RCT_CONCAT(__rct_export__, RCT_CONCAT(js_name, RCT_CONCAT(__LINE__, __COUNTER__))) { \\\n    static RCTMethodInfo config = {#js_name, #method, is_blocking_synchronous_method}; \\\n    return &config; \\\n  }\n```\n`_RCT_EXTERN_REMAP_METHOD` 要知道这个宏定义的作用，我们先了解下`RCT_CONCAT`这个宏定义\n\n```objc\n#define RCT_CONCAT2(A, B) A ## B\n#define RCT_CONCAT(A, B) RCT_CONCAT2(A, B)\n```\n\b显然，这个宏将被替换为 `A ## B`, `##`在C语言中是作为连接字符的意思，如果A\b=\"aa\", B=\"BB\",则 `A ## B`的结果为`aabb`, `RCT_CONCAT`在`_RCT_EXTERN_REMAP_METHOD`方法中的\b作用主要是生成一个类方法名。 `__LINE__` 是获取当前的line, `__COUTER__`是在当前文件中的计数，从0开始，每使用一次，计数加1 如我们的`loveFoods`方法，在这个宏定义后会生成一个名为 `+ [TestBridgeClass __rct_export__150]`的类方法， 其中的数字15由`__LINE__`提供， 数字0由`__COUNTER__`提供.\n\n我们可以通过app的[linkmap](http://blog.cnbang.net/tech/2296/)来验证上面的内容: \n1.XCode开启编译选项Write Link Map File\nXCode -> Project -> Build Settings -> 搜map -> 把Write Link Map File选项设为yes，并指定好linkMap的存储位置.![](https://ws4.sinaimg.cn/large/006tNc79gy1fpziy6kdv8j31kg0fyn1a.jpg)\n\n编译后，到指定位置找到该文件，打开该文件，搜索`Symbols`,\b第一个\b后面就能找到你要的信息。我的内容如下\n\n![](https://ws1.sinaimg.cn/large/006tNc79gy1fpzj1uyemnj30iy03c77q.jpg)\n\n嗯，到这里我们就知道了iOS端这些宏定义具体做了啥，\b下一篇，我们来看启动\b流程篇吧...\n\nif you have any question, leave a message!","source":"_posts/ReactNative源码解读准备篇.md","raw":"---\ntitle: ReactNative启动流程\ndate: 2018-04-03 16:13:14\ntags: ReactNative\ncategories: ReactNative\n---\n\n最近在学习ReactNative,很好奇其中的实现原理，并且在网上基本上是启动和通讯原理的介绍，通讯原理并没有理顺，所以想这段时间打算把ReactNative原理给整清楚，出一个针对iOS专题系列\n\n[ReactNative\b源码解读准备篇]()\n\n[ReactNative启动流程]()\n\n\b[\bReactNative通信原理]()\n\n\b[\bReactNative\b事件传播机制]()\n\n[ReactNative布局原理]()\n\n[ReactNative渲染流程]()\n\n\n## 在iOS中如何导出类给RN使用\n    \n在这里我斗胆借用一下【ReactNative\b](https://reactnative.cn/docs/0.51/native-modules-ios.html#content)中的话\n\n> 在React Native中，一个“原生模块”就是一个实现了“RCTBridgeModule”协议的Objective-C类，其中RCT是ReaCT的缩写。\n\n```objc\n@interface TestBridgeClass : NSObject <RCTBridgeModule>\n\n@end\n```\n\n>为了实现RCTBridgeModule协议，你的类需要包含RCT_EXPORT_MODULE()宏。这个宏也可以添加一个参数用来指定在Javascript中访问这个模块的名字。如果你不指定，默认就会使用这个Objective-C类的名字。\n\n```objc\n@implementation TestBridgeClass\n\nRCT_EXPORT_MODULE();\n\n- (void)loveFoods:(NSString * )name {\n  NSLog(@\"我需要被导出\");\n}\n@end\n```\n这样我们在RN\b中就能访问`TestBridgeClass`这个类了，那么要访问他的 ` - (void)loveFoods:(NSString * )name ` 方法呢,这时我们需要通过`RCT_EXPORT_METHOD()`宏来导出该方法.方式如下\n\n```objc\n@implementation TestBridgeClass\n\nRCT_EXPORT_MODULE();\n\nRCT_EXPORT_METHOD(loveFoods:(NSString*) name) {\n  NSLog(@\"我是导出的方法\");\n}\n\n- (void)test {\n  NSLog(@\"在RN中无法访问我\");\n}\n\n@end\n```\n\n这样在RN中就可以访问`TestBridgeClass`了，\b需要注意的是，只有native端导出的方法\b\b才能被RN端访问\n\n## 在RN中如何使用iOS导出的类\n在RN中使用\bnative端导出的类很简单，代码如下\n```javascript\nimport { NativeModules } from 'react-native';\n\nvar TestBridgeClass = NativeModules.TestBridgeClass;\n\nCalendarManager.loveFoods(\"\bbanana\");\n```\n\n重新复述一遍\b上面的内容，主要是为了分析里面的两个重要的宏的作用，`RCT_EXPORT_MODULE()` 和`RCT_EXPORT_METHOD()`\n\n\n### 理解RCT_EXPORT_MODULE\n我们一个一个来理解。下面，我们把该宏一步步展开，展开代码如下：\n\n```objc\n#define RCT_EXPORT_MODULE(js_name) \\\nRCT_EXTERN void RCTRegisterModule(Class); \\\n+ (NSString *)moduleName { return @#js_name; } \\\n+ (void)load { RCTRegisterModule(self); }\n\n//RCT_EXTERN定义如下\n#if defined(__cplusplus)\n#define RCT_EXTERN extern \"C\" __attribute__((visibility(\"default\")))\n#define RCT_EXTERN_C_BEGIN extern \"C\" {\n#define RCT_EXTERN_C_END }\n#else\n#define RCT_EXTERN extern __attribute__((visibility(\"default\")))\n#define RCT_EXTERN_C_BEGIN\n#define RCT_EXTERN_C_END\n#endif\n```\n关于RCT_EXTER的宏定义，我们只关心if和else中的第一行。\b以下解析来自[MJRefresh源码\b阅读](https://www.aliyun.com/jiaocheng/369170.html)\n\n>其中__cplusplus 是cpp中的自定义宏,那么定义了这个宏的话表示这是一段cpp的代码,也就是说,上面的代码的含义是:如果这是一段cpp的代码,那么加入extern\"C\"和其中的代码。\n\n>extern是C/C++语言中表明函数和全局变量作用范围(可见性)的关键字,该关键字告诉编译器,其声明的函数和变量可以在本模块或其它模块中使用。 \n\n>那extern \"C\"呢?C++之父在设计C++之时,考虑到当时已经存在了大量的C代码,为了支持原来的C代码和已经写好C库,需要在C++中尽可能的支持C,而 extern \"C\"就是其中的一个策略。\n\n>attribute是GNU C的一种机制,用法为attribute_ ((attribute-list))。当项目需要作为一个库被外包引用的时候通常在编译时可以用参数-fvisibility指定所有符号的可见性。在编译命令中加入 -fvisibility=hidden参数,会将所有默认的public的属性变为hidden。此时,如果对函数设置attribute((visibility (\"default\")))参数,使特定的函数仍然按默认的public属性处理,则-fvisibility=hidden参数不会对该函数起作用。所以,设置了-fvisibility=hidden参数之后,只有设置了attribute((visibility (\"default\")))的函数才是对外可见的。\n\n关于attribute_更详细的用法请参考[GCC系列: __attribute__((visibility(\"\")))](https://blog.csdn.net/veryitman/article/details/46756683)\n\n那么`RCT_EXTERN void RCTRegisterModule(Class);`的含义其实就是往当前类中导入`RCTRegisterModule(Class)这个C方法`，该方法的定义在`RCTBridge.m`中。\n\n\n`+ (NSString *)moduleName { return @#js_name; }` \b这行是生命一个类方法，\b该类方法返回在RN中该\b类的名称。 #在C中的语法，作用是把宏参数变为一个字符，如果js_name=\"aaa\"， 则`@#js_name` 的结果是`@\"aaa\"` ，\b则在RN中可以按一下方式访问该类\b\n\n```javascript\n    var TestBridgeClass = NativeModules.aaa;\n```\n\n`+ (void)load { RCTRegisterModule(self); }`则是\b在类中重写了Load方法，该方法调用之前导入的`RCTRegisterModule`函数, `RCTRegisterModule`方法很简单，只是在`RCTModuleClasses`数组中保存了当前导出到RN的类\n\n```objc\n\nstatic NSMutableArray<Class> *RCTModuleClasses; // RCTBridge\b中的全局静态变量\n\nvoid RCTRegisterModule(Class moduleClass)\n{\n  static dispatch_once_t onceToken;\n  dispatch_once(&onceToken, ^{\n    RCTModuleClasses = [NSMutableArray new];\n  });\n\n  RCTAssert([moduleClass conformsToProtocol:@protocol(RCTBridgeModule)],\n            @\"%@ does not conform to the RCTBridgeModule protocol\",\n            moduleClass);\n\n  // Register module\n  [RCTModuleClasses addObject:moduleClass];\n}\n```\n\n### \b理解RCT_EXPORT_METHOD()\n`\bRCT_EXPORT_METHOD`源码展开如下\n\n```objc\n#define RCT_EXPORT_METHOD(method) \\\n  RCT_REMAP_METHOD(, method)\n\n#define RCT_REMAP_METHOD(js_name, method) \\\n  _RCT_EXTERN_REMAP_METHOD(js_name, method, NO) \\\n  - (void)method; // 在类中声明导出的方法\n\n#define _RCT_EXTERN_REMAP_METHOD(js_name, method, is_blocking_synchronous_method) \\\n  + (const RCTMethodInfo *)RCT_CONCAT(__rct_export__, RCT_CONCAT(js_name, RCT_CONCAT(__LINE__, __COUNTER__))) { \\\n    static RCTMethodInfo config = {#js_name, #method, is_blocking_synchronous_method}; \\\n    return &config; \\\n  }\n```\n`_RCT_EXTERN_REMAP_METHOD` 要知道这个宏定义的作用，我们先了解下`RCT_CONCAT`这个宏定义\n\n```objc\n#define RCT_CONCAT2(A, B) A ## B\n#define RCT_CONCAT(A, B) RCT_CONCAT2(A, B)\n```\n\b显然，这个宏将被替换为 `A ## B`, `##`在C语言中是作为连接字符的意思，如果A\b=\"aa\", B=\"BB\",则 `A ## B`的结果为`aabb`, `RCT_CONCAT`在`_RCT_EXTERN_REMAP_METHOD`方法中的\b作用主要是生成一个类方法名。 `__LINE__` 是获取当前的line, `__COUTER__`是在当前文件中的计数，从0开始，每使用一次，计数加1 如我们的`loveFoods`方法，在这个宏定义后会生成一个名为 `+ [TestBridgeClass __rct_export__150]`的类方法， 其中的数字15由`__LINE__`提供， 数字0由`__COUNTER__`提供.\n\n我们可以通过app的[linkmap](http://blog.cnbang.net/tech/2296/)来验证上面的内容: \n1.XCode开启编译选项Write Link Map File\nXCode -> Project -> Build Settings -> 搜map -> 把Write Link Map File选项设为yes，并指定好linkMap的存储位置.![](https://ws4.sinaimg.cn/large/006tNc79gy1fpziy6kdv8j31kg0fyn1a.jpg)\n\n编译后，到指定位置找到该文件，打开该文件，搜索`Symbols`,\b第一个\b后面就能找到你要的信息。我的内容如下\n\n![](https://ws1.sinaimg.cn/large/006tNc79gy1fpzj1uyemnj30iy03c77q.jpg)\n\n嗯，到这里我们就知道了iOS端这些宏定义具体做了啥，\b下一篇，我们来看启动\b流程篇吧...\n\nif you have any question, leave a message!","slug":"ReactNative源码解读准备篇","published":1,"updated":"2018-10-12T12:10:23.164Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjn77vbre0001n8qsvskzkq16","content":"<p>最近在学习ReactNative,很好奇其中的实现原理，并且在网上基本上是启动和通讯原理的介绍，通讯原理并没有理顺，所以想这段时间打算把ReactNative原理给整清楚，出一个针对iOS专题系列</p>\n<p><a href=\"\">ReactNative\b源码解读准备篇</a></p>\n<p><a href=\"\">ReactNative启动流程</a></p>\n<p>\b<a href=\"\">\bReactNative通信原理</a></p>\n<p>\b<a href=\"\">\bReactNative\b事件传播机制</a></p>\n<p><a href=\"\">ReactNative布局原理</a></p>\n<p><a href=\"\">ReactNative渲染流程</a></p>\n<h2 id=\"在iOS中如何导出类给RN使用\"><a href=\"#在iOS中如何导出类给RN使用\" class=\"headerlink\" title=\"在iOS中如何导出类给RN使用\"></a>在iOS中如何导出类给RN使用</h2><p>在这里我斗胆借用一下【ReactNative\b](<a href=\"https://reactnative.cn/docs/0.51/native-modules-ios.html#content)中的话\" target=\"_blank\" rel=\"noopener\">https://reactnative.cn/docs/0.51/native-modules-ios.html#content)中的话</a></p>\n<blockquote>\n<p>在React Native中，一个“原生模块”就是一个实现了“RCTBridgeModule”协议的Objective-C类，其中RCT是ReaCT的缩写。</p>\n</blockquote>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">TestBridgeClass</span> : <span class=\"title\">NSObject</span> &lt;<span class=\"title\">RCTBridgeModule</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>为了实现RCTBridgeModule协议，你的类需要包含RCT_EXPORT_MODULE()宏。这个宏也可以添加一个参数用来指定在Javascript中访问这个模块的名字。如果你不指定，默认就会使用这个Objective-C类的名字。</p>\n</blockquote>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">TestBridgeClass</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">RCT_EXPORT_MODULE();</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)loveFoods:(<span class=\"built_in\">NSString</span> * )name &#123;</span><br><span class=\"line\">  <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"我需要被导出\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<p>这样我们在RN\b中就能访问<code>TestBridgeClass</code>这个类了，那么要访问他的 <code>- (void)loveFoods:(NSString * )name</code> 方法呢,这时我们需要通过<code>RCT_EXPORT_METHOD()</code>宏来导出该方法.方式如下</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">TestBridgeClass</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">RCT_EXPORT_MODULE();</span><br><span class=\"line\"></span><br><span class=\"line\">RCT_EXPORT_METHOD(loveFoods:(<span class=\"built_in\">NSString</span>*) name) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"我是导出的方法\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)test &#123;</span><br><span class=\"line\">  <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"在RN中无法访问我\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<p>这样在RN中就可以访问<code>TestBridgeClass</code>了，\b需要注意的是，只有native端导出的方法\b\b才能被RN端访问</p>\n<h2 id=\"在RN中如何使用iOS导出的类\"><a href=\"#在RN中如何使用iOS导出的类\" class=\"headerlink\" title=\"在RN中如何使用iOS导出的类\"></a>在RN中如何使用iOS导出的类</h2><p>在RN中使用\bnative端导出的类很简单，代码如下<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; NativeModules &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> TestBridgeClass = NativeModules.TestBridgeClass;</span><br><span class=\"line\"></span><br><span class=\"line\">CalendarManager.loveFoods(<span class=\"string\">\"\bbanana\"</span>);</span><br></pre></td></tr></table></figure></p>\n<p>重新复述一遍\b上面的内容，主要是为了分析里面的两个重要的宏的作用，<code>RCT_EXPORT_MODULE()</code> 和<code>RCT_EXPORT_METHOD()</code></p>\n<h3 id=\"理解RCT-EXPORT-MODULE\"><a href=\"#理解RCT-EXPORT-MODULE\" class=\"headerlink\" title=\"理解RCT_EXPORT_MODULE\"></a>理解RCT_EXPORT_MODULE</h3><p>我们一个一个来理解。下面，我们把该宏一步步展开，展开代码如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#define RCT_EXPORT_MODULE(js_name) \\</span></span><br><span class=\"line\">RCT_EXTERN <span class=\"keyword\">void</span> RCTRegisterModule(Class); \\</span><br><span class=\"line\">+ (<span class=\"built_in\">NSString</span> *)moduleName &#123; <span class=\"keyword\">return</span> @<span class=\"meta\">#js_name; &#125; \\</span></span><br><span class=\"line\">+ (<span class=\"keyword\">void</span>)load &#123; RCTRegisterModule(<span class=\"keyword\">self</span>); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//RCT_EXTERN定义如下</span></span><br><span class=\"line\"><span class=\"meta\">#if defined(__cplusplus)</span></span><br><span class=\"line\"><span class=\"meta\">#define RCT_EXTERN extern <span class=\"meta-string\">\"C\"</span> __attribute__((visibility(<span class=\"meta-string\">\"default\"</span>)))</span></span><br><span class=\"line\"><span class=\"meta\">#define RCT_EXTERN_C_BEGIN extern <span class=\"meta-string\">\"C\"</span> &#123;</span></span><br><span class=\"line\"><span class=\"meta\">#define RCT_EXTERN_C_END &#125;</span></span><br><span class=\"line\"><span class=\"meta\">#else</span></span><br><span class=\"line\"><span class=\"meta\">#define RCT_EXTERN extern __attribute__((visibility(<span class=\"meta-string\">\"default\"</span>)))</span></span><br><span class=\"line\"><span class=\"meta\">#define RCT_EXTERN_C_BEGIN</span></span><br><span class=\"line\"><span class=\"meta\">#define RCT_EXTERN_C_END</span></span><br><span class=\"line\"><span class=\"meta\">#endif</span></span><br></pre></td></tr></table></figure>\n<p>关于RCT_EXTER的宏定义，我们只关心if和else中的第一行。\b以下解析来自<a href=\"https://www.aliyun.com/jiaocheng/369170.html\" target=\"_blank\" rel=\"noopener\">MJRefresh源码\b阅读</a></p>\n<blockquote>\n<p>其中__cplusplus 是cpp中的自定义宏,那么定义了这个宏的话表示这是一段cpp的代码,也就是说,上面的代码的含义是:如果这是一段cpp的代码,那么加入extern”C”和其中的代码。</p>\n</blockquote>\n<blockquote>\n<p>extern是C/C++语言中表明函数和全局变量作用范围(可见性)的关键字,该关键字告诉编译器,其声明的函数和变量可以在本模块或其它模块中使用。 </p>\n</blockquote>\n<blockquote>\n<p>那extern “C”呢?C++之父在设计C++之时,考虑到当时已经存在了大量的C代码,为了支持原来的C代码和已经写好C库,需要在C++中尽可能的支持C,而 extern “C”就是其中的一个策略。</p>\n</blockquote>\n<blockquote>\n<p>attribute是GNU C的一种机制,用法为attribute_ ((attribute-list))。当项目需要作为一个库被外包引用的时候通常在编译时可以用参数-fvisibility指定所有符号的可见性。在编译命令中加入 -fvisibility=hidden参数,会将所有默认的public的属性变为hidden。此时,如果对函数设置attribute((visibility (“default”)))参数,使特定的函数仍然按默认的public属性处理,则-fvisibility=hidden参数不会对该函数起作用。所以,设置了-fvisibility=hidden参数之后,只有设置了attribute((visibility (“default”)))的函数才是对外可见的。</p>\n</blockquote>\n<p>关于attribute_更详细的用法请参考<a href=\"https://blog.csdn.net/veryitman/article/details/46756683\" target=\"_blank\" rel=\"noopener\">GCC系列: <strong>attribute</strong>((visibility(“”)))</a></p>\n<p>那么<code>RCT_EXTERN void RCTRegisterModule(Class);</code>的含义其实就是往当前类中导入<code>RCTRegisterModule(Class)这个C方法</code>，该方法的定义在<code>RCTBridge.m</code>中。</p>\n<p><code>+ (NSString *)moduleName { return @#js_name; }</code> \b这行是生命一个类方法，\b该类方法返回在RN中该\b类的名称。 #在C中的语法，作用是把宏参数变为一个字符，如果js_name=”aaa”， 则<code>@#js_name</code> 的结果是<code>@&quot;aaa&quot;</code> ，\b则在RN中可以按一下方式访问该类\b</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> TestBridgeClass = NativeModules.aaa;</span><br></pre></td></tr></table></figure>\n<p><code>+ (void)load { RCTRegisterModule(self); }</code>则是\b在类中重写了Load方法，该方法调用之前导入的<code>RCTRegisterModule</code>函数, <code>RCTRegisterModule</code>方法很简单，只是在<code>RCTModuleClasses</code>数组中保存了当前导出到RN的类</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"built_in\">NSMutableArray</span>&lt;Class&gt; *RCTModuleClasses; <span class=\"comment\">// RCTBridge\b中的全局静态变量</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> RCTRegisterModule(Class moduleClass)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"built_in\">dispatch_once_t</span> onceToken;</span><br><span class=\"line\">  <span class=\"built_in\">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class=\"line\">    RCTModuleClasses = [<span class=\"built_in\">NSMutableArray</span> new];</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  RCTAssert([moduleClass conformsToProtocol:<span class=\"class\"><span class=\"keyword\">@protocol</span>(<span class=\"title\">RCTBridgeModule</span>)],</span></span><br><span class=\"line\">            <span class=\"string\">@\"%@ does not conform to the RCTBridgeModule protocol\"</span>,</span><br><span class=\"line\">            moduleClass);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Register module</span></span><br><span class=\"line\">  [RCTModuleClasses addObject:moduleClass];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"理解RCT-EXPORT-METHOD\"><a href=\"#理解RCT-EXPORT-METHOD\" class=\"headerlink\" title=\"\b理解RCT_EXPORT_METHOD()\"></a>\b理解RCT_EXPORT_METHOD()</h3><p><code>\bRCT_EXPORT_METHOD</code>源码展开如下</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#define RCT_EXPORT_METHOD(method) \\</span></span><br><span class=\"line\">  RCT_REMAP_METHOD(, method)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#define RCT_REMAP_METHOD(js_name, method) \\</span></span><br><span class=\"line\">  _RCT_EXTERN_REMAP_METHOD(js_name, method, <span class=\"literal\">NO</span>) \\</span><br><span class=\"line\">  - (<span class=\"keyword\">void</span>)method; <span class=\"comment\">// 在类中声明导出的方法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#define _RCT_EXTERN_REMAP_METHOD(js_name, method, is_blocking_synchronous_method) \\</span></span><br><span class=\"line\">  + (<span class=\"keyword\">const</span> RCTMethodInfo *)RCT_CONCAT(__rct_export__, RCT_CONCAT(js_name, RCT_CONCAT(__LINE__, __COUNTER__))) &#123; \\</span><br><span class=\"line\">    <span class=\"keyword\">static</span> RCTMethodInfo config = &#123;<span class=\"meta\">#js_name, #method, is_blocking_synchronous_method&#125;; \\</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;config; \\</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p><code>_RCT_EXTERN_REMAP_METHOD</code> 要知道这个宏定义的作用，我们先了解下<code>RCT_CONCAT</code>这个宏定义</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#define RCT_CONCAT2(A, B) A ## B</span></span><br><span class=\"line\"><span class=\"meta\">#define RCT_CONCAT(A, B) RCT_CONCAT2(A, B)</span></span><br></pre></td></tr></table></figure>\n<p>\b显然，这个宏将被替换为 <code>A ## B</code>, <code>##</code>在C语言中是作为连接字符的意思，如果A\b=”aa”, B=”BB”,则 <code>A ## B</code>的结果为<code>aabb</code>, <code>RCT_CONCAT</code>在<code>_RCT_EXTERN_REMAP_METHOD</code>方法中的\b作用主要是生成一个类方法名。 <code>__LINE__</code> 是获取当前的line, <code>__COUTER__</code>是在当前文件中的计数，从0开始，每使用一次，计数加1 如我们的<code>loveFoods</code>方法，在这个宏定义后会生成一个名为 <code>+ [TestBridgeClass __rct_export__150]</code>的类方法， 其中的数字15由<code>__LINE__</code>提供， 数字0由<code>__COUNTER__</code>提供.</p>\n<p>我们可以通过app的<a href=\"http://blog.cnbang.net/tech/2296/\" target=\"_blank\" rel=\"noopener\">linkmap</a>来验证上面的内容:<br>1.XCode开启编译选项Write Link Map File<br>XCode -&gt; Project -&gt; Build Settings -&gt; 搜map -&gt; 把Write Link Map File选项设为yes，并指定好linkMap的存储位置.<img src=\"https://ws4.sinaimg.cn/large/006tNc79gy1fpziy6kdv8j31kg0fyn1a.jpg\" alt=\"\"></p>\n<p>编译后，到指定位置找到该文件，打开该文件，搜索<code>Symbols</code>,\b第一个\b后面就能找到你要的信息。我的内容如下</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/006tNc79gy1fpzj1uyemnj30iy03c77q.jpg\" alt=\"\"></p>\n<p>嗯，到这里我们就知道了iOS端这些宏定义具体做了啥，\b下一篇，我们来看启动\b流程篇吧…</p>\n<p>if you have any question, leave a message!</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近在学习ReactNative,很好奇其中的实现原理，并且在网上基本上是启动和通讯原理的介绍，通讯原理并没有理顺，所以想这段时间打算把ReactNative原理给整清楚，出一个针对iOS专题系列</p>\n<p><a href=\"\">ReactNative\b源码解读准备篇</a></p>\n<p><a href=\"\">ReactNative启动流程</a></p>\n<p>\b<a href=\"\">\bReactNative通信原理</a></p>\n<p>\b<a href=\"\">\bReactNative\b事件传播机制</a></p>\n<p><a href=\"\">ReactNative布局原理</a></p>\n<p><a href=\"\">ReactNative渲染流程</a></p>\n<h2 id=\"在iOS中如何导出类给RN使用\"><a href=\"#在iOS中如何导出类给RN使用\" class=\"headerlink\" title=\"在iOS中如何导出类给RN使用\"></a>在iOS中如何导出类给RN使用</h2><p>在这里我斗胆借用一下【ReactNative\b](<a href=\"https://reactnative.cn/docs/0.51/native-modules-ios.html#content)中的话\" target=\"_blank\" rel=\"noopener\">https://reactnative.cn/docs/0.51/native-modules-ios.html#content)中的话</a></p>\n<blockquote>\n<p>在React Native中，一个“原生模块”就是一个实现了“RCTBridgeModule”协议的Objective-C类，其中RCT是ReaCT的缩写。</p>\n</blockquote>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@interface</span> <span class=\"title\">TestBridgeClass</span> : <span class=\"title\">NSObject</span> &lt;<span class=\"title\">RCTBridgeModule</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>为了实现RCTBridgeModule协议，你的类需要包含RCT_EXPORT_MODULE()宏。这个宏也可以添加一个参数用来指定在Javascript中访问这个模块的名字。如果你不指定，默认就会使用这个Objective-C类的名字。</p>\n</blockquote>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">TestBridgeClass</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">RCT_EXPORT_MODULE();</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)loveFoods:(<span class=\"built_in\">NSString</span> * )name &#123;</span><br><span class=\"line\">  <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"我需要被导出\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<p>这样我们在RN\b中就能访问<code>TestBridgeClass</code>这个类了，那么要访问他的 <code>- (void)loveFoods:(NSString * )name</code> 方法呢,这时我们需要通过<code>RCT_EXPORT_METHOD()</code>宏来导出该方法.方式如下</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">@implementation</span> <span class=\"title\">TestBridgeClass</span></span></span><br><span class=\"line\"></span><br><span class=\"line\">RCT_EXPORT_MODULE();</span><br><span class=\"line\"></span><br><span class=\"line\">RCT_EXPORT_METHOD(loveFoods:(<span class=\"built_in\">NSString</span>*) name) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"我是导出的方法\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">- (<span class=\"keyword\">void</span>)test &#123;</span><br><span class=\"line\">  <span class=\"built_in\">NSLog</span>(<span class=\"string\">@\"在RN中无法访问我\"</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">@end</span></span><br></pre></td></tr></table></figure>\n<p>这样在RN中就可以访问<code>TestBridgeClass</code>了，\b需要注意的是，只有native端导出的方法\b\b才能被RN端访问</p>\n<h2 id=\"在RN中如何使用iOS导出的类\"><a href=\"#在RN中如何使用iOS导出的类\" class=\"headerlink\" title=\"在RN中如何使用iOS导出的类\"></a>在RN中如何使用iOS导出的类</h2><p>在RN中使用\bnative端导出的类很简单，代码如下<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> &#123; NativeModules &#125; <span class=\"keyword\">from</span> <span class=\"string\">'react-native'</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> TestBridgeClass = NativeModules.TestBridgeClass;</span><br><span class=\"line\"></span><br><span class=\"line\">CalendarManager.loveFoods(<span class=\"string\">\"\bbanana\"</span>);</span><br></pre></td></tr></table></figure></p>\n<p>重新复述一遍\b上面的内容，主要是为了分析里面的两个重要的宏的作用，<code>RCT_EXPORT_MODULE()</code> 和<code>RCT_EXPORT_METHOD()</code></p>\n<h3 id=\"理解RCT-EXPORT-MODULE\"><a href=\"#理解RCT-EXPORT-MODULE\" class=\"headerlink\" title=\"理解RCT_EXPORT_MODULE\"></a>理解RCT_EXPORT_MODULE</h3><p>我们一个一个来理解。下面，我们把该宏一步步展开，展开代码如下：</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#define RCT_EXPORT_MODULE(js_name) \\</span></span><br><span class=\"line\">RCT_EXTERN <span class=\"keyword\">void</span> RCTRegisterModule(Class); \\</span><br><span class=\"line\">+ (<span class=\"built_in\">NSString</span> *)moduleName &#123; <span class=\"keyword\">return</span> @<span class=\"meta\">#js_name; &#125; \\</span></span><br><span class=\"line\">+ (<span class=\"keyword\">void</span>)load &#123; RCTRegisterModule(<span class=\"keyword\">self</span>); &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//RCT_EXTERN定义如下</span></span><br><span class=\"line\"><span class=\"meta\">#if defined(__cplusplus)</span></span><br><span class=\"line\"><span class=\"meta\">#define RCT_EXTERN extern <span class=\"meta-string\">\"C\"</span> __attribute__((visibility(<span class=\"meta-string\">\"default\"</span>)))</span></span><br><span class=\"line\"><span class=\"meta\">#define RCT_EXTERN_C_BEGIN extern <span class=\"meta-string\">\"C\"</span> &#123;</span></span><br><span class=\"line\"><span class=\"meta\">#define RCT_EXTERN_C_END &#125;</span></span><br><span class=\"line\"><span class=\"meta\">#else</span></span><br><span class=\"line\"><span class=\"meta\">#define RCT_EXTERN extern __attribute__((visibility(<span class=\"meta-string\">\"default\"</span>)))</span></span><br><span class=\"line\"><span class=\"meta\">#define RCT_EXTERN_C_BEGIN</span></span><br><span class=\"line\"><span class=\"meta\">#define RCT_EXTERN_C_END</span></span><br><span class=\"line\"><span class=\"meta\">#endif</span></span><br></pre></td></tr></table></figure>\n<p>关于RCT_EXTER的宏定义，我们只关心if和else中的第一行。\b以下解析来自<a href=\"https://www.aliyun.com/jiaocheng/369170.html\" target=\"_blank\" rel=\"noopener\">MJRefresh源码\b阅读</a></p>\n<blockquote>\n<p>其中__cplusplus 是cpp中的自定义宏,那么定义了这个宏的话表示这是一段cpp的代码,也就是说,上面的代码的含义是:如果这是一段cpp的代码,那么加入extern”C”和其中的代码。</p>\n</blockquote>\n<blockquote>\n<p>extern是C/C++语言中表明函数和全局变量作用范围(可见性)的关键字,该关键字告诉编译器,其声明的函数和变量可以在本模块或其它模块中使用。 </p>\n</blockquote>\n<blockquote>\n<p>那extern “C”呢?C++之父在设计C++之时,考虑到当时已经存在了大量的C代码,为了支持原来的C代码和已经写好C库,需要在C++中尽可能的支持C,而 extern “C”就是其中的一个策略。</p>\n</blockquote>\n<blockquote>\n<p>attribute是GNU C的一种机制,用法为attribute_ ((attribute-list))。当项目需要作为一个库被外包引用的时候通常在编译时可以用参数-fvisibility指定所有符号的可见性。在编译命令中加入 -fvisibility=hidden参数,会将所有默认的public的属性变为hidden。此时,如果对函数设置attribute((visibility (“default”)))参数,使特定的函数仍然按默认的public属性处理,则-fvisibility=hidden参数不会对该函数起作用。所以,设置了-fvisibility=hidden参数之后,只有设置了attribute((visibility (“default”)))的函数才是对外可见的。</p>\n</blockquote>\n<p>关于attribute_更详细的用法请参考<a href=\"https://blog.csdn.net/veryitman/article/details/46756683\" target=\"_blank\" rel=\"noopener\">GCC系列: <strong>attribute</strong>((visibility(“”)))</a></p>\n<p>那么<code>RCT_EXTERN void RCTRegisterModule(Class);</code>的含义其实就是往当前类中导入<code>RCTRegisterModule(Class)这个C方法</code>，该方法的定义在<code>RCTBridge.m</code>中。</p>\n<p><code>+ (NSString *)moduleName { return @#js_name; }</code> \b这行是生命一个类方法，\b该类方法返回在RN中该\b类的名称。 #在C中的语法，作用是把宏参数变为一个字符，如果js_name=”aaa”， 则<code>@#js_name</code> 的结果是<code>@&quot;aaa&quot;</code> ，\b则在RN中可以按一下方式访问该类\b</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> TestBridgeClass = NativeModules.aaa;</span><br></pre></td></tr></table></figure>\n<p><code>+ (void)load { RCTRegisterModule(self); }</code>则是\b在类中重写了Load方法，该方法调用之前导入的<code>RCTRegisterModule</code>函数, <code>RCTRegisterModule</code>方法很简单，只是在<code>RCTModuleClasses</code>数组中保存了当前导出到RN的类</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">static</span> <span class=\"built_in\">NSMutableArray</span>&lt;Class&gt; *RCTModuleClasses; <span class=\"comment\">// RCTBridge\b中的全局静态变量</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">void</span> RCTRegisterModule(Class moduleClass)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"keyword\">static</span> <span class=\"built_in\">dispatch_once_t</span> onceToken;</span><br><span class=\"line\">  <span class=\"built_in\">dispatch_once</span>(&amp;onceToken, ^&#123;</span><br><span class=\"line\">    RCTModuleClasses = [<span class=\"built_in\">NSMutableArray</span> new];</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">  RCTAssert([moduleClass conformsToProtocol:<span class=\"class\"><span class=\"keyword\">@protocol</span>(<span class=\"title\">RCTBridgeModule</span>)],</span></span><br><span class=\"line\">            <span class=\"string\">@\"%@ does not conform to the RCTBridgeModule protocol\"</span>,</span><br><span class=\"line\">            moduleClass);</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// Register module</span></span><br><span class=\"line\">  [RCTModuleClasses addObject:moduleClass];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"理解RCT-EXPORT-METHOD\"><a href=\"#理解RCT-EXPORT-METHOD\" class=\"headerlink\" title=\"\b理解RCT_EXPORT_METHOD()\"></a>\b理解RCT_EXPORT_METHOD()</h3><p><code>\bRCT_EXPORT_METHOD</code>源码展开如下</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#define RCT_EXPORT_METHOD(method) \\</span></span><br><span class=\"line\">  RCT_REMAP_METHOD(, method)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#define RCT_REMAP_METHOD(js_name, method) \\</span></span><br><span class=\"line\">  _RCT_EXTERN_REMAP_METHOD(js_name, method, <span class=\"literal\">NO</span>) \\</span><br><span class=\"line\">  - (<span class=\"keyword\">void</span>)method; <span class=\"comment\">// 在类中声明导出的方法</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#define _RCT_EXTERN_REMAP_METHOD(js_name, method, is_blocking_synchronous_method) \\</span></span><br><span class=\"line\">  + (<span class=\"keyword\">const</span> RCTMethodInfo *)RCT_CONCAT(__rct_export__, RCT_CONCAT(js_name, RCT_CONCAT(__LINE__, __COUNTER__))) &#123; \\</span><br><span class=\"line\">    <span class=\"keyword\">static</span> RCTMethodInfo config = &#123;<span class=\"meta\">#js_name, #method, is_blocking_synchronous_method&#125;; \\</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> &amp;config; \\</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p><code>_RCT_EXTERN_REMAP_METHOD</code> 要知道这个宏定义的作用，我们先了解下<code>RCT_CONCAT</code>这个宏定义</p>\n<figure class=\"highlight objc\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#define RCT_CONCAT2(A, B) A ## B</span></span><br><span class=\"line\"><span class=\"meta\">#define RCT_CONCAT(A, B) RCT_CONCAT2(A, B)</span></span><br></pre></td></tr></table></figure>\n<p>\b显然，这个宏将被替换为 <code>A ## B</code>, <code>##</code>在C语言中是作为连接字符的意思，如果A\b=”aa”, B=”BB”,则 <code>A ## B</code>的结果为<code>aabb</code>, <code>RCT_CONCAT</code>在<code>_RCT_EXTERN_REMAP_METHOD</code>方法中的\b作用主要是生成一个类方法名。 <code>__LINE__</code> 是获取当前的line, <code>__COUTER__</code>是在当前文件中的计数，从0开始，每使用一次，计数加1 如我们的<code>loveFoods</code>方法，在这个宏定义后会生成一个名为 <code>+ [TestBridgeClass __rct_export__150]</code>的类方法， 其中的数字15由<code>__LINE__</code>提供， 数字0由<code>__COUNTER__</code>提供.</p>\n<p>我们可以通过app的<a href=\"http://blog.cnbang.net/tech/2296/\" target=\"_blank\" rel=\"noopener\">linkmap</a>来验证上面的内容:<br>1.XCode开启编译选项Write Link Map File<br>XCode -&gt; Project -&gt; Build Settings -&gt; 搜map -&gt; 把Write Link Map File选项设为yes，并指定好linkMap的存储位置.<img src=\"https://ws4.sinaimg.cn/large/006tNc79gy1fpziy6kdv8j31kg0fyn1a.jpg\" alt=\"\"></p>\n<p>编译后，到指定位置找到该文件，打开该文件，搜索<code>Symbols</code>,\b第一个\b后面就能找到你要的信息。我的内容如下</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/006tNc79gy1fpzj1uyemnj30iy03c77q.jpg\" alt=\"\"></p>\n<p>嗯，到这里我们就知道了iOS端这些宏定义具体做了啥，\b下一篇，我们来看启动\b流程篇吧…</p>\n<p>if you have any question, leave a message!</p>\n"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2017-10-28T00:39:58.000Z","updated":"2017-10-28T00:39:58.000Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjn77vbrh0004n8qsfnuvraim","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"noopener\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"noopener\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"noopener\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"noopener\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"noopener\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"noopener\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"noopener\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"noopener\">Deployment</a></p>\n"},{"title":"hexo + github 搭建个人博客","date":"2018-04-02T03:56:46.000Z","_content":"\n\n现在hexo+github搭建个人博客的文章已经非常多了，写这篇文章的目的是因为喜欢Anisina这个主题，而这个主题的作者有一段时间没更新了，缺少一些功能。为了用这个主题添加自己想要的功能，所以就有了这篇博文。希望这边文章能帮助喜欢Anisina主题的小伙伴，少踩一点坑。\n\n\n### 参考博客\n[博客](https://www.jianshu.com/p/13e64c9e2295)\n[Anisina主题](https://haojen.github.io/2017/05/09/Anisina-%E4%B8%AD%E6%96%87%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/#undefined)\n[主题配置](https://www.jianshu.com/p/f054333ac9e6)\n[Next主题配置](https://www.jianshu.com/p/f054333ac9e6)\n\n\n### Hexo安装\n#### 安装node.js\n#### 安装Hexo\n在terminal中执行以下命令\n> $ sudo npm install -g hexo \n\n### 初始化自己的博客项目\n#### 创建你用来保存博客的文件夹，比如：Blog  创建文件夹的命令如下\n> $ mkdir Blog\n\n#### cd到刚创建的文件夹中\n> $ cd Blog\n\n#### 初始化hexo\n> $ hexo init\n    \n#### 安装hexo工程所需包\n> $ npm install\n\n#### 启动hexo服务\n> $ hexo s\n\n此时，浏览器中打开网址http://localhost:4000，能看到如下页面：\n![此处输入图片的描述](https://ws3.sinaimg.cn/large/006tNc79gy1fp4hdtduzcj31kw0w47wh.jpg)\n\n\n\n### 统计博客总字数\n\n> $ npm install hexo-wordcount --save\n```\n<span class=\"post-count\">博客全站共 <%= totalcount(site) %> 字</span>\n```\n\n### 统计博文字数以及阅读时间\n同上安装插件,在post.ejs中加入以下代码\n```\n<span>字数: <%= wordcount(page.content) %></span>\n<span class=\"post-count\"> 阅读时长: <%= min2read(page.content) %> 分钟</span>\n```\n\n### 宠物\n> npm install --save hexo-helper-live2d\n> npm install {your model's package name} \n\n\n#### 系统自带宠物名\n    live2d中自带的宠物模型\n    \n```\nlive2d-widget-model-chitose\nlive2d-widget-model-epsilon2_1\nlive2d-widget-model-gf\nlive2d-widget-model-haru/01 (use npm install --save live2d-widget-model-haru)\nlive2d-widget-model-haru/02 (use npm install --save live2d-widget-model-haru)\nlive2d-widget-model-haruto\nlive2d-widget-model-hibiki\nlive2d-widget-model-hijiki\nlive2d-widget-model-izumi\nlive2d-widget-model-koharu\nlive2d-widget-model-miku\nlive2d-widget-model-ni-j\nlive2d-widget-model-nico\nlive2d-widget-model-nietzsche\nlive2d-widget-model-nipsilon\nlive2d-widget-model-nito\nlive2d-widget-model-shizuku\nlive2d-widget-model-tororo\nlive2d-widget-model-tsumiki\nlive2d-widget-model-unitychan\nlive2d-widget-model-wanko\nlive2d-widget-model-z16\n```\n    \n#### 配置宠物\n    \n    在_config.yml中添加以下配置\n    \n```\n# #宠物\nlive2d:\n  enable: true\n  scriptFrom: local\n  model:\n    use: live2d-widget-model-wanko\n  display:\n    position: right\n    width: 120\n    height: 240\n  mobile:\n    show: false\n```\n\n### 动态背景\n    只需要在 footer.ejs中添加以下代码即可\n```\n<!-- 动态背景 -->\n<script type=\"text/javascript\" src=\"//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js\"></script>\n```\n    \n### 文章结尾\n\n在post.ejs中添加一下代码\n```\n  <!-- 文章结束 -->\n    <% if(is_post()) { %>\n        <div style=\"text-align:center;color: #ccc;font-size:14px;\">-------------本文结束<i class=\"fa fa-paw\"></i>感谢您的阅读-------------</div>\n    <% } %>\n    <br>\n    <hr>\n```\n\n\n### 博文版权声明\n#### 在hexo-theme-Anisina主题目录中，找到 source/css文件夹，新建文件copyright.styl,文件中写入一下内容\n    \n```\n    .copyright {\n      width: 85%;\n      max-width: 45em;\n      margin: 2.8em auto 0;\n      padding: 0.5em 1.0em;\n      border: 1px solid #d3d3d3;\n      font-size: 0.93rem;\n      line-height: 1.6em;\n      word-break: break-all;\n      background: rgba(255,255,255,0.4);\n    }\n    .copyright p{margin:0;}\n    .copyright span {\n      display: inline-block;\n      width: 5.2em;\n      color: #b5b5b5;\n      font-weight: bold;\n    }\n    .copyright .raw {\n      margin-left: 1em;\n      width: 5em;\n    }\n    .copyright a {\n      color: #808080;\n      border-bottom:0;\n    }\n    .copyright a:hover {\n      color: #a3d2a3;\n      text-decoration: underline;\n    }\n    .copyright:hover .fa-clipboard {\n      color: #000;\n    }\n    .copyright .post-url:hover {\n      font-weight: normal;\n    }\n    .copyright .copy-path {\n      margin-left: 1em;\n      width: 1em;\n      +mobile(){display:none;}\n    }\n    .copyright .copy-path:hover {\n      color: #808080;\n      cursor: pointer;\n    }\n```\n\n#### 在head.ejs 中 添加一下代码\n\n```\n    <%- css('css/copyright') %>\n```\n\n####  在post.ejs中的*<%- page.content %>*这行代码下面加入以下代码\n\n```\n<!-- 版权声明 -->\n<% if(is_post()) { %>\n<div class=\"copyright\">\n    <script src=\"//cdn.bootcss.com/clipboard.js/1.5.10/clipboard.min.js\"></script>\n    \n    <!-- JS库 sweetalert 可修改路径 -->\n    <script src=\"https://cdn.bootcss.com/jquery/2.0.0/jquery.min.js\"></script>\n    <script src=\"https://unpkg.com/sweetalert/dist/sweetalert.min.js\"></script>\n    <p><span>本文标题:</span><a href=\"<%= url_for(page.path) %>\"> <%= page.title %></a></p>\n    <p><span>文章作者:</span><a href=\"/\" title=\"访问 <%= theme.author %> 的个人博客\"><%= config.author %></a></p>\n    <p><span>发布时间:</span><%= page.date.format(\"YYYY年MM月DD日 - HH:MM\") %></p>\n    <p><span>最后更新:</span><%= page.updated.format(\"YYYY年MM月DD日 - HH:MM\") %></p>\n    <p><span>原始链接:</span><a href=\"<%= url_for(page.path) %>\" title=\"<%= page.title %>\"><%= page.permalink %></a>\n      <span class=\"copy-path\"  title=\"点击复制文章链接\"><i class=\"fa fa-clipboard\" data-clipboard-text=\"<%= page.permalink %>\"  aria-label=\"复制成功！\"></i></span>\n    </p>\n    <p><span>许可协议:</span><i class=\"fa fa-creative-commons\"></i> <a rel=\"license\" href=\"https://creativecommons.org/licenses/by-nc-nd/4.0/\" target=\"_blank\" title=\"Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)\">署名-非商业性使用-禁止演绎 4.0 国际</a> 转载请保留原文链接及作者。</p>  \n  </div>\n  <script> \n      var clipboard = new Clipboard('.fa-clipboard');\n        $(\".fa-clipboard\").click(function(){\n        clipboard.on('success', function(){\n          swal({   \n            title: \"\",   \n            text: '复制成功',\n            icon: \"success\", \n            showConfirmButton: true\n            });\n          });\n      });  \n  </script>\n<% } %>\n```\n\n### 集成来必力评论系统\n        在你的 _config.yml 里添加use_livere: true ，然后注册一个来比力后，再配置livere_uid: 你的来比力 UID，然后 hexo clean && hexo deploy -g  附上[来必力官网](https://livere.com/)\n        来必力UID获取方式如下: 登录->个人头像->管理页面->代码管理->一般网站，框起来的为UID\n![](https://ws2.sinaimg.cn/large/006tNc79gy1fp5fs0fou2j310w0l5dju.jpg)\n\n\n### 添加简书\n在footer.ejs中  添加如下代码\n```\n <% if (config.jianshu_username) { %>\n    <li>\n        <a target=\"_blank\"  href=\"https://www.jianshu.com/users/<%= config.jianshu_username %>\">\n        <span class=\"fa-stack fa-lg\">\n        <i class=\"fa fa-circle fa-stack-2x\"></i>\n        <i class=\"fa fa-jianshu fa-stack-1x fa-inverse\">简</i>\n        </span>\n        </a>\n    </li>\n <% } %>\n```\n\n在_config.xml中添加如下代码\n```\njianshu_username: ecf4f97c26fa # 你的简书ID\n```\n\n### daovoice即时聊天系统\n#### 注册daovoice账号\n\n点[这里][1]注册，注册后按以后步骤拿到你的appid![获取appid][2]\n\n#### 添加配置\n在_config.yml中添加一下配置\n```\n# daovoice 及时聊天\ndaovoice: true\ndaovoice_app_id: 7dfaf13b #这里填你的刚才获得的 app_id\n```\n#### 在head.esj模板中添加以下代码\n```\n<!-- daovoice -->\n<% if(config.daovoice) { %>\n<script>\n(function(i,s,o,g,r,a,m){i[\"DaoVoiceObject\"]=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=\"utf-8\";m.parentNode.insertBefore(a,m)})(window,document,\"script\",('https:' == document.location.protocol ? 'https:' : 'http:') + \"//widget.daovoice.io/widget/0f81ff2f.js\",\"daovoice\")\n  daovoice('init', {\n      app_id: \"<%= theme.daovoice_app_id%>\"\n    });\n  daovoice('update');\n</script>\n<% } %>\n```\n\n### 增加打赏功能\n\n#### 截图自己微信以及支付宝的收款款码\n#### 在_config.yml中添加如下配置\n```\n#打赏二维码\nqrcodes: [\n  {\n      img: https://ws1.sinaimg.cn/large/006tNc79gy1fp6mjdk6jmj30hc0hcmy3.jpg,\n      text: 支付宝打赏\n  },\n  {\n      img: https://ws1.sinaimg.cn/large/006tNc79gy1fp6mjdbp68j30hc0hcdh3.jpg,\n      text: 微信打赏\n  }\n] \n```\n\n#### 在post.ejs中添加一下代码\n```\n <!-- 打赏 -->\n <% if(is_post()) { %>\n    <% if(config.qrcodes) { %>\n        <div class=\"qrcode\">\n            <!-- <h5 class=\"text-center\">打赏</h5> -->\n            <% config.qrcodes.forEach(function(code){ %>\n            <div class=\"qrcode-item\">\n                <img src=\"<%= code.img %>\" class=\"qrcode-item-img\" />\n                <div class=\"qrcode-item-text\"><%= code.text %></div>\n            </div>\n            <% }); %>\n        </div>\n    <% } %>\n<% } %>\n```\n\n#### 在source/css文件夹中新建qrcode.styl文件，该文件的内容如下\n```\n.qrcode {\n    display: flex;\n    width: 100%;\n    flex-direction: row;\n    justify-content: space-around;\n    align-items: space-between;\n    flex-wrap: wrap;\n}\n\n.qrcode-tem {\n    text-align: center;\n    justify-content: center;\n    align-items: center;\n}\n\n.qrcode-item-img {\n    // flex: 1;\n    width: 250px;\n    height: 250px;\n    // height: 40%;\n    min-width : 200px;\n}\n\n.qrcode-item-text {\n    color: rgb(73, 177, 245);\n    font-size: 14px;\n    // align-content: center;\n    text-align: center;\n}\n```\n\n####  在head.esj中加入一下代码\n```\n    <!-- 打赏 -->\n    <%- css('css/qrcode') %>\n```\n\n\n## Next主题\n### 文字背景色使用\n\n<span id=\"inline-blue\"> 站点配置文件 </span>\n<span id=\"inline-purple\"> 主题配置文件 </span>\n<span id=\"inline-yellow\"> 站点配置文件 </span>\n<span id=\"inline-green\"> 主题配置文件 </span>\n\n```\n<span id=\"inline-blue\"> 站点配置文件 </span>\n<span id=\"inline-purple\"> 主题配置文件 </span>\n<span id=\"inline-yellow\"> 站点配置文件 </span>\n<span id=\"inline-green\"> 主题配置文件 </span>\n```\n\n\n> if you have any questions, leave a message.\n\n  [1]: http://dashboard.daovoice.io/\n  [2]: https://ws2.sinaimg.cn/large/006tKfTcgy1fpuvr58pfbj30xi0nc7al.jpg","source":"_posts/hexo-github-搭建个人博客.md","raw":"---\ntitle: hexo + github 搭建个人博客\ndate: 2018-04-02 11:56:46\ntags: [hexo, Anisina]\ncategories: Hexo\n---\n\n\n现在hexo+github搭建个人博客的文章已经非常多了，写这篇文章的目的是因为喜欢Anisina这个主题，而这个主题的作者有一段时间没更新了，缺少一些功能。为了用这个主题添加自己想要的功能，所以就有了这篇博文。希望这边文章能帮助喜欢Anisina主题的小伙伴，少踩一点坑。\n\n\n### 参考博客\n[博客](https://www.jianshu.com/p/13e64c9e2295)\n[Anisina主题](https://haojen.github.io/2017/05/09/Anisina-%E4%B8%AD%E6%96%87%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/#undefined)\n[主题配置](https://www.jianshu.com/p/f054333ac9e6)\n[Next主题配置](https://www.jianshu.com/p/f054333ac9e6)\n\n\n### Hexo安装\n#### 安装node.js\n#### 安装Hexo\n在terminal中执行以下命令\n> $ sudo npm install -g hexo \n\n### 初始化自己的博客项目\n#### 创建你用来保存博客的文件夹，比如：Blog  创建文件夹的命令如下\n> $ mkdir Blog\n\n#### cd到刚创建的文件夹中\n> $ cd Blog\n\n#### 初始化hexo\n> $ hexo init\n    \n#### 安装hexo工程所需包\n> $ npm install\n\n#### 启动hexo服务\n> $ hexo s\n\n此时，浏览器中打开网址http://localhost:4000，能看到如下页面：\n![此处输入图片的描述](https://ws3.sinaimg.cn/large/006tNc79gy1fp4hdtduzcj31kw0w47wh.jpg)\n\n\n\n### 统计博客总字数\n\n> $ npm install hexo-wordcount --save\n```\n<span class=\"post-count\">博客全站共 <%= totalcount(site) %> 字</span>\n```\n\n### 统计博文字数以及阅读时间\n同上安装插件,在post.ejs中加入以下代码\n```\n<span>字数: <%= wordcount(page.content) %></span>\n<span class=\"post-count\"> 阅读时长: <%= min2read(page.content) %> 分钟</span>\n```\n\n### 宠物\n> npm install --save hexo-helper-live2d\n> npm install {your model's package name} \n\n\n#### 系统自带宠物名\n    live2d中自带的宠物模型\n    \n```\nlive2d-widget-model-chitose\nlive2d-widget-model-epsilon2_1\nlive2d-widget-model-gf\nlive2d-widget-model-haru/01 (use npm install --save live2d-widget-model-haru)\nlive2d-widget-model-haru/02 (use npm install --save live2d-widget-model-haru)\nlive2d-widget-model-haruto\nlive2d-widget-model-hibiki\nlive2d-widget-model-hijiki\nlive2d-widget-model-izumi\nlive2d-widget-model-koharu\nlive2d-widget-model-miku\nlive2d-widget-model-ni-j\nlive2d-widget-model-nico\nlive2d-widget-model-nietzsche\nlive2d-widget-model-nipsilon\nlive2d-widget-model-nito\nlive2d-widget-model-shizuku\nlive2d-widget-model-tororo\nlive2d-widget-model-tsumiki\nlive2d-widget-model-unitychan\nlive2d-widget-model-wanko\nlive2d-widget-model-z16\n```\n    \n#### 配置宠物\n    \n    在_config.yml中添加以下配置\n    \n```\n# #宠物\nlive2d:\n  enable: true\n  scriptFrom: local\n  model:\n    use: live2d-widget-model-wanko\n  display:\n    position: right\n    width: 120\n    height: 240\n  mobile:\n    show: false\n```\n\n### 动态背景\n    只需要在 footer.ejs中添加以下代码即可\n```\n<!-- 动态背景 -->\n<script type=\"text/javascript\" src=\"//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js\"></script>\n```\n    \n### 文章结尾\n\n在post.ejs中添加一下代码\n```\n  <!-- 文章结束 -->\n    <% if(is_post()) { %>\n        <div style=\"text-align:center;color: #ccc;font-size:14px;\">-------------本文结束<i class=\"fa fa-paw\"></i>感谢您的阅读-------------</div>\n    <% } %>\n    <br>\n    <hr>\n```\n\n\n### 博文版权声明\n#### 在hexo-theme-Anisina主题目录中，找到 source/css文件夹，新建文件copyright.styl,文件中写入一下内容\n    \n```\n    .copyright {\n      width: 85%;\n      max-width: 45em;\n      margin: 2.8em auto 0;\n      padding: 0.5em 1.0em;\n      border: 1px solid #d3d3d3;\n      font-size: 0.93rem;\n      line-height: 1.6em;\n      word-break: break-all;\n      background: rgba(255,255,255,0.4);\n    }\n    .copyright p{margin:0;}\n    .copyright span {\n      display: inline-block;\n      width: 5.2em;\n      color: #b5b5b5;\n      font-weight: bold;\n    }\n    .copyright .raw {\n      margin-left: 1em;\n      width: 5em;\n    }\n    .copyright a {\n      color: #808080;\n      border-bottom:0;\n    }\n    .copyright a:hover {\n      color: #a3d2a3;\n      text-decoration: underline;\n    }\n    .copyright:hover .fa-clipboard {\n      color: #000;\n    }\n    .copyright .post-url:hover {\n      font-weight: normal;\n    }\n    .copyright .copy-path {\n      margin-left: 1em;\n      width: 1em;\n      +mobile(){display:none;}\n    }\n    .copyright .copy-path:hover {\n      color: #808080;\n      cursor: pointer;\n    }\n```\n\n#### 在head.ejs 中 添加一下代码\n\n```\n    <%- css('css/copyright') %>\n```\n\n####  在post.ejs中的*<%- page.content %>*这行代码下面加入以下代码\n\n```\n<!-- 版权声明 -->\n<% if(is_post()) { %>\n<div class=\"copyright\">\n    <script src=\"//cdn.bootcss.com/clipboard.js/1.5.10/clipboard.min.js\"></script>\n    \n    <!-- JS库 sweetalert 可修改路径 -->\n    <script src=\"https://cdn.bootcss.com/jquery/2.0.0/jquery.min.js\"></script>\n    <script src=\"https://unpkg.com/sweetalert/dist/sweetalert.min.js\"></script>\n    <p><span>本文标题:</span><a href=\"<%= url_for(page.path) %>\"> <%= page.title %></a></p>\n    <p><span>文章作者:</span><a href=\"/\" title=\"访问 <%= theme.author %> 的个人博客\"><%= config.author %></a></p>\n    <p><span>发布时间:</span><%= page.date.format(\"YYYY年MM月DD日 - HH:MM\") %></p>\n    <p><span>最后更新:</span><%= page.updated.format(\"YYYY年MM月DD日 - HH:MM\") %></p>\n    <p><span>原始链接:</span><a href=\"<%= url_for(page.path) %>\" title=\"<%= page.title %>\"><%= page.permalink %></a>\n      <span class=\"copy-path\"  title=\"点击复制文章链接\"><i class=\"fa fa-clipboard\" data-clipboard-text=\"<%= page.permalink %>\"  aria-label=\"复制成功！\"></i></span>\n    </p>\n    <p><span>许可协议:</span><i class=\"fa fa-creative-commons\"></i> <a rel=\"license\" href=\"https://creativecommons.org/licenses/by-nc-nd/4.0/\" target=\"_blank\" title=\"Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)\">署名-非商业性使用-禁止演绎 4.0 国际</a> 转载请保留原文链接及作者。</p>  \n  </div>\n  <script> \n      var clipboard = new Clipboard('.fa-clipboard');\n        $(\".fa-clipboard\").click(function(){\n        clipboard.on('success', function(){\n          swal({   \n            title: \"\",   \n            text: '复制成功',\n            icon: \"success\", \n            showConfirmButton: true\n            });\n          });\n      });  \n  </script>\n<% } %>\n```\n\n### 集成来必力评论系统\n        在你的 _config.yml 里添加use_livere: true ，然后注册一个来比力后，再配置livere_uid: 你的来比力 UID，然后 hexo clean && hexo deploy -g  附上[来必力官网](https://livere.com/)\n        来必力UID获取方式如下: 登录->个人头像->管理页面->代码管理->一般网站，框起来的为UID\n![](https://ws2.sinaimg.cn/large/006tNc79gy1fp5fs0fou2j310w0l5dju.jpg)\n\n\n### 添加简书\n在footer.ejs中  添加如下代码\n```\n <% if (config.jianshu_username) { %>\n    <li>\n        <a target=\"_blank\"  href=\"https://www.jianshu.com/users/<%= config.jianshu_username %>\">\n        <span class=\"fa-stack fa-lg\">\n        <i class=\"fa fa-circle fa-stack-2x\"></i>\n        <i class=\"fa fa-jianshu fa-stack-1x fa-inverse\">简</i>\n        </span>\n        </a>\n    </li>\n <% } %>\n```\n\n在_config.xml中添加如下代码\n```\njianshu_username: ecf4f97c26fa # 你的简书ID\n```\n\n### daovoice即时聊天系统\n#### 注册daovoice账号\n\n点[这里][1]注册，注册后按以后步骤拿到你的appid![获取appid][2]\n\n#### 添加配置\n在_config.yml中添加一下配置\n```\n# daovoice 及时聊天\ndaovoice: true\ndaovoice_app_id: 7dfaf13b #这里填你的刚才获得的 app_id\n```\n#### 在head.esj模板中添加以下代码\n```\n<!-- daovoice -->\n<% if(config.daovoice) { %>\n<script>\n(function(i,s,o,g,r,a,m){i[\"DaoVoiceObject\"]=r;i[r]=i[r]||function(){(i[r].q=i[r].q||[]).push(arguments)},i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=\"utf-8\";m.parentNode.insertBefore(a,m)})(window,document,\"script\",('https:' == document.location.protocol ? 'https:' : 'http:') + \"//widget.daovoice.io/widget/0f81ff2f.js\",\"daovoice\")\n  daovoice('init', {\n      app_id: \"<%= theme.daovoice_app_id%>\"\n    });\n  daovoice('update');\n</script>\n<% } %>\n```\n\n### 增加打赏功能\n\n#### 截图自己微信以及支付宝的收款款码\n#### 在_config.yml中添加如下配置\n```\n#打赏二维码\nqrcodes: [\n  {\n      img: https://ws1.sinaimg.cn/large/006tNc79gy1fp6mjdk6jmj30hc0hcmy3.jpg,\n      text: 支付宝打赏\n  },\n  {\n      img: https://ws1.sinaimg.cn/large/006tNc79gy1fp6mjdbp68j30hc0hcdh3.jpg,\n      text: 微信打赏\n  }\n] \n```\n\n#### 在post.ejs中添加一下代码\n```\n <!-- 打赏 -->\n <% if(is_post()) { %>\n    <% if(config.qrcodes) { %>\n        <div class=\"qrcode\">\n            <!-- <h5 class=\"text-center\">打赏</h5> -->\n            <% config.qrcodes.forEach(function(code){ %>\n            <div class=\"qrcode-item\">\n                <img src=\"<%= code.img %>\" class=\"qrcode-item-img\" />\n                <div class=\"qrcode-item-text\"><%= code.text %></div>\n            </div>\n            <% }); %>\n        </div>\n    <% } %>\n<% } %>\n```\n\n#### 在source/css文件夹中新建qrcode.styl文件，该文件的内容如下\n```\n.qrcode {\n    display: flex;\n    width: 100%;\n    flex-direction: row;\n    justify-content: space-around;\n    align-items: space-between;\n    flex-wrap: wrap;\n}\n\n.qrcode-tem {\n    text-align: center;\n    justify-content: center;\n    align-items: center;\n}\n\n.qrcode-item-img {\n    // flex: 1;\n    width: 250px;\n    height: 250px;\n    // height: 40%;\n    min-width : 200px;\n}\n\n.qrcode-item-text {\n    color: rgb(73, 177, 245);\n    font-size: 14px;\n    // align-content: center;\n    text-align: center;\n}\n```\n\n####  在head.esj中加入一下代码\n```\n    <!-- 打赏 -->\n    <%- css('css/qrcode') %>\n```\n\n\n## Next主题\n### 文字背景色使用\n\n<span id=\"inline-blue\"> 站点配置文件 </span>\n<span id=\"inline-purple\"> 主题配置文件 </span>\n<span id=\"inline-yellow\"> 站点配置文件 </span>\n<span id=\"inline-green\"> 主题配置文件 </span>\n\n```\n<span id=\"inline-blue\"> 站点配置文件 </span>\n<span id=\"inline-purple\"> 主题配置文件 </span>\n<span id=\"inline-yellow\"> 站点配置文件 </span>\n<span id=\"inline-green\"> 主题配置文件 </span>\n```\n\n\n> if you have any questions, leave a message.\n\n  [1]: http://dashboard.daovoice.io/\n  [2]: https://ws2.sinaimg.cn/large/006tKfTcgy1fpuvr58pfbj30xi0nc7al.jpg","slug":"hexo-github-搭建个人博客","published":1,"updated":"2018-10-12T12:03:08.238Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjn77vbri0005n8qszjm0d63g","content":"<p>现在hexo+github搭建个人博客的文章已经非常多了，写这篇文章的目的是因为喜欢Anisina这个主题，而这个主题的作者有一段时间没更新了，缺少一些功能。为了用这个主题添加自己想要的功能，所以就有了这篇博文。希望这边文章能帮助喜欢Anisina主题的小伙伴，少踩一点坑。</p>\n<h3 id=\"参考博客\"><a href=\"#参考博客\" class=\"headerlink\" title=\"参考博客\"></a>参考博客</h3><p><a href=\"https://www.jianshu.com/p/13e64c9e2295\" target=\"_blank\" rel=\"noopener\">博客</a><br><a href=\"https://haojen.github.io/2017/05/09/Anisina-%E4%B8%AD%E6%96%87%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/#undefined\" target=\"_blank\" rel=\"noopener\">Anisina主题</a><br><a href=\"https://www.jianshu.com/p/f054333ac9e6\" target=\"_blank\" rel=\"noopener\">主题配置</a><br><a href=\"https://www.jianshu.com/p/f054333ac9e6\" target=\"_blank\" rel=\"noopener\">Next主题配置</a></p>\n<h3 id=\"Hexo安装\"><a href=\"#Hexo安装\" class=\"headerlink\" title=\"Hexo安装\"></a>Hexo安装</h3><h4 id=\"安装node-js\"><a href=\"#安装node-js\" class=\"headerlink\" title=\"安装node.js\"></a>安装node.js</h4><h4 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h4><p>在terminal中执行以下命令</p>\n<blockquote>\n<p>$ sudo npm install -g hexo </p>\n</blockquote>\n<h3 id=\"初始化自己的博客项目\"><a href=\"#初始化自己的博客项目\" class=\"headerlink\" title=\"初始化自己的博客项目\"></a>初始化自己的博客项目</h3><h4 id=\"创建你用来保存博客的文件夹，比如：Blog-创建文件夹的命令如下\"><a href=\"#创建你用来保存博客的文件夹，比如：Blog-创建文件夹的命令如下\" class=\"headerlink\" title=\"创建你用来保存博客的文件夹，比如：Blog  创建文件夹的命令如下\"></a>创建你用来保存博客的文件夹，比如：Blog  创建文件夹的命令如下</h4><blockquote>\n<p>$ mkdir Blog</p>\n</blockquote>\n<h4 id=\"cd到刚创建的文件夹中\"><a href=\"#cd到刚创建的文件夹中\" class=\"headerlink\" title=\"cd到刚创建的文件夹中\"></a>cd到刚创建的文件夹中</h4><blockquote>\n<p>$ cd Blog</p>\n</blockquote>\n<h4 id=\"初始化hexo\"><a href=\"#初始化hexo\" class=\"headerlink\" title=\"初始化hexo\"></a>初始化hexo</h4><blockquote>\n<p>$ hexo init</p>\n</blockquote>\n<h4 id=\"安装hexo工程所需包\"><a href=\"#安装hexo工程所需包\" class=\"headerlink\" title=\"安装hexo工程所需包\"></a>安装hexo工程所需包</h4><blockquote>\n<p>$ npm install</p>\n</blockquote>\n<h4 id=\"启动hexo服务\"><a href=\"#启动hexo服务\" class=\"headerlink\" title=\"启动hexo服务\"></a>启动hexo服务</h4><blockquote>\n<p>$ hexo s</p>\n</blockquote>\n<p>此时，浏览器中打开网址<a href=\"http://localhost:4000，能看到如下页面：\" target=\"_blank\" rel=\"noopener\">http://localhost:4000，能看到如下页面：</a><br><img src=\"https://ws3.sinaimg.cn/large/006tNc79gy1fp4hdtduzcj31kw0w47wh.jpg\" alt=\"此处输入图片的描述\"></p>\n<h3 id=\"统计博客总字数\"><a href=\"#统计博客总字数\" class=\"headerlink\" title=\"统计博客总字数\"></a>统计博客总字数</h3><blockquote>\n<p>$ npm install hexo-wordcount –save<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;span class=&quot;post-count&quot;&gt;博客全站共 &lt;%= totalcount(site) %&gt; 字&lt;/span&gt;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"统计博文字数以及阅读时间\"><a href=\"#统计博文字数以及阅读时间\" class=\"headerlink\" title=\"统计博文字数以及阅读时间\"></a>统计博文字数以及阅读时间</h3><p>同上安装插件,在post.ejs中加入以下代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;span&gt;字数: &lt;%= wordcount(page.content) %&gt;&lt;/span&gt;</span><br><span class=\"line\">&lt;span class=&quot;post-count&quot;&gt; 阅读时长: &lt;%= min2read(page.content) %&gt; 分钟&lt;/span&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"宠物\"><a href=\"#宠物\" class=\"headerlink\" title=\"宠物\"></a>宠物</h3><blockquote>\n<p>npm install –save hexo-helper-live2d<br>npm install {your model’s package name} </p>\n</blockquote>\n<h4 id=\"系统自带宠物名\"><a href=\"#系统自带宠物名\" class=\"headerlink\" title=\"系统自带宠物名\"></a>系统自带宠物名</h4><pre><code>live2d中自带的宠物模型\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">live2d-widget-model-chitose</span><br><span class=\"line\">live2d-widget-model-epsilon2_1</span><br><span class=\"line\">live2d-widget-model-gf</span><br><span class=\"line\">live2d-widget-model-haru/01 (use npm install --save live2d-widget-model-haru)</span><br><span class=\"line\">live2d-widget-model-haru/02 (use npm install --save live2d-widget-model-haru)</span><br><span class=\"line\">live2d-widget-model-haruto</span><br><span class=\"line\">live2d-widget-model-hibiki</span><br><span class=\"line\">live2d-widget-model-hijiki</span><br><span class=\"line\">live2d-widget-model-izumi</span><br><span class=\"line\">live2d-widget-model-koharu</span><br><span class=\"line\">live2d-widget-model-miku</span><br><span class=\"line\">live2d-widget-model-ni-j</span><br><span class=\"line\">live2d-widget-model-nico</span><br><span class=\"line\">live2d-widget-model-nietzsche</span><br><span class=\"line\">live2d-widget-model-nipsilon</span><br><span class=\"line\">live2d-widget-model-nito</span><br><span class=\"line\">live2d-widget-model-shizuku</span><br><span class=\"line\">live2d-widget-model-tororo</span><br><span class=\"line\">live2d-widget-model-tsumiki</span><br><span class=\"line\">live2d-widget-model-unitychan</span><br><span class=\"line\">live2d-widget-model-wanko</span><br><span class=\"line\">live2d-widget-model-z16</span><br></pre></td></tr></table></figure>\n<h4 id=\"配置宠物\"><a href=\"#配置宠物\" class=\"headerlink\" title=\"配置宠物\"></a>配置宠物</h4><pre><code>在_config.yml中添加以下配置\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># #宠物</span><br><span class=\"line\">live2d:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  scriptFrom: local</span><br><span class=\"line\">  model:</span><br><span class=\"line\">    use: live2d-widget-model-wanko</span><br><span class=\"line\">  display:</span><br><span class=\"line\">    position: right</span><br><span class=\"line\">    width: 120</span><br><span class=\"line\">    height: 240</span><br><span class=\"line\">  mobile:</span><br><span class=\"line\">    show: false</span><br></pre></td></tr></table></figure>\n<h3 id=\"动态背景\"><a href=\"#动态背景\" class=\"headerlink\" title=\"动态背景\"></a>动态背景</h3><pre><code>只需要在 footer.ejs中添加以下代码即可\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 动态背景 --&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"文章结尾\"><a href=\"#文章结尾\" class=\"headerlink\" title=\"文章结尾\"></a>文章结尾</h3><p>在post.ejs中添加一下代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 文章结束 --&gt;</span><br><span class=\"line\">  &lt;% if(is_post()) &#123; %&gt;</span><br><span class=\"line\">      &lt;div style=&quot;text-align:center;color: #ccc;font-size:14px;&quot;&gt;-------------本文结束&lt;i class=&quot;fa fa-paw&quot;&gt;&lt;/i&gt;感谢您的阅读-------------&lt;/div&gt;</span><br><span class=\"line\">  &lt;% &#125; %&gt;</span><br><span class=\"line\">  &lt;br&gt;</span><br><span class=\"line\">  &lt;hr&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"博文版权声明\"><a href=\"#博文版权声明\" class=\"headerlink\" title=\"博文版权声明\"></a>博文版权声明</h3><h4 id=\"在hexo-theme-Anisina主题目录中，找到-source-css文件夹，新建文件copyright-styl-文件中写入一下内容\"><a href=\"#在hexo-theme-Anisina主题目录中，找到-source-css文件夹，新建文件copyright-styl-文件中写入一下内容\" class=\"headerlink\" title=\"在hexo-theme-Anisina主题目录中，找到 source/css文件夹，新建文件copyright.styl,文件中写入一下内容\"></a>在hexo-theme-Anisina主题目录中，找到 source/css文件夹，新建文件copyright.styl,文件中写入一下内容</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.copyright &#123;</span><br><span class=\"line\">  width: 85%;</span><br><span class=\"line\">  max-width: 45em;</span><br><span class=\"line\">  margin: 2.8em auto 0;</span><br><span class=\"line\">  padding: 0.5em 1.0em;</span><br><span class=\"line\">  border: 1px solid #d3d3d3;</span><br><span class=\"line\">  font-size: 0.93rem;</span><br><span class=\"line\">  line-height: 1.6em;</span><br><span class=\"line\">  word-break: break-all;</span><br><span class=\"line\">  background: rgba(255,255,255,0.4);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.copyright p&#123;margin:0;&#125;</span><br><span class=\"line\">.copyright span &#123;</span><br><span class=\"line\">  display: inline-block;</span><br><span class=\"line\">  width: 5.2em;</span><br><span class=\"line\">  color: #b5b5b5;</span><br><span class=\"line\">  font-weight: bold;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.copyright .raw &#123;</span><br><span class=\"line\">  margin-left: 1em;</span><br><span class=\"line\">  width: 5em;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.copyright a &#123;</span><br><span class=\"line\">  color: #808080;</span><br><span class=\"line\">  border-bottom:0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.copyright a:hover &#123;</span><br><span class=\"line\">  color: #a3d2a3;</span><br><span class=\"line\">  text-decoration: underline;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.copyright:hover .fa-clipboard &#123;</span><br><span class=\"line\">  color: #000;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.copyright .post-url:hover &#123;</span><br><span class=\"line\">  font-weight: normal;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.copyright .copy-path &#123;</span><br><span class=\"line\">  margin-left: 1em;</span><br><span class=\"line\">  width: 1em;</span><br><span class=\"line\">  +mobile()&#123;display:none;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.copyright .copy-path:hover &#123;</span><br><span class=\"line\">  color: #808080;</span><br><span class=\"line\">  cursor: pointer;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"在head-ejs-中-添加一下代码\"><a href=\"#在head-ejs-中-添加一下代码\" class=\"headerlink\" title=\"在head.ejs 中 添加一下代码\"></a>在head.ejs 中 添加一下代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%- css(&apos;css/copyright&apos;) %&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"在post-ejs中的-lt-page-content-gt-这行代码下面加入以下代码\"><a href=\"#在post-ejs中的-lt-page-content-gt-这行代码下面加入以下代码\" class=\"headerlink\" title=\"在post.ejs中的&lt;%- page.content %&gt;这行代码下面加入以下代码\"></a>在post.ejs中的<em>&lt;%- page.content %&gt;</em>这行代码下面加入以下代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 版权声明 --&gt;</span><br><span class=\"line\">&lt;% if(is_post()) &#123; %&gt;</span><br><span class=\"line\">&lt;div class=&quot;copyright&quot;&gt;</span><br><span class=\"line\">    &lt;script src=&quot;//cdn.bootcss.com/clipboard.js/1.5.10/clipboard.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;!-- JS库 sweetalert 可修改路径 --&gt;</span><br><span class=\"line\">    &lt;script src=&quot;https://cdn.bootcss.com/jquery/2.0.0/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script src=&quot;https://unpkg.com/sweetalert/dist/sweetalert.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;p&gt;&lt;span&gt;本文标题:&lt;/span&gt;&lt;a href=&quot;&lt;%= url_for(page.path) %&gt;&quot;&gt; &lt;%= page.title %&gt;&lt;/a&gt;&lt;/p&gt;</span><br><span class=\"line\">    &lt;p&gt;&lt;span&gt;文章作者:&lt;/span&gt;&lt;a href=&quot;/&quot; title=&quot;访问 &lt;%= theme.author %&gt; 的个人博客&quot;&gt;&lt;%= config.author %&gt;&lt;/a&gt;&lt;/p&gt;</span><br><span class=\"line\">    &lt;p&gt;&lt;span&gt;发布时间:&lt;/span&gt;&lt;%= page.date.format(&quot;YYYY年MM月DD日 - HH:MM&quot;) %&gt;&lt;/p&gt;</span><br><span class=\"line\">    &lt;p&gt;&lt;span&gt;最后更新:&lt;/span&gt;&lt;%= page.updated.format(&quot;YYYY年MM月DD日 - HH:MM&quot;) %&gt;&lt;/p&gt;</span><br><span class=\"line\">    &lt;p&gt;&lt;span&gt;原始链接:&lt;/span&gt;&lt;a href=&quot;&lt;%= url_for(page.path) %&gt;&quot; title=&quot;&lt;%= page.title %&gt;&quot;&gt;&lt;%= page.permalink %&gt;&lt;/a&gt;</span><br><span class=\"line\">      &lt;span class=&quot;copy-path&quot;  title=&quot;点击复制文章链接&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; data-clipboard-text=&quot;&lt;%= page.permalink %&gt;&quot;  aria-label=&quot;复制成功！&quot;&gt;&lt;/i&gt;&lt;/span&gt;</span><br><span class=\"line\">    &lt;/p&gt;</span><br><span class=\"line\">    &lt;p&gt;&lt;span&gt;许可协议:&lt;/span&gt;&lt;i class=&quot;fa fa-creative-commons&quot;&gt;&lt;/i&gt; &lt;a rel=&quot;license&quot; href=&quot;https://creativecommons.org/licenses/by-nc-nd/4.0/&quot; target=&quot;_blank&quot; title=&quot;Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)&quot;&gt;署名-非商业性使用-禁止演绎 4.0 国际&lt;/a&gt; 转载请保留原文链接及作者。&lt;/p&gt;  </span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">  &lt;script&gt; </span><br><span class=\"line\">      var clipboard = new Clipboard(&apos;.fa-clipboard&apos;);</span><br><span class=\"line\">        $(&quot;.fa-clipboard&quot;).click(function()&#123;</span><br><span class=\"line\">        clipboard.on(&apos;success&apos;, function()&#123;</span><br><span class=\"line\">          swal(&#123;   </span><br><span class=\"line\">            title: &quot;&quot;,   </span><br><span class=\"line\">            text: &apos;复制成功&apos;,</span><br><span class=\"line\">            icon: &quot;success&quot;, </span><br><span class=\"line\">            showConfirmButton: true</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">      &#125;);  </span><br><span class=\"line\">  &lt;/script&gt;</span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"集成来必力评论系统\"><a href=\"#集成来必力评论系统\" class=\"headerlink\" title=\"集成来必力评论系统\"></a>集成来必力评论系统</h3><pre><code>在你的 _config.yml 里添加use_livere: true ，然后注册一个来比力后，再配置livere_uid: 你的来比力 UID，然后 hexo clean &amp;&amp; hexo deploy -g  附上[来必力官网](https://livere.com/)\n来必力UID获取方式如下: 登录-&gt;个人头像-&gt;管理页面-&gt;代码管理-&gt;一般网站，框起来的为UID\n</code></pre><p><img src=\"https://ws2.sinaimg.cn/large/006tNc79gy1fp5fs0fou2j310w0l5dju.jpg\" alt=\"\"></p>\n<h3 id=\"添加简书\"><a href=\"#添加简书\" class=\"headerlink\" title=\"添加简书\"></a>添加简书</h3><p>在footer.ejs中  添加如下代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% if (config.jianshu_username) &#123; %&gt;</span><br><span class=\"line\">   &lt;li&gt;</span><br><span class=\"line\">       &lt;a target=&quot;_blank&quot;  href=&quot;https://www.jianshu.com/users/&lt;%= config.jianshu_username %&gt;&quot;&gt;</span><br><span class=\"line\">       &lt;span class=&quot;fa-stack fa-lg&quot;&gt;</span><br><span class=\"line\">       &lt;i class=&quot;fa fa-circle fa-stack-2x&quot;&gt;&lt;/i&gt;</span><br><span class=\"line\">       &lt;i class=&quot;fa fa-jianshu fa-stack-1x fa-inverse&quot;&gt;简&lt;/i&gt;</span><br><span class=\"line\">       &lt;/span&gt;</span><br><span class=\"line\">       &lt;/a&gt;</span><br><span class=\"line\">   &lt;/li&gt;</span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure></p>\n<p>在_config.xml中添加如下代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jianshu_username: ecf4f97c26fa # 你的简书ID</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"daovoice即时聊天系统\"><a href=\"#daovoice即时聊天系统\" class=\"headerlink\" title=\"daovoice即时聊天系统\"></a>daovoice即时聊天系统</h3><h4 id=\"注册daovoice账号\"><a href=\"#注册daovoice账号\" class=\"headerlink\" title=\"注册daovoice账号\"></a>注册daovoice账号</h4><p>点<a href=\"http://dashboard.daovoice.io/\" target=\"_blank\" rel=\"noopener\">这里</a>注册，注册后按以后步骤拿到你的appid<img src=\"https://ws2.sinaimg.cn/large/006tKfTcgy1fpuvr58pfbj30xi0nc7al.jpg\" alt=\"获取appid\"></p>\n<h4 id=\"添加配置\"><a href=\"#添加配置\" class=\"headerlink\" title=\"添加配置\"></a>添加配置</h4><p>在_config.yml中添加一下配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># daovoice 及时聊天</span><br><span class=\"line\">daovoice: true</span><br><span class=\"line\">daovoice_app_id: 7dfaf13b #这里填你的刚才获得的 app_id</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"在head-esj模板中添加以下代码\"><a href=\"#在head-esj模板中添加以下代码\" class=\"headerlink\" title=\"在head.esj模板中添加以下代码\"></a>在head.esj模板中添加以下代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- daovoice --&gt;</span><br><span class=\"line\">&lt;% if(config.daovoice) &#123; %&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">(function(i,s,o,g,r,a,m)&#123;i[&quot;DaoVoiceObject&quot;]=r;i[r]=i[r]||function()&#123;(i[r].q=i[r].q||[]).push(arguments)&#125;,i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=&quot;utf-8&quot;;m.parentNode.insertBefore(a,m)&#125;)(window,document,&quot;script&quot;,(&apos;https:&apos; == document.location.protocol ? &apos;https:&apos; : &apos;http:&apos;) + &quot;//widget.daovoice.io/widget/0f81ff2f.js&quot;,&quot;daovoice&quot;)</span><br><span class=\"line\">  daovoice(&apos;init&apos;, &#123;</span><br><span class=\"line\">      app_id: &quot;&lt;%= theme.daovoice_app_id%&gt;&quot;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  daovoice(&apos;update&apos;);</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"增加打赏功能\"><a href=\"#增加打赏功能\" class=\"headerlink\" title=\"增加打赏功能\"></a>增加打赏功能</h3><h4 id=\"截图自己微信以及支付宝的收款款码\"><a href=\"#截图自己微信以及支付宝的收款款码\" class=\"headerlink\" title=\"截图自己微信以及支付宝的收款款码\"></a>截图自己微信以及支付宝的收款款码</h4><h4 id=\"在-config-yml中添加如下配置\"><a href=\"#在-config-yml中添加如下配置\" class=\"headerlink\" title=\"在_config.yml中添加如下配置\"></a>在_config.yml中添加如下配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#打赏二维码</span><br><span class=\"line\">qrcodes: [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      img: https://ws1.sinaimg.cn/large/006tNc79gy1fp6mjdk6jmj30hc0hcmy3.jpg,</span><br><span class=\"line\">      text: 支付宝打赏</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      img: https://ws1.sinaimg.cn/large/006tNc79gy1fp6mjdbp68j30hc0hcdh3.jpg,</span><br><span class=\"line\">      text: 微信打赏</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h4 id=\"在post-ejs中添加一下代码\"><a href=\"#在post-ejs中添加一下代码\" class=\"headerlink\" title=\"在post.ejs中添加一下代码\"></a>在post.ejs中添加一下代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;!-- 打赏 --&gt;</span><br><span class=\"line\"> &lt;% if(is_post()) &#123; %&gt;</span><br><span class=\"line\">    &lt;% if(config.qrcodes) &#123; %&gt;</span><br><span class=\"line\">        &lt;div class=&quot;qrcode&quot;&gt;</span><br><span class=\"line\">            &lt;!-- &lt;h5 class=&quot;text-center&quot;&gt;打赏&lt;/h5&gt; --&gt;</span><br><span class=\"line\">            &lt;% config.qrcodes.forEach(function(code)&#123; %&gt;</span><br><span class=\"line\">            &lt;div class=&quot;qrcode-item&quot;&gt;</span><br><span class=\"line\">                &lt;img src=&quot;&lt;%= code.img %&gt;&quot; class=&quot;qrcode-item-img&quot; /&gt;</span><br><span class=\"line\">                &lt;div class=&quot;qrcode-item-text&quot;&gt;&lt;%= code.text %&gt;&lt;/div&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">            &lt;% &#125;); %&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;% &#125; %&gt;</span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"在source-css文件夹中新建qrcode-styl文件，该文件的内容如下\"><a href=\"#在source-css文件夹中新建qrcode-styl文件，该文件的内容如下\" class=\"headerlink\" title=\"在source/css文件夹中新建qrcode.styl文件，该文件的内容如下\"></a>在source/css文件夹中新建qrcode.styl文件，该文件的内容如下</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.qrcode &#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">    width: 100%;</span><br><span class=\"line\">    flex-direction: row;</span><br><span class=\"line\">    justify-content: space-around;</span><br><span class=\"line\">    align-items: space-between;</span><br><span class=\"line\">    flex-wrap: wrap;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.qrcode-tem &#123;</span><br><span class=\"line\">    text-align: center;</span><br><span class=\"line\">    justify-content: center;</span><br><span class=\"line\">    align-items: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.qrcode-item-img &#123;</span><br><span class=\"line\">    // flex: 1;</span><br><span class=\"line\">    width: 250px;</span><br><span class=\"line\">    height: 250px;</span><br><span class=\"line\">    // height: 40%;</span><br><span class=\"line\">    min-width : 200px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.qrcode-item-text &#123;</span><br><span class=\"line\">    color: rgb(73, 177, 245);</span><br><span class=\"line\">    font-size: 14px;</span><br><span class=\"line\">    // align-content: center;</span><br><span class=\"line\">    text-align: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"在head-esj中加入一下代码\"><a href=\"#在head-esj中加入一下代码\" class=\"headerlink\" title=\"在head.esj中加入一下代码\"></a>在head.esj中加入一下代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 打赏 --&gt;</span><br><span class=\"line\">&lt;%- css(&apos;css/qrcode&apos;) %&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Next主题\"><a href=\"#Next主题\" class=\"headerlink\" title=\"Next主题\"></a>Next主题</h2><h3 id=\"文字背景色使用\"><a href=\"#文字背景色使用\" class=\"headerlink\" title=\"文字背景色使用\"></a>文字背景色使用</h3><p><span id=\"inline-blue\"> 站点配置文件 </span><br><span id=\"inline-purple\"> 主题配置文件 </span><br><span id=\"inline-yellow\"> 站点配置文件 </span><br><span id=\"inline-green\"> 主题配置文件 </span></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;span id=&quot;inline-blue&quot;&gt; 站点配置文件 &lt;/span&gt;</span><br><span class=\"line\">&lt;span id=&quot;inline-purple&quot;&gt; 主题配置文件 &lt;/span&gt;</span><br><span class=\"line\">&lt;span id=&quot;inline-yellow&quot;&gt; 站点配置文件 &lt;/span&gt;</span><br><span class=\"line\">&lt;span id=&quot;inline-green&quot;&gt; 主题配置文件 &lt;/span&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>if you have any questions, leave a message.</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>现在hexo+github搭建个人博客的文章已经非常多了，写这篇文章的目的是因为喜欢Anisina这个主题，而这个主题的作者有一段时间没更新了，缺少一些功能。为了用这个主题添加自己想要的功能，所以就有了这篇博文。希望这边文章能帮助喜欢Anisina主题的小伙伴，少踩一点坑。</p>\n<h3 id=\"参考博客\"><a href=\"#参考博客\" class=\"headerlink\" title=\"参考博客\"></a>参考博客</h3><p><a href=\"https://www.jianshu.com/p/13e64c9e2295\" target=\"_blank\" rel=\"noopener\">博客</a><br><a href=\"https://haojen.github.io/2017/05/09/Anisina-%E4%B8%AD%E6%96%87%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/#undefined\" target=\"_blank\" rel=\"noopener\">Anisina主题</a><br><a href=\"https://www.jianshu.com/p/f054333ac9e6\" target=\"_blank\" rel=\"noopener\">主题配置</a><br><a href=\"https://www.jianshu.com/p/f054333ac9e6\" target=\"_blank\" rel=\"noopener\">Next主题配置</a></p>\n<h3 id=\"Hexo安装\"><a href=\"#Hexo安装\" class=\"headerlink\" title=\"Hexo安装\"></a>Hexo安装</h3><h4 id=\"安装node-js\"><a href=\"#安装node-js\" class=\"headerlink\" title=\"安装node.js\"></a>安装node.js</h4><h4 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h4><p>在terminal中执行以下命令</p>\n<blockquote>\n<p>$ sudo npm install -g hexo </p>\n</blockquote>\n<h3 id=\"初始化自己的博客项目\"><a href=\"#初始化自己的博客项目\" class=\"headerlink\" title=\"初始化自己的博客项目\"></a>初始化自己的博客项目</h3><h4 id=\"创建你用来保存博客的文件夹，比如：Blog-创建文件夹的命令如下\"><a href=\"#创建你用来保存博客的文件夹，比如：Blog-创建文件夹的命令如下\" class=\"headerlink\" title=\"创建你用来保存博客的文件夹，比如：Blog  创建文件夹的命令如下\"></a>创建你用来保存博客的文件夹，比如：Blog  创建文件夹的命令如下</h4><blockquote>\n<p>$ mkdir Blog</p>\n</blockquote>\n<h4 id=\"cd到刚创建的文件夹中\"><a href=\"#cd到刚创建的文件夹中\" class=\"headerlink\" title=\"cd到刚创建的文件夹中\"></a>cd到刚创建的文件夹中</h4><blockquote>\n<p>$ cd Blog</p>\n</blockquote>\n<h4 id=\"初始化hexo\"><a href=\"#初始化hexo\" class=\"headerlink\" title=\"初始化hexo\"></a>初始化hexo</h4><blockquote>\n<p>$ hexo init</p>\n</blockquote>\n<h4 id=\"安装hexo工程所需包\"><a href=\"#安装hexo工程所需包\" class=\"headerlink\" title=\"安装hexo工程所需包\"></a>安装hexo工程所需包</h4><blockquote>\n<p>$ npm install</p>\n</blockquote>\n<h4 id=\"启动hexo服务\"><a href=\"#启动hexo服务\" class=\"headerlink\" title=\"启动hexo服务\"></a>启动hexo服务</h4><blockquote>\n<p>$ hexo s</p>\n</blockquote>\n<p>此时，浏览器中打开网址<a href=\"http://localhost:4000，能看到如下页面：\" target=\"_blank\" rel=\"noopener\">http://localhost:4000，能看到如下页面：</a><br><img src=\"https://ws3.sinaimg.cn/large/006tNc79gy1fp4hdtduzcj31kw0w47wh.jpg\" alt=\"此处输入图片的描述\"></p>\n<h3 id=\"统计博客总字数\"><a href=\"#统计博客总字数\" class=\"headerlink\" title=\"统计博客总字数\"></a>统计博客总字数</h3><blockquote>\n<p>$ npm install hexo-wordcount –save<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;span class=&quot;post-count&quot;&gt;博客全站共 &lt;%= totalcount(site) %&gt; 字&lt;/span&gt;</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"统计博文字数以及阅读时间\"><a href=\"#统计博文字数以及阅读时间\" class=\"headerlink\" title=\"统计博文字数以及阅读时间\"></a>统计博文字数以及阅读时间</h3><p>同上安装插件,在post.ejs中加入以下代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;span&gt;字数: &lt;%= wordcount(page.content) %&gt;&lt;/span&gt;</span><br><span class=\"line\">&lt;span class=&quot;post-count&quot;&gt; 阅读时长: &lt;%= min2read(page.content) %&gt; 分钟&lt;/span&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"宠物\"><a href=\"#宠物\" class=\"headerlink\" title=\"宠物\"></a>宠物</h3><blockquote>\n<p>npm install –save hexo-helper-live2d<br>npm install {your model’s package name} </p>\n</blockquote>\n<h4 id=\"系统自带宠物名\"><a href=\"#系统自带宠物名\" class=\"headerlink\" title=\"系统自带宠物名\"></a>系统自带宠物名</h4><pre><code>live2d中自带的宠物模型\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">live2d-widget-model-chitose</span><br><span class=\"line\">live2d-widget-model-epsilon2_1</span><br><span class=\"line\">live2d-widget-model-gf</span><br><span class=\"line\">live2d-widget-model-haru/01 (use npm install --save live2d-widget-model-haru)</span><br><span class=\"line\">live2d-widget-model-haru/02 (use npm install --save live2d-widget-model-haru)</span><br><span class=\"line\">live2d-widget-model-haruto</span><br><span class=\"line\">live2d-widget-model-hibiki</span><br><span class=\"line\">live2d-widget-model-hijiki</span><br><span class=\"line\">live2d-widget-model-izumi</span><br><span class=\"line\">live2d-widget-model-koharu</span><br><span class=\"line\">live2d-widget-model-miku</span><br><span class=\"line\">live2d-widget-model-ni-j</span><br><span class=\"line\">live2d-widget-model-nico</span><br><span class=\"line\">live2d-widget-model-nietzsche</span><br><span class=\"line\">live2d-widget-model-nipsilon</span><br><span class=\"line\">live2d-widget-model-nito</span><br><span class=\"line\">live2d-widget-model-shizuku</span><br><span class=\"line\">live2d-widget-model-tororo</span><br><span class=\"line\">live2d-widget-model-tsumiki</span><br><span class=\"line\">live2d-widget-model-unitychan</span><br><span class=\"line\">live2d-widget-model-wanko</span><br><span class=\"line\">live2d-widget-model-z16</span><br></pre></td></tr></table></figure>\n<h4 id=\"配置宠物\"><a href=\"#配置宠物\" class=\"headerlink\" title=\"配置宠物\"></a>配置宠物</h4><pre><code>在_config.yml中添加以下配置\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># #宠物</span><br><span class=\"line\">live2d:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  scriptFrom: local</span><br><span class=\"line\">  model:</span><br><span class=\"line\">    use: live2d-widget-model-wanko</span><br><span class=\"line\">  display:</span><br><span class=\"line\">    position: right</span><br><span class=\"line\">    width: 120</span><br><span class=\"line\">    height: 240</span><br><span class=\"line\">  mobile:</span><br><span class=\"line\">    show: false</span><br></pre></td></tr></table></figure>\n<h3 id=\"动态背景\"><a href=\"#动态背景\" class=\"headerlink\" title=\"动态背景\"></a>动态背景</h3><pre><code>只需要在 footer.ejs中添加以下代码即可\n</code></pre><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 动态背景 --&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.bootcss.com/canvas-nest.js/1.0.0/canvas-nest.min.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"文章结尾\"><a href=\"#文章结尾\" class=\"headerlink\" title=\"文章结尾\"></a>文章结尾</h3><p>在post.ejs中添加一下代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 文章结束 --&gt;</span><br><span class=\"line\">  &lt;% if(is_post()) &#123; %&gt;</span><br><span class=\"line\">      &lt;div style=&quot;text-align:center;color: #ccc;font-size:14px;&quot;&gt;-------------本文结束&lt;i class=&quot;fa fa-paw&quot;&gt;&lt;/i&gt;感谢您的阅读-------------&lt;/div&gt;</span><br><span class=\"line\">  &lt;% &#125; %&gt;</span><br><span class=\"line\">  &lt;br&gt;</span><br><span class=\"line\">  &lt;hr&gt;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"博文版权声明\"><a href=\"#博文版权声明\" class=\"headerlink\" title=\"博文版权声明\"></a>博文版权声明</h3><h4 id=\"在hexo-theme-Anisina主题目录中，找到-source-css文件夹，新建文件copyright-styl-文件中写入一下内容\"><a href=\"#在hexo-theme-Anisina主题目录中，找到-source-css文件夹，新建文件copyright-styl-文件中写入一下内容\" class=\"headerlink\" title=\"在hexo-theme-Anisina主题目录中，找到 source/css文件夹，新建文件copyright.styl,文件中写入一下内容\"></a>在hexo-theme-Anisina主题目录中，找到 source/css文件夹，新建文件copyright.styl,文件中写入一下内容</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.copyright &#123;</span><br><span class=\"line\">  width: 85%;</span><br><span class=\"line\">  max-width: 45em;</span><br><span class=\"line\">  margin: 2.8em auto 0;</span><br><span class=\"line\">  padding: 0.5em 1.0em;</span><br><span class=\"line\">  border: 1px solid #d3d3d3;</span><br><span class=\"line\">  font-size: 0.93rem;</span><br><span class=\"line\">  line-height: 1.6em;</span><br><span class=\"line\">  word-break: break-all;</span><br><span class=\"line\">  background: rgba(255,255,255,0.4);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.copyright p&#123;margin:0;&#125;</span><br><span class=\"line\">.copyright span &#123;</span><br><span class=\"line\">  display: inline-block;</span><br><span class=\"line\">  width: 5.2em;</span><br><span class=\"line\">  color: #b5b5b5;</span><br><span class=\"line\">  font-weight: bold;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.copyright .raw &#123;</span><br><span class=\"line\">  margin-left: 1em;</span><br><span class=\"line\">  width: 5em;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.copyright a &#123;</span><br><span class=\"line\">  color: #808080;</span><br><span class=\"line\">  border-bottom:0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.copyright a:hover &#123;</span><br><span class=\"line\">  color: #a3d2a3;</span><br><span class=\"line\">  text-decoration: underline;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.copyright:hover .fa-clipboard &#123;</span><br><span class=\"line\">  color: #000;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.copyright .post-url:hover &#123;</span><br><span class=\"line\">  font-weight: normal;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.copyright .copy-path &#123;</span><br><span class=\"line\">  margin-left: 1em;</span><br><span class=\"line\">  width: 1em;</span><br><span class=\"line\">  +mobile()&#123;display:none;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.copyright .copy-path:hover &#123;</span><br><span class=\"line\">  color: #808080;</span><br><span class=\"line\">  cursor: pointer;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"在head-ejs-中-添加一下代码\"><a href=\"#在head-ejs-中-添加一下代码\" class=\"headerlink\" title=\"在head.ejs 中 添加一下代码\"></a>在head.ejs 中 添加一下代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;%- css(&apos;css/copyright&apos;) %&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"在post-ejs中的-lt-page-content-gt-这行代码下面加入以下代码\"><a href=\"#在post-ejs中的-lt-page-content-gt-这行代码下面加入以下代码\" class=\"headerlink\" title=\"在post.ejs中的&lt;%- page.content %&gt;这行代码下面加入以下代码\"></a>在post.ejs中的<em>&lt;%- page.content %&gt;</em>这行代码下面加入以下代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 版权声明 --&gt;</span><br><span class=\"line\">&lt;% if(is_post()) &#123; %&gt;</span><br><span class=\"line\">&lt;div class=&quot;copyright&quot;&gt;</span><br><span class=\"line\">    &lt;script src=&quot;//cdn.bootcss.com/clipboard.js/1.5.10/clipboard.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;!-- JS库 sweetalert 可修改路径 --&gt;</span><br><span class=\"line\">    &lt;script src=&quot;https://cdn.bootcss.com/jquery/2.0.0/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;script src=&quot;https://unpkg.com/sweetalert/dist/sweetalert.min.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">    &lt;p&gt;&lt;span&gt;本文标题:&lt;/span&gt;&lt;a href=&quot;&lt;%= url_for(page.path) %&gt;&quot;&gt; &lt;%= page.title %&gt;&lt;/a&gt;&lt;/p&gt;</span><br><span class=\"line\">    &lt;p&gt;&lt;span&gt;文章作者:&lt;/span&gt;&lt;a href=&quot;/&quot; title=&quot;访问 &lt;%= theme.author %&gt; 的个人博客&quot;&gt;&lt;%= config.author %&gt;&lt;/a&gt;&lt;/p&gt;</span><br><span class=\"line\">    &lt;p&gt;&lt;span&gt;发布时间:&lt;/span&gt;&lt;%= page.date.format(&quot;YYYY年MM月DD日 - HH:MM&quot;) %&gt;&lt;/p&gt;</span><br><span class=\"line\">    &lt;p&gt;&lt;span&gt;最后更新:&lt;/span&gt;&lt;%= page.updated.format(&quot;YYYY年MM月DD日 - HH:MM&quot;) %&gt;&lt;/p&gt;</span><br><span class=\"line\">    &lt;p&gt;&lt;span&gt;原始链接:&lt;/span&gt;&lt;a href=&quot;&lt;%= url_for(page.path) %&gt;&quot; title=&quot;&lt;%= page.title %&gt;&quot;&gt;&lt;%= page.permalink %&gt;&lt;/a&gt;</span><br><span class=\"line\">      &lt;span class=&quot;copy-path&quot;  title=&quot;点击复制文章链接&quot;&gt;&lt;i class=&quot;fa fa-clipboard&quot; data-clipboard-text=&quot;&lt;%= page.permalink %&gt;&quot;  aria-label=&quot;复制成功！&quot;&gt;&lt;/i&gt;&lt;/span&gt;</span><br><span class=\"line\">    &lt;/p&gt;</span><br><span class=\"line\">    &lt;p&gt;&lt;span&gt;许可协议:&lt;/span&gt;&lt;i class=&quot;fa fa-creative-commons&quot;&gt;&lt;/i&gt; &lt;a rel=&quot;license&quot; href=&quot;https://creativecommons.org/licenses/by-nc-nd/4.0/&quot; target=&quot;_blank&quot; title=&quot;Attribution-NonCommercial-NoDerivatives 4.0 International (CC BY-NC-ND 4.0)&quot;&gt;署名-非商业性使用-禁止演绎 4.0 国际&lt;/a&gt; 转载请保留原文链接及作者。&lt;/p&gt;  </span><br><span class=\"line\">  &lt;/div&gt;</span><br><span class=\"line\">  &lt;script&gt; </span><br><span class=\"line\">      var clipboard = new Clipboard(&apos;.fa-clipboard&apos;);</span><br><span class=\"line\">        $(&quot;.fa-clipboard&quot;).click(function()&#123;</span><br><span class=\"line\">        clipboard.on(&apos;success&apos;, function()&#123;</span><br><span class=\"line\">          swal(&#123;   </span><br><span class=\"line\">            title: &quot;&quot;,   </span><br><span class=\"line\">            text: &apos;复制成功&apos;,</span><br><span class=\"line\">            icon: &quot;success&quot;, </span><br><span class=\"line\">            showConfirmButton: true</span><br><span class=\"line\">            &#125;);</span><br><span class=\"line\">          &#125;);</span><br><span class=\"line\">      &#125;);  </span><br><span class=\"line\">  &lt;/script&gt;</span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"集成来必力评论系统\"><a href=\"#集成来必力评论系统\" class=\"headerlink\" title=\"集成来必力评论系统\"></a>集成来必力评论系统</h3><pre><code>在你的 _config.yml 里添加use_livere: true ，然后注册一个来比力后，再配置livere_uid: 你的来比力 UID，然后 hexo clean &amp;&amp; hexo deploy -g  附上[来必力官网](https://livere.com/)\n来必力UID获取方式如下: 登录-&gt;个人头像-&gt;管理页面-&gt;代码管理-&gt;一般网站，框起来的为UID\n</code></pre><p><img src=\"https://ws2.sinaimg.cn/large/006tNc79gy1fp5fs0fou2j310w0l5dju.jpg\" alt=\"\"></p>\n<h3 id=\"添加简书\"><a href=\"#添加简书\" class=\"headerlink\" title=\"添加简书\"></a>添加简书</h3><p>在footer.ejs中  添加如下代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;% if (config.jianshu_username) &#123; %&gt;</span><br><span class=\"line\">   &lt;li&gt;</span><br><span class=\"line\">       &lt;a target=&quot;_blank&quot;  href=&quot;https://www.jianshu.com/users/&lt;%= config.jianshu_username %&gt;&quot;&gt;</span><br><span class=\"line\">       &lt;span class=&quot;fa-stack fa-lg&quot;&gt;</span><br><span class=\"line\">       &lt;i class=&quot;fa fa-circle fa-stack-2x&quot;&gt;&lt;/i&gt;</span><br><span class=\"line\">       &lt;i class=&quot;fa fa-jianshu fa-stack-1x fa-inverse&quot;&gt;简&lt;/i&gt;</span><br><span class=\"line\">       &lt;/span&gt;</span><br><span class=\"line\">       &lt;/a&gt;</span><br><span class=\"line\">   &lt;/li&gt;</span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure></p>\n<p>在_config.xml中添加如下代码<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jianshu_username: ecf4f97c26fa # 你的简书ID</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"daovoice即时聊天系统\"><a href=\"#daovoice即时聊天系统\" class=\"headerlink\" title=\"daovoice即时聊天系统\"></a>daovoice即时聊天系统</h3><h4 id=\"注册daovoice账号\"><a href=\"#注册daovoice账号\" class=\"headerlink\" title=\"注册daovoice账号\"></a>注册daovoice账号</h4><p>点<a href=\"http://dashboard.daovoice.io/\" target=\"_blank\" rel=\"noopener\">这里</a>注册，注册后按以后步骤拿到你的appid<img src=\"https://ws2.sinaimg.cn/large/006tKfTcgy1fpuvr58pfbj30xi0nc7al.jpg\" alt=\"获取appid\"></p>\n<h4 id=\"添加配置\"><a href=\"#添加配置\" class=\"headerlink\" title=\"添加配置\"></a>添加配置</h4><p>在_config.yml中添加一下配置<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># daovoice 及时聊天</span><br><span class=\"line\">daovoice: true</span><br><span class=\"line\">daovoice_app_id: 7dfaf13b #这里填你的刚才获得的 app_id</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"在head-esj模板中添加以下代码\"><a href=\"#在head-esj模板中添加以下代码\" class=\"headerlink\" title=\"在head.esj模板中添加以下代码\"></a>在head.esj模板中添加以下代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- daovoice --&gt;</span><br><span class=\"line\">&lt;% if(config.daovoice) &#123; %&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">(function(i,s,o,g,r,a,m)&#123;i[&quot;DaoVoiceObject&quot;]=r;i[r]=i[r]||function()&#123;(i[r].q=i[r].q||[]).push(arguments)&#125;,i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=&quot;utf-8&quot;;m.parentNode.insertBefore(a,m)&#125;)(window,document,&quot;script&quot;,(&apos;https:&apos; == document.location.protocol ? &apos;https:&apos; : &apos;http:&apos;) + &quot;//widget.daovoice.io/widget/0f81ff2f.js&quot;,&quot;daovoice&quot;)</span><br><span class=\"line\">  daovoice(&apos;init&apos;, &#123;</span><br><span class=\"line\">      app_id: &quot;&lt;%= theme.daovoice_app_id%&gt;&quot;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  daovoice(&apos;update&apos;);</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>\n<h3 id=\"增加打赏功能\"><a href=\"#增加打赏功能\" class=\"headerlink\" title=\"增加打赏功能\"></a>增加打赏功能</h3><h4 id=\"截图自己微信以及支付宝的收款款码\"><a href=\"#截图自己微信以及支付宝的收款款码\" class=\"headerlink\" title=\"截图自己微信以及支付宝的收款款码\"></a>截图自己微信以及支付宝的收款款码</h4><h4 id=\"在-config-yml中添加如下配置\"><a href=\"#在-config-yml中添加如下配置\" class=\"headerlink\" title=\"在_config.yml中添加如下配置\"></a>在_config.yml中添加如下配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#打赏二维码</span><br><span class=\"line\">qrcodes: [</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      img: https://ws1.sinaimg.cn/large/006tNc79gy1fp6mjdk6jmj30hc0hcmy3.jpg,</span><br><span class=\"line\">      text: 支付宝打赏</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  &#123;</span><br><span class=\"line\">      img: https://ws1.sinaimg.cn/large/006tNc79gy1fp6mjdbp68j30hc0hcdh3.jpg,</span><br><span class=\"line\">      text: 微信打赏</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<h4 id=\"在post-ejs中添加一下代码\"><a href=\"#在post-ejs中添加一下代码\" class=\"headerlink\" title=\"在post.ejs中添加一下代码\"></a>在post.ejs中添加一下代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;!-- 打赏 --&gt;</span><br><span class=\"line\"> &lt;% if(is_post()) &#123; %&gt;</span><br><span class=\"line\">    &lt;% if(config.qrcodes) &#123; %&gt;</span><br><span class=\"line\">        &lt;div class=&quot;qrcode&quot;&gt;</span><br><span class=\"line\">            &lt;!-- &lt;h5 class=&quot;text-center&quot;&gt;打赏&lt;/h5&gt; --&gt;</span><br><span class=\"line\">            &lt;% config.qrcodes.forEach(function(code)&#123; %&gt;</span><br><span class=\"line\">            &lt;div class=&quot;qrcode-item&quot;&gt;</span><br><span class=\"line\">                &lt;img src=&quot;&lt;%= code.img %&gt;&quot; class=&quot;qrcode-item-img&quot; /&gt;</span><br><span class=\"line\">                &lt;div class=&quot;qrcode-item-text&quot;&gt;&lt;%= code.text %&gt;&lt;/div&gt;</span><br><span class=\"line\">            &lt;/div&gt;</span><br><span class=\"line\">            &lt;% &#125;); %&gt;</span><br><span class=\"line\">        &lt;/div&gt;</span><br><span class=\"line\">    &lt;% &#125; %&gt;</span><br><span class=\"line\">&lt;% &#125; %&gt;</span><br></pre></td></tr></table></figure>\n<h4 id=\"在source-css文件夹中新建qrcode-styl文件，该文件的内容如下\"><a href=\"#在source-css文件夹中新建qrcode-styl文件，该文件的内容如下\" class=\"headerlink\" title=\"在source/css文件夹中新建qrcode.styl文件，该文件的内容如下\"></a>在source/css文件夹中新建qrcode.styl文件，该文件的内容如下</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.qrcode &#123;</span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">    width: 100%;</span><br><span class=\"line\">    flex-direction: row;</span><br><span class=\"line\">    justify-content: space-around;</span><br><span class=\"line\">    align-items: space-between;</span><br><span class=\"line\">    flex-wrap: wrap;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.qrcode-tem &#123;</span><br><span class=\"line\">    text-align: center;</span><br><span class=\"line\">    justify-content: center;</span><br><span class=\"line\">    align-items: center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.qrcode-item-img &#123;</span><br><span class=\"line\">    // flex: 1;</span><br><span class=\"line\">    width: 250px;</span><br><span class=\"line\">    height: 250px;</span><br><span class=\"line\">    // height: 40%;</span><br><span class=\"line\">    min-width : 200px;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">.qrcode-item-text &#123;</span><br><span class=\"line\">    color: rgb(73, 177, 245);</span><br><span class=\"line\">    font-size: 14px;</span><br><span class=\"line\">    // align-content: center;</span><br><span class=\"line\">    text-align: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"在head-esj中加入一下代码\"><a href=\"#在head-esj中加入一下代码\" class=\"headerlink\" title=\"在head.esj中加入一下代码\"></a>在head.esj中加入一下代码</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!-- 打赏 --&gt;</span><br><span class=\"line\">&lt;%- css(&apos;css/qrcode&apos;) %&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"Next主题\"><a href=\"#Next主题\" class=\"headerlink\" title=\"Next主题\"></a>Next主题</h2><h3 id=\"文字背景色使用\"><a href=\"#文字背景色使用\" class=\"headerlink\" title=\"文字背景色使用\"></a>文字背景色使用</h3><p><span id=\"inline-blue\"> 站点配置文件 </span><br><span id=\"inline-purple\"> 主题配置文件 </span><br><span id=\"inline-yellow\"> 站点配置文件 </span><br><span id=\"inline-green\"> 主题配置文件 </span></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;span id=&quot;inline-blue&quot;&gt; 站点配置文件 &lt;/span&gt;</span><br><span class=\"line\">&lt;span id=&quot;inline-purple&quot;&gt; 主题配置文件 &lt;/span&gt;</span><br><span class=\"line\">&lt;span id=&quot;inline-yellow&quot;&gt; 站点配置文件 &lt;/span&gt;</span><br><span class=\"line\">&lt;span id=&quot;inline-green&quot;&gt; 主题配置文件 &lt;/span&gt;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>if you have any questions, leave a message.</p>\n</blockquote>\n"},{"title":"如何将一个10G的文件逆序写入一个新的文件","date":"2018-04-18T06:39:04.000Z","_content":"\n最近的同事的组内分享的内容就是标题的内容，这是一道\b大数据处理的算法的经典面试题，以前也经常碰到，用到的是mmap的知识，\b了解过，但是没有自己实际去写过。趁这个机会，就再一次回顾下,用swift\b来实现一把。\n\n\n## 参考文献\n \n *特权级， 用户态，内核态，用户空间，内核空间，线程上下文，中断上下文， MMU等概念请参考下文*\n\n[linux一些概念](https://blog.csdn.net/xiaoaid01/article/details/51659037)\n\n[mmap分析](https://www.cnblogs.com/huxiao-tee/p/4660352.html)\n\n## 分析\n\n由于指定数据的内容比较大，所以我们不能直接通过read,write的方式将大文件直接读入内容，因为这样\b内存会不够用，所以我们需要借助linux中的mmap的知识，进行[内存映射]()。\n\n## [mmap\b工作原理](https://www.zhihu.com/question/48161206/answer/110418693)\n>mmap的工作原理，当你发起这个调用的时候，它只是在你的虚拟空间中分配了一段空间，连真实的物理地址都不会分配的，当你访问这段空间，CPU陷入OS内核执行异常处理，然后异常处理会在这个时间分配物理内存，并用文件的内容填充这片内存，然后才返回你进程的上下文，这时你的程序才会感知到这片内存里有数据\n\n### mmap函数\n>void *mmap(void *start,size_t length,int prot,int flags,int fd,off_t offsize); \n\n具体参数含义\n\n    start ：  指向欲映射的内存起始地址，通常设为 NULL，代表让系统自动选定地址，映射成功后返回该地址。\n\n    length：  代表将文件中多大的部分映射到内存。\n\n    prot  ：  映射区域的保护方式。可以为以下几种方式的组合：\n                    PROT_EXEC 映射区域可被执行\n                    PROT_READ 映射区域可被读取\n                    PROT_WRITE 映射区域可被写入\n                    PROT_NONE 映射区域不能存取\n    flags ：  影响映射区域的各种特性。在调用mmap()时必须要指定\n\n    MAP_SHARED 或MAP_PRIVATE。\n                    MAP_FIXED 如果参数start所指的地址无法成功建立映射时，则放弃映射，不对地址做修正。通常不鼓励用此旗标。\n\n                    MAP_SHARED 对映射区域的写入数据会复制回文件内，而且允许其他映射该文件的进程共享。\n\n                    MAP_PRIVATE 对映射区域的写入操作会产生一个映射文件的复制，即私人的“写入时复制”（copy on write）对此区域作的任何修改都不会写回原来的文件内容。\n\n                    MAP_ANONYMOUS建立匿名映射。此时会忽略参数fd，不涉及文件，而且映射区域无法和其他进程共享。\n\n                    MAP_DENYWRITE只允许对映射区域的写入操作，其他对文件直接写入的操作将会被拒绝。\n\n                    MAP_LOCKED 将映射区域锁定住，这表示该区域不会被置换（swap）。\n\n    fd    ：  要映射到内存中的文件描述符。如果使用匿名内存映射时，即flags中设置了MAP_ANONYMOUS，fd设为-1。有些系统不支持匿名内存映射，则可以使用fopen打开/dev/zero文件，\n          然后对该文件进行映射，可以同样达到匿名内存映射的效果。\n\n    offset：文件映射的偏移量，通常设置为0，代表从文件最前方开始对应，offset必须是PAGE_SIZE的整数倍。\n\n\n返回值：\n      若映射成功则返回映射区的内存起始地址，否则返回MAP_FAILED(－1)，错误原因存于errno 中。\n\n\n错误代码：\n            EBADF  参数fd 不是有效的文件描述词\n            EACCES 存取权限有误。如果是MAP_PRIVATE 情况下文件必须可读，使用MAP_SHARED则要有PROT_WRITE以及该文件要能写入。\n            EINVAL 参数start、length 或offset有一个不合法。\n            EAGAIN 文件被锁住，或是有太多内存被锁住。\n            ENOMEM 内存不足。\n\n用户层的调用很简单，其具体功能就是直接将物理内存直接映射到用户虚拟内存，使用户空间可以直接对物理空间操作。但是对于内核层而言，其具体实现比较复杂。\n\n### munmap函数\n通过mmap映射出来的内存，通过munmap来解除映射关系\n>int munmap( void * addr, size_t len )\n\n在进程地址空间中解除一个映射关系，当映射关系解除后，对原来映射地址的访问将导致段错误发生。\n\n    void * addr ：调用mmap()时返回的地址\n    size_t len ：映射区的大小\n\n### msync函数\n>int msync ( void * addr , size_t len, int flags)\n\n一般说来，进程在映射空间的对共享内容的改变并不直接写回到磁盘文件中，往往在调用munmap()后才执行该操作。可以调用msync()实现磁盘上文件与共享内存区的内容一致。\n\n    void * addr ：调用mmap()时返回的地址\n    size_t len ：映射区的大小\n    int flags ：MS_ASYN: 异步写，MS_SYN : 同步写，MS_INVALIDAT : 无效的cache 数据。\n\n\n具体代码如下\n```swift\n func handleFile() {\n        \n        let filePath = Bundle.main.path(forResource: \"data\", ofType: \"txt\")\n        let filePathOut = Bundle.main.path(forResource: \"dataout\", ofType: \".txt\")\n        \n        let fhIn = FileHandle.init(forReadingAtPath: filePath!)\n        let fhOut = FileHandle.init(forWritingAtPath: filePathOut!)\n        \n        // 清空输出文件的内容\n        fhOut?.truncateFile(atOffset: 0)\n        \n        // 获取文件大小\n        let fileSize = fhIn?.seekToEndOfFile()\n        \n        // 由于要处理的文件较大，所以不能一次将文件全部映射进内存，采用一个合适的映射内存大小。\n        // 通过count来执行映射次数\n        let count = fileSize! / MEM_SIZE\n        // 剩余部分内存\n        let leftSize = fileSize! % MEM_SIZE\n        \n        \n        // 两部分分开处理，剩余部分写入\n        // 文件最后的，写入文件的最开始位置\n        let leftPart = mmap(UnsafeMutableRawPointer.init(bitPattern: 0), Int(leftSize), PROT_READ, MAP_SHARED, fhIn!.fileDescriptor, off_t(MEM_SIZE * count))\n        if leftPart == MAP_FAILED {\n            print(\"剩余部分映射失败)\")\n            return\n        }\n        let leftBuf = malloc(Int(leftSize))\n        memcpy(leftBuf, leftPart, Int(leftSize))\n        var data = Data.init(bytes: leftBuf!, count: Int(leftSize))\n        data.reverse()\n        fhOut?.write(data)\n        fhOut?.synchronizeFile()\n        \n        munmap(leftPart, Int(leftSize))\n        free(leftBuf)\n        \n        print(\"剩余部分写入成功\")\n        \n        \n        // 多线程处理大小的内存，加快处理速度\n        let queue = OperationQueue.init()\n        queue.maxConcurrentOperationCount = 5 // 设置最大并发数，线程太多，因为线程切换，速度反而也降低\n\n        // 使用信号量，防止资源写入的时候，多线程seek文件的问题\n        let semaphore = DispatchSemaphore.init(value: 1)\n        \n        // 从第0到count段数据，分别写入文件的相应位置\n        for i in 0..<count {\n            \n            queue.addOperation {\n                let part = mmap(UnsafeMutableRawPointer.init(bitPattern: 0), Int(MEM_SIZE), PROT_READ, MAP_SHARED, fhIn!.fileDescriptor, off_t(i * MEM_SIZE))\n                \n                if part == MAP_FAILED {\n                    print(\"映射失败 i = \\(i)\")\n                    return\n                }\n                let buf = malloc(Int(MEM_SIZE))\n                memcpy(buf, part, Int(MEM_SIZE))\n                var data = Data.init(bytes: buf!, count: Int(MEM_SIZE))\n                data.reverse()\n                free(buf)\n                \n                semaphore.wait() // 抢占信号资源\n                fhOut?.seek(toFileOffset: leftSize + MEM_SIZE * (count - i - 1))\n                fhOut?.write(data)\n                fhOut?.synchronizeFile()\n                semaphore.signal() // 释放信号资源\n\n                munmap(part, Int(MEM_SIZE))\n                print(\"操作成功 i= \\(i)\")\n            }\n        }\n        \n        //等队列中所有操作结束，才能执行后面的close句柄的操作\n        queue.waitUntilAllOperationsAreFinished()\n        fhIn?.closeFile()\n        fhOut?.closeFile()\n    }\n```\n","source":"_posts/如何将一个10G的文件逆序写入一个新的文件.md","raw":"---\ntitle: 如何将一个10G的文件逆序写入一个新的文件\ndate: 2018-04-18 14:39:04\ntags: [算法, mmap]\ncategories: [算法, 大数据]\n---\n\n最近的同事的组内分享的内容就是标题的内容，这是一道\b大数据处理的算法的经典面试题，以前也经常碰到，用到的是mmap的知识，\b了解过，但是没有自己实际去写过。趁这个机会，就再一次回顾下,用swift\b来实现一把。\n\n\n## 参考文献\n \n *特权级， 用户态，内核态，用户空间，内核空间，线程上下文，中断上下文， MMU等概念请参考下文*\n\n[linux一些概念](https://blog.csdn.net/xiaoaid01/article/details/51659037)\n\n[mmap分析](https://www.cnblogs.com/huxiao-tee/p/4660352.html)\n\n## 分析\n\n由于指定数据的内容比较大，所以我们不能直接通过read,write的方式将大文件直接读入内容，因为这样\b内存会不够用，所以我们需要借助linux中的mmap的知识，进行[内存映射]()。\n\n## [mmap\b工作原理](https://www.zhihu.com/question/48161206/answer/110418693)\n>mmap的工作原理，当你发起这个调用的时候，它只是在你的虚拟空间中分配了一段空间，连真实的物理地址都不会分配的，当你访问这段空间，CPU陷入OS内核执行异常处理，然后异常处理会在这个时间分配物理内存，并用文件的内容填充这片内存，然后才返回你进程的上下文，这时你的程序才会感知到这片内存里有数据\n\n### mmap函数\n>void *mmap(void *start,size_t length,int prot,int flags,int fd,off_t offsize); \n\n具体参数含义\n\n    start ：  指向欲映射的内存起始地址，通常设为 NULL，代表让系统自动选定地址，映射成功后返回该地址。\n\n    length：  代表将文件中多大的部分映射到内存。\n\n    prot  ：  映射区域的保护方式。可以为以下几种方式的组合：\n                    PROT_EXEC 映射区域可被执行\n                    PROT_READ 映射区域可被读取\n                    PROT_WRITE 映射区域可被写入\n                    PROT_NONE 映射区域不能存取\n    flags ：  影响映射区域的各种特性。在调用mmap()时必须要指定\n\n    MAP_SHARED 或MAP_PRIVATE。\n                    MAP_FIXED 如果参数start所指的地址无法成功建立映射时，则放弃映射，不对地址做修正。通常不鼓励用此旗标。\n\n                    MAP_SHARED 对映射区域的写入数据会复制回文件内，而且允许其他映射该文件的进程共享。\n\n                    MAP_PRIVATE 对映射区域的写入操作会产生一个映射文件的复制，即私人的“写入时复制”（copy on write）对此区域作的任何修改都不会写回原来的文件内容。\n\n                    MAP_ANONYMOUS建立匿名映射。此时会忽略参数fd，不涉及文件，而且映射区域无法和其他进程共享。\n\n                    MAP_DENYWRITE只允许对映射区域的写入操作，其他对文件直接写入的操作将会被拒绝。\n\n                    MAP_LOCKED 将映射区域锁定住，这表示该区域不会被置换（swap）。\n\n    fd    ：  要映射到内存中的文件描述符。如果使用匿名内存映射时，即flags中设置了MAP_ANONYMOUS，fd设为-1。有些系统不支持匿名内存映射，则可以使用fopen打开/dev/zero文件，\n          然后对该文件进行映射，可以同样达到匿名内存映射的效果。\n\n    offset：文件映射的偏移量，通常设置为0，代表从文件最前方开始对应，offset必须是PAGE_SIZE的整数倍。\n\n\n返回值：\n      若映射成功则返回映射区的内存起始地址，否则返回MAP_FAILED(－1)，错误原因存于errno 中。\n\n\n错误代码：\n            EBADF  参数fd 不是有效的文件描述词\n            EACCES 存取权限有误。如果是MAP_PRIVATE 情况下文件必须可读，使用MAP_SHARED则要有PROT_WRITE以及该文件要能写入。\n            EINVAL 参数start、length 或offset有一个不合法。\n            EAGAIN 文件被锁住，或是有太多内存被锁住。\n            ENOMEM 内存不足。\n\n用户层的调用很简单，其具体功能就是直接将物理内存直接映射到用户虚拟内存，使用户空间可以直接对物理空间操作。但是对于内核层而言，其具体实现比较复杂。\n\n### munmap函数\n通过mmap映射出来的内存，通过munmap来解除映射关系\n>int munmap( void * addr, size_t len )\n\n在进程地址空间中解除一个映射关系，当映射关系解除后，对原来映射地址的访问将导致段错误发生。\n\n    void * addr ：调用mmap()时返回的地址\n    size_t len ：映射区的大小\n\n### msync函数\n>int msync ( void * addr , size_t len, int flags)\n\n一般说来，进程在映射空间的对共享内容的改变并不直接写回到磁盘文件中，往往在调用munmap()后才执行该操作。可以调用msync()实现磁盘上文件与共享内存区的内容一致。\n\n    void * addr ：调用mmap()时返回的地址\n    size_t len ：映射区的大小\n    int flags ：MS_ASYN: 异步写，MS_SYN : 同步写，MS_INVALIDAT : 无效的cache 数据。\n\n\n具体代码如下\n```swift\n func handleFile() {\n        \n        let filePath = Bundle.main.path(forResource: \"data\", ofType: \"txt\")\n        let filePathOut = Bundle.main.path(forResource: \"dataout\", ofType: \".txt\")\n        \n        let fhIn = FileHandle.init(forReadingAtPath: filePath!)\n        let fhOut = FileHandle.init(forWritingAtPath: filePathOut!)\n        \n        // 清空输出文件的内容\n        fhOut?.truncateFile(atOffset: 0)\n        \n        // 获取文件大小\n        let fileSize = fhIn?.seekToEndOfFile()\n        \n        // 由于要处理的文件较大，所以不能一次将文件全部映射进内存，采用一个合适的映射内存大小。\n        // 通过count来执行映射次数\n        let count = fileSize! / MEM_SIZE\n        // 剩余部分内存\n        let leftSize = fileSize! % MEM_SIZE\n        \n        \n        // 两部分分开处理，剩余部分写入\n        // 文件最后的，写入文件的最开始位置\n        let leftPart = mmap(UnsafeMutableRawPointer.init(bitPattern: 0), Int(leftSize), PROT_READ, MAP_SHARED, fhIn!.fileDescriptor, off_t(MEM_SIZE * count))\n        if leftPart == MAP_FAILED {\n            print(\"剩余部分映射失败)\")\n            return\n        }\n        let leftBuf = malloc(Int(leftSize))\n        memcpy(leftBuf, leftPart, Int(leftSize))\n        var data = Data.init(bytes: leftBuf!, count: Int(leftSize))\n        data.reverse()\n        fhOut?.write(data)\n        fhOut?.synchronizeFile()\n        \n        munmap(leftPart, Int(leftSize))\n        free(leftBuf)\n        \n        print(\"剩余部分写入成功\")\n        \n        \n        // 多线程处理大小的内存，加快处理速度\n        let queue = OperationQueue.init()\n        queue.maxConcurrentOperationCount = 5 // 设置最大并发数，线程太多，因为线程切换，速度反而也降低\n\n        // 使用信号量，防止资源写入的时候，多线程seek文件的问题\n        let semaphore = DispatchSemaphore.init(value: 1)\n        \n        // 从第0到count段数据，分别写入文件的相应位置\n        for i in 0..<count {\n            \n            queue.addOperation {\n                let part = mmap(UnsafeMutableRawPointer.init(bitPattern: 0), Int(MEM_SIZE), PROT_READ, MAP_SHARED, fhIn!.fileDescriptor, off_t(i * MEM_SIZE))\n                \n                if part == MAP_FAILED {\n                    print(\"映射失败 i = \\(i)\")\n                    return\n                }\n                let buf = malloc(Int(MEM_SIZE))\n                memcpy(buf, part, Int(MEM_SIZE))\n                var data = Data.init(bytes: buf!, count: Int(MEM_SIZE))\n                data.reverse()\n                free(buf)\n                \n                semaphore.wait() // 抢占信号资源\n                fhOut?.seek(toFileOffset: leftSize + MEM_SIZE * (count - i - 1))\n                fhOut?.write(data)\n                fhOut?.synchronizeFile()\n                semaphore.signal() // 释放信号资源\n\n                munmap(part, Int(MEM_SIZE))\n                print(\"操作成功 i= \\(i)\")\n            }\n        }\n        \n        //等队列中所有操作结束，才能执行后面的close句柄的操作\n        queue.waitUntilAllOperationsAreFinished()\n        fhIn?.closeFile()\n        fhOut?.closeFile()\n    }\n```\n","slug":"如何将一个10G的文件逆序写入一个新的文件","published":1,"updated":"2018-10-13T09:06:30.281Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjn77vbrj0006n8qsobvuqcay","content":"<p>最近的同事的组内分享的内容就是标题的内容，这是一道\b大数据处理的算法的经典面试题，以前也经常碰到，用到的是mmap的知识，\b了解过，但是没有自己实际去写过。趁这个机会，就再一次回顾下,用swift\b来实现一把。</p>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><p> <em>特权级， 用户态，内核态，用户空间，内核空间，线程上下文，中断上下文， MMU等概念请参考下文</em></p>\n<p><a href=\"https://blog.csdn.net/xiaoaid01/article/details/51659037\" target=\"_blank\" rel=\"noopener\">linux一些概念</a></p>\n<p><a href=\"https://www.cnblogs.com/huxiao-tee/p/4660352.html\" target=\"_blank\" rel=\"noopener\">mmap分析</a></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>由于指定数据的内容比较大，所以我们不能直接通过read,write的方式将大文件直接读入内容，因为这样\b内存会不够用，所以我们需要借助linux中的mmap的知识，进行<a href=\"\">内存映射</a>。</p>\n<h2 id=\"mmap工作原理\"><a href=\"#mmap工作原理\" class=\"headerlink\" title=\"mmap\b工作原理\"></a><a href=\"https://www.zhihu.com/question/48161206/answer/110418693\" target=\"_blank\" rel=\"noopener\">mmap\b工作原理</a></h2><blockquote>\n<p>mmap的工作原理，当你发起这个调用的时候，它只是在你的虚拟空间中分配了一段空间，连真实的物理地址都不会分配的，当你访问这段空间，CPU陷入OS内核执行异常处理，然后异常处理会在这个时间分配物理内存，并用文件的内容填充这片内存，然后才返回你进程的上下文，这时你的程序才会感知到这片内存里有数据</p>\n</blockquote>\n<h3 id=\"mmap函数\"><a href=\"#mmap函数\" class=\"headerlink\" title=\"mmap函数\"></a>mmap函数</h3><blockquote>\n<p>void <em>mmap(void </em>start,size_t length,int prot,int flags,int fd,off_t offsize); </p>\n</blockquote>\n<p>具体参数含义</p>\n<pre><code>start ：  指向欲映射的内存起始地址，通常设为 NULL，代表让系统自动选定地址，映射成功后返回该地址。\n\nlength：  代表将文件中多大的部分映射到内存。\n\nprot  ：  映射区域的保护方式。可以为以下几种方式的组合：\n                PROT_EXEC 映射区域可被执行\n                PROT_READ 映射区域可被读取\n                PROT_WRITE 映射区域可被写入\n                PROT_NONE 映射区域不能存取\nflags ：  影响映射区域的各种特性。在调用mmap()时必须要指定\n\nMAP_SHARED 或MAP_PRIVATE。\n                MAP_FIXED 如果参数start所指的地址无法成功建立映射时，则放弃映射，不对地址做修正。通常不鼓励用此旗标。\n\n                MAP_SHARED 对映射区域的写入数据会复制回文件内，而且允许其他映射该文件的进程共享。\n\n                MAP_PRIVATE 对映射区域的写入操作会产生一个映射文件的复制，即私人的“写入时复制”（copy on write）对此区域作的任何修改都不会写回原来的文件内容。\n\n                MAP_ANONYMOUS建立匿名映射。此时会忽略参数fd，不涉及文件，而且映射区域无法和其他进程共享。\n\n                MAP_DENYWRITE只允许对映射区域的写入操作，其他对文件直接写入的操作将会被拒绝。\n\n                MAP_LOCKED 将映射区域锁定住，这表示该区域不会被置换（swap）。\n\nfd    ：  要映射到内存中的文件描述符。如果使用匿名内存映射时，即flags中设置了MAP_ANONYMOUS，fd设为-1。有些系统不支持匿名内存映射，则可以使用fopen打开/dev/zero文件，\n      然后对该文件进行映射，可以同样达到匿名内存映射的效果。\n\noffset：文件映射的偏移量，通常设置为0，代表从文件最前方开始对应，offset必须是PAGE_SIZE的整数倍。\n</code></pre><p>返回值：<br>      若映射成功则返回映射区的内存起始地址，否则返回MAP_FAILED(－1)，错误原因存于errno 中。</p>\n<p>错误代码：<br>            EBADF  参数fd 不是有效的文件描述词<br>            EACCES 存取权限有误。如果是MAP_PRIVATE 情况下文件必须可读，使用MAP_SHARED则要有PROT_WRITE以及该文件要能写入。<br>            EINVAL 参数start、length 或offset有一个不合法。<br>            EAGAIN 文件被锁住，或是有太多内存被锁住。<br>            ENOMEM 内存不足。</p>\n<p>用户层的调用很简单，其具体功能就是直接将物理内存直接映射到用户虚拟内存，使用户空间可以直接对物理空间操作。但是对于内核层而言，其具体实现比较复杂。</p>\n<h3 id=\"munmap函数\"><a href=\"#munmap函数\" class=\"headerlink\" title=\"munmap函数\"></a>munmap函数</h3><p>通过mmap映射出来的内存，通过munmap来解除映射关系</p>\n<blockquote>\n<p>int munmap( void * addr, size_t len )</p>\n</blockquote>\n<p>在进程地址空间中解除一个映射关系，当映射关系解除后，对原来映射地址的访问将导致段错误发生。</p>\n<pre><code>void * addr ：调用mmap()时返回的地址\nsize_t len ：映射区的大小\n</code></pre><h3 id=\"msync函数\"><a href=\"#msync函数\" class=\"headerlink\" title=\"msync函数\"></a>msync函数</h3><blockquote>\n<p>int msync ( void * addr , size_t len, int flags)</p>\n</blockquote>\n<p>一般说来，进程在映射空间的对共享内容的改变并不直接写回到磁盘文件中，往往在调用munmap()后才执行该操作。可以调用msync()实现磁盘上文件与共享内存区的内容一致。</p>\n<pre><code>void * addr ：调用mmap()时返回的地址\nsize_t len ：映射区的大小\nint flags ：MS_ASYN: 异步写，MS_SYN : 同步写，MS_INVALIDAT : 无效的cache 数据。\n</code></pre><p>具体代码如下<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">handleFile</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">       </span><br><span class=\"line\">       <span class=\"keyword\">let</span> filePath = <span class=\"type\">Bundle</span>.main.path(forResource: <span class=\"string\">\"data\"</span>, ofType: <span class=\"string\">\"txt\"</span>)</span><br><span class=\"line\">       <span class=\"keyword\">let</span> filePathOut = <span class=\"type\">Bundle</span>.main.path(forResource: <span class=\"string\">\"dataout\"</span>, ofType: <span class=\"string\">\".txt\"</span>)</span><br><span class=\"line\">       </span><br><span class=\"line\">       <span class=\"keyword\">let</span> fhIn = <span class=\"type\">FileHandle</span>.<span class=\"keyword\">init</span>(forReadingAtPath: filePath!)</span><br><span class=\"line\">       <span class=\"keyword\">let</span> fhOut = <span class=\"type\">FileHandle</span>.<span class=\"keyword\">init</span>(forWritingAtPath: filePathOut!)</span><br><span class=\"line\">       </span><br><span class=\"line\">       <span class=\"comment\">// 清空输出文件的内容</span></span><br><span class=\"line\">       fhOut?.truncateFile(atOffset: <span class=\"number\">0</span>)</span><br><span class=\"line\">       </span><br><span class=\"line\">       <span class=\"comment\">// 获取文件大小</span></span><br><span class=\"line\">       <span class=\"keyword\">let</span> fileSize = fhIn?.seekToEndOfFile()</span><br><span class=\"line\">       </span><br><span class=\"line\">       <span class=\"comment\">// 由于要处理的文件较大，所以不能一次将文件全部映射进内存，采用一个合适的映射内存大小。</span></span><br><span class=\"line\">       <span class=\"comment\">// 通过count来执行映射次数</span></span><br><span class=\"line\">       <span class=\"keyword\">let</span> <span class=\"built_in\">count</span> = fileSize! / <span class=\"type\">MEM_SIZE</span></span><br><span class=\"line\">       <span class=\"comment\">// 剩余部分内存</span></span><br><span class=\"line\">       <span class=\"keyword\">let</span> leftSize = fileSize! % <span class=\"type\">MEM_SIZE</span></span><br><span class=\"line\">       </span><br><span class=\"line\">       </span><br><span class=\"line\">       <span class=\"comment\">// 两部分分开处理，剩余部分写入</span></span><br><span class=\"line\">       <span class=\"comment\">// 文件最后的，写入文件的最开始位置</span></span><br><span class=\"line\">       <span class=\"keyword\">let</span> leftPart = mmap(<span class=\"type\">UnsafeMutableRawPointer</span>.<span class=\"keyword\">init</span>(bitPattern: <span class=\"number\">0</span>), <span class=\"type\">Int</span>(leftSize), <span class=\"type\">PROT_READ</span>, <span class=\"type\">MAP_SHARED</span>, fhIn!.fileDescriptor, off_t(<span class=\"type\">MEM_SIZE</span> * <span class=\"built_in\">count</span>))</span><br><span class=\"line\">       <span class=\"keyword\">if</span> leftPart == <span class=\"type\">MAP_FAILED</span> &#123;</span><br><span class=\"line\">           <span class=\"built_in\">print</span>(<span class=\"string\">\"剩余部分映射失败)\"</span>)</span><br><span class=\"line\">           <span class=\"keyword\">return</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">let</span> leftBuf = malloc(<span class=\"type\">Int</span>(leftSize))</span><br><span class=\"line\">       memcpy(leftBuf, leftPart, <span class=\"type\">Int</span>(leftSize))</span><br><span class=\"line\">       <span class=\"keyword\">var</span> data = <span class=\"type\">Data</span>.<span class=\"keyword\">init</span>(bytes: leftBuf!, <span class=\"built_in\">count</span>: <span class=\"type\">Int</span>(leftSize))</span><br><span class=\"line\">       data.<span class=\"built_in\">reverse</span>()</span><br><span class=\"line\">       fhOut?.write(data)</span><br><span class=\"line\">       fhOut?.synchronizeFile()</span><br><span class=\"line\">       </span><br><span class=\"line\">       munmap(leftPart, <span class=\"type\">Int</span>(leftSize))</span><br><span class=\"line\">       free(leftBuf)</span><br><span class=\"line\">       </span><br><span class=\"line\">       <span class=\"built_in\">print</span>(<span class=\"string\">\"剩余部分写入成功\"</span>)</span><br><span class=\"line\">       </span><br><span class=\"line\">       </span><br><span class=\"line\">       <span class=\"comment\">// 多线程处理大小的内存，加快处理速度</span></span><br><span class=\"line\">       <span class=\"keyword\">let</span> queue = <span class=\"type\">OperationQueue</span>.<span class=\"keyword\">init</span>()</span><br><span class=\"line\">       queue.maxConcurrentOperationCount = <span class=\"number\">5</span> <span class=\"comment\">// 设置最大并发数，线程太多，因为线程切换，速度反而也降低</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// 使用信号量，防止资源写入的时候，多线程seek文件的问题</span></span><br><span class=\"line\">       <span class=\"keyword\">let</span> semaphore = <span class=\"type\">DispatchSemaphore</span>.<span class=\"keyword\">init</span>(value: <span class=\"number\">1</span>)</span><br><span class=\"line\">       </span><br><span class=\"line\">       <span class=\"comment\">// 从第0到count段数据，分别写入文件的相应位置</span></span><br><span class=\"line\">       <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">0</span>..&lt;<span class=\"built_in\">count</span> &#123;</span><br><span class=\"line\">           </span><br><span class=\"line\">           queue.addOperation &#123;</span><br><span class=\"line\">               <span class=\"keyword\">let</span> part = mmap(<span class=\"type\">UnsafeMutableRawPointer</span>.<span class=\"keyword\">init</span>(bitPattern: <span class=\"number\">0</span>), <span class=\"type\">Int</span>(<span class=\"type\">MEM_SIZE</span>), <span class=\"type\">PROT_READ</span>, <span class=\"type\">MAP_SHARED</span>, fhIn!.fileDescriptor, off_t(i * <span class=\"type\">MEM_SIZE</span>))</span><br><span class=\"line\">               </span><br><span class=\"line\">               <span class=\"keyword\">if</span> part == <span class=\"type\">MAP_FAILED</span> &#123;</span><br><span class=\"line\">                   <span class=\"built_in\">print</span>(<span class=\"string\">\"映射失败 i = \\(i)\"</span>)</span><br><span class=\"line\">                   <span class=\"keyword\">return</span></span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               <span class=\"keyword\">let</span> buf = malloc(<span class=\"type\">Int</span>(<span class=\"type\">MEM_SIZE</span>))</span><br><span class=\"line\">               memcpy(buf, part, <span class=\"type\">Int</span>(<span class=\"type\">MEM_SIZE</span>))</span><br><span class=\"line\">               <span class=\"keyword\">var</span> data = <span class=\"type\">Data</span>.<span class=\"keyword\">init</span>(bytes: buf!, <span class=\"built_in\">count</span>: <span class=\"type\">Int</span>(<span class=\"type\">MEM_SIZE</span>))</span><br><span class=\"line\">               data.<span class=\"built_in\">reverse</span>()</span><br><span class=\"line\">               free(buf)</span><br><span class=\"line\">               </span><br><span class=\"line\">               semaphore.wait() <span class=\"comment\">// 抢占信号资源</span></span><br><span class=\"line\">               fhOut?.seek(toFileOffset: leftSize + <span class=\"type\">MEM_SIZE</span> * (<span class=\"built_in\">count</span> - i - <span class=\"number\">1</span>))</span><br><span class=\"line\">               fhOut?.write(data)</span><br><span class=\"line\">               fhOut?.synchronizeFile()</span><br><span class=\"line\">               semaphore.signal() <span class=\"comment\">// 释放信号资源</span></span><br><span class=\"line\"></span><br><span class=\"line\">               munmap(part, <span class=\"type\">Int</span>(<span class=\"type\">MEM_SIZE</span>))</span><br><span class=\"line\">               <span class=\"built_in\">print</span>(<span class=\"string\">\"操作成功 i= \\(i)\"</span>)</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       </span><br><span class=\"line\">       <span class=\"comment\">//等队列中所有操作结束，才能执行后面的close句柄的操作</span></span><br><span class=\"line\">       queue.waitUntilAllOperationsAreFinished()</span><br><span class=\"line\">       fhIn?.closeFile()</span><br><span class=\"line\">       fhOut?.closeFile()</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近的同事的组内分享的内容就是标题的内容，这是一道\b大数据处理的算法的经典面试题，以前也经常碰到，用到的是mmap的知识，\b了解过，但是没有自己实际去写过。趁这个机会，就再一次回顾下,用swift\b来实现一把。</p>\n<h2 id=\"参考文献\"><a href=\"#参考文献\" class=\"headerlink\" title=\"参考文献\"></a>参考文献</h2><p> <em>特权级， 用户态，内核态，用户空间，内核空间，线程上下文，中断上下文， MMU等概念请参考下文</em></p>\n<p><a href=\"https://blog.csdn.net/xiaoaid01/article/details/51659037\" target=\"_blank\" rel=\"noopener\">linux一些概念</a></p>\n<p><a href=\"https://www.cnblogs.com/huxiao-tee/p/4660352.html\" target=\"_blank\" rel=\"noopener\">mmap分析</a></p>\n<h2 id=\"分析\"><a href=\"#分析\" class=\"headerlink\" title=\"分析\"></a>分析</h2><p>由于指定数据的内容比较大，所以我们不能直接通过read,write的方式将大文件直接读入内容，因为这样\b内存会不够用，所以我们需要借助linux中的mmap的知识，进行<a href=\"\">内存映射</a>。</p>\n<h2 id=\"mmap工作原理\"><a href=\"#mmap工作原理\" class=\"headerlink\" title=\"mmap\b工作原理\"></a><a href=\"https://www.zhihu.com/question/48161206/answer/110418693\" target=\"_blank\" rel=\"noopener\">mmap\b工作原理</a></h2><blockquote>\n<p>mmap的工作原理，当你发起这个调用的时候，它只是在你的虚拟空间中分配了一段空间，连真实的物理地址都不会分配的，当你访问这段空间，CPU陷入OS内核执行异常处理，然后异常处理会在这个时间分配物理内存，并用文件的内容填充这片内存，然后才返回你进程的上下文，这时你的程序才会感知到这片内存里有数据</p>\n</blockquote>\n<h3 id=\"mmap函数\"><a href=\"#mmap函数\" class=\"headerlink\" title=\"mmap函数\"></a>mmap函数</h3><blockquote>\n<p>void <em>mmap(void </em>start,size_t length,int prot,int flags,int fd,off_t offsize); </p>\n</blockquote>\n<p>具体参数含义</p>\n<pre><code>start ：  指向欲映射的内存起始地址，通常设为 NULL，代表让系统自动选定地址，映射成功后返回该地址。\n\nlength：  代表将文件中多大的部分映射到内存。\n\nprot  ：  映射区域的保护方式。可以为以下几种方式的组合：\n                PROT_EXEC 映射区域可被执行\n                PROT_READ 映射区域可被读取\n                PROT_WRITE 映射区域可被写入\n                PROT_NONE 映射区域不能存取\nflags ：  影响映射区域的各种特性。在调用mmap()时必须要指定\n\nMAP_SHARED 或MAP_PRIVATE。\n                MAP_FIXED 如果参数start所指的地址无法成功建立映射时，则放弃映射，不对地址做修正。通常不鼓励用此旗标。\n\n                MAP_SHARED 对映射区域的写入数据会复制回文件内，而且允许其他映射该文件的进程共享。\n\n                MAP_PRIVATE 对映射区域的写入操作会产生一个映射文件的复制，即私人的“写入时复制”（copy on write）对此区域作的任何修改都不会写回原来的文件内容。\n\n                MAP_ANONYMOUS建立匿名映射。此时会忽略参数fd，不涉及文件，而且映射区域无法和其他进程共享。\n\n                MAP_DENYWRITE只允许对映射区域的写入操作，其他对文件直接写入的操作将会被拒绝。\n\n                MAP_LOCKED 将映射区域锁定住，这表示该区域不会被置换（swap）。\n\nfd    ：  要映射到内存中的文件描述符。如果使用匿名内存映射时，即flags中设置了MAP_ANONYMOUS，fd设为-1。有些系统不支持匿名内存映射，则可以使用fopen打开/dev/zero文件，\n      然后对该文件进行映射，可以同样达到匿名内存映射的效果。\n\noffset：文件映射的偏移量，通常设置为0，代表从文件最前方开始对应，offset必须是PAGE_SIZE的整数倍。\n</code></pre><p>返回值：<br>      若映射成功则返回映射区的内存起始地址，否则返回MAP_FAILED(－1)，错误原因存于errno 中。</p>\n<p>错误代码：<br>            EBADF  参数fd 不是有效的文件描述词<br>            EACCES 存取权限有误。如果是MAP_PRIVATE 情况下文件必须可读，使用MAP_SHARED则要有PROT_WRITE以及该文件要能写入。<br>            EINVAL 参数start、length 或offset有一个不合法。<br>            EAGAIN 文件被锁住，或是有太多内存被锁住。<br>            ENOMEM 内存不足。</p>\n<p>用户层的调用很简单，其具体功能就是直接将物理内存直接映射到用户虚拟内存，使用户空间可以直接对物理空间操作。但是对于内核层而言，其具体实现比较复杂。</p>\n<h3 id=\"munmap函数\"><a href=\"#munmap函数\" class=\"headerlink\" title=\"munmap函数\"></a>munmap函数</h3><p>通过mmap映射出来的内存，通过munmap来解除映射关系</p>\n<blockquote>\n<p>int munmap( void * addr, size_t len )</p>\n</blockquote>\n<p>在进程地址空间中解除一个映射关系，当映射关系解除后，对原来映射地址的访问将导致段错误发生。</p>\n<pre><code>void * addr ：调用mmap()时返回的地址\nsize_t len ：映射区的大小\n</code></pre><h3 id=\"msync函数\"><a href=\"#msync函数\" class=\"headerlink\" title=\"msync函数\"></a>msync函数</h3><blockquote>\n<p>int msync ( void * addr , size_t len, int flags)</p>\n</blockquote>\n<p>一般说来，进程在映射空间的对共享内容的改变并不直接写回到磁盘文件中，往往在调用munmap()后才执行该操作。可以调用msync()实现磁盘上文件与共享内存区的内容一致。</p>\n<pre><code>void * addr ：调用mmap()时返回的地址\nsize_t len ：映射区的大小\nint flags ：MS_ASYN: 异步写，MS_SYN : 同步写，MS_INVALIDAT : 无效的cache 数据。\n</code></pre><p>具体代码如下<br><figure class=\"highlight swift\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">func</span> <span class=\"title\">handleFile</span><span class=\"params\">()</span></span> &#123;</span><br><span class=\"line\">       </span><br><span class=\"line\">       <span class=\"keyword\">let</span> filePath = <span class=\"type\">Bundle</span>.main.path(forResource: <span class=\"string\">\"data\"</span>, ofType: <span class=\"string\">\"txt\"</span>)</span><br><span class=\"line\">       <span class=\"keyword\">let</span> filePathOut = <span class=\"type\">Bundle</span>.main.path(forResource: <span class=\"string\">\"dataout\"</span>, ofType: <span class=\"string\">\".txt\"</span>)</span><br><span class=\"line\">       </span><br><span class=\"line\">       <span class=\"keyword\">let</span> fhIn = <span class=\"type\">FileHandle</span>.<span class=\"keyword\">init</span>(forReadingAtPath: filePath!)</span><br><span class=\"line\">       <span class=\"keyword\">let</span> fhOut = <span class=\"type\">FileHandle</span>.<span class=\"keyword\">init</span>(forWritingAtPath: filePathOut!)</span><br><span class=\"line\">       </span><br><span class=\"line\">       <span class=\"comment\">// 清空输出文件的内容</span></span><br><span class=\"line\">       fhOut?.truncateFile(atOffset: <span class=\"number\">0</span>)</span><br><span class=\"line\">       </span><br><span class=\"line\">       <span class=\"comment\">// 获取文件大小</span></span><br><span class=\"line\">       <span class=\"keyword\">let</span> fileSize = fhIn?.seekToEndOfFile()</span><br><span class=\"line\">       </span><br><span class=\"line\">       <span class=\"comment\">// 由于要处理的文件较大，所以不能一次将文件全部映射进内存，采用一个合适的映射内存大小。</span></span><br><span class=\"line\">       <span class=\"comment\">// 通过count来执行映射次数</span></span><br><span class=\"line\">       <span class=\"keyword\">let</span> <span class=\"built_in\">count</span> = fileSize! / <span class=\"type\">MEM_SIZE</span></span><br><span class=\"line\">       <span class=\"comment\">// 剩余部分内存</span></span><br><span class=\"line\">       <span class=\"keyword\">let</span> leftSize = fileSize! % <span class=\"type\">MEM_SIZE</span></span><br><span class=\"line\">       </span><br><span class=\"line\">       </span><br><span class=\"line\">       <span class=\"comment\">// 两部分分开处理，剩余部分写入</span></span><br><span class=\"line\">       <span class=\"comment\">// 文件最后的，写入文件的最开始位置</span></span><br><span class=\"line\">       <span class=\"keyword\">let</span> leftPart = mmap(<span class=\"type\">UnsafeMutableRawPointer</span>.<span class=\"keyword\">init</span>(bitPattern: <span class=\"number\">0</span>), <span class=\"type\">Int</span>(leftSize), <span class=\"type\">PROT_READ</span>, <span class=\"type\">MAP_SHARED</span>, fhIn!.fileDescriptor, off_t(<span class=\"type\">MEM_SIZE</span> * <span class=\"built_in\">count</span>))</span><br><span class=\"line\">       <span class=\"keyword\">if</span> leftPart == <span class=\"type\">MAP_FAILED</span> &#123;</span><br><span class=\"line\">           <span class=\"built_in\">print</span>(<span class=\"string\">\"剩余部分映射失败)\"</span>)</span><br><span class=\"line\">           <span class=\"keyword\">return</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"keyword\">let</span> leftBuf = malloc(<span class=\"type\">Int</span>(leftSize))</span><br><span class=\"line\">       memcpy(leftBuf, leftPart, <span class=\"type\">Int</span>(leftSize))</span><br><span class=\"line\">       <span class=\"keyword\">var</span> data = <span class=\"type\">Data</span>.<span class=\"keyword\">init</span>(bytes: leftBuf!, <span class=\"built_in\">count</span>: <span class=\"type\">Int</span>(leftSize))</span><br><span class=\"line\">       data.<span class=\"built_in\">reverse</span>()</span><br><span class=\"line\">       fhOut?.write(data)</span><br><span class=\"line\">       fhOut?.synchronizeFile()</span><br><span class=\"line\">       </span><br><span class=\"line\">       munmap(leftPart, <span class=\"type\">Int</span>(leftSize))</span><br><span class=\"line\">       free(leftBuf)</span><br><span class=\"line\">       </span><br><span class=\"line\">       <span class=\"built_in\">print</span>(<span class=\"string\">\"剩余部分写入成功\"</span>)</span><br><span class=\"line\">       </span><br><span class=\"line\">       </span><br><span class=\"line\">       <span class=\"comment\">// 多线程处理大小的内存，加快处理速度</span></span><br><span class=\"line\">       <span class=\"keyword\">let</span> queue = <span class=\"type\">OperationQueue</span>.<span class=\"keyword\">init</span>()</span><br><span class=\"line\">       queue.maxConcurrentOperationCount = <span class=\"number\">5</span> <span class=\"comment\">// 设置最大并发数，线程太多，因为线程切换，速度反而也降低</span></span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"comment\">// 使用信号量，防止资源写入的时候，多线程seek文件的问题</span></span><br><span class=\"line\">       <span class=\"keyword\">let</span> semaphore = <span class=\"type\">DispatchSemaphore</span>.<span class=\"keyword\">init</span>(value: <span class=\"number\">1</span>)</span><br><span class=\"line\">       </span><br><span class=\"line\">       <span class=\"comment\">// 从第0到count段数据，分别写入文件的相应位置</span></span><br><span class=\"line\">       <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"number\">0</span>..&lt;<span class=\"built_in\">count</span> &#123;</span><br><span class=\"line\">           </span><br><span class=\"line\">           queue.addOperation &#123;</span><br><span class=\"line\">               <span class=\"keyword\">let</span> part = mmap(<span class=\"type\">UnsafeMutableRawPointer</span>.<span class=\"keyword\">init</span>(bitPattern: <span class=\"number\">0</span>), <span class=\"type\">Int</span>(<span class=\"type\">MEM_SIZE</span>), <span class=\"type\">PROT_READ</span>, <span class=\"type\">MAP_SHARED</span>, fhIn!.fileDescriptor, off_t(i * <span class=\"type\">MEM_SIZE</span>))</span><br><span class=\"line\">               </span><br><span class=\"line\">               <span class=\"keyword\">if</span> part == <span class=\"type\">MAP_FAILED</span> &#123;</span><br><span class=\"line\">                   <span class=\"built_in\">print</span>(<span class=\"string\">\"映射失败 i = \\(i)\"</span>)</span><br><span class=\"line\">                   <span class=\"keyword\">return</span></span><br><span class=\"line\">               &#125;</span><br><span class=\"line\">               <span class=\"keyword\">let</span> buf = malloc(<span class=\"type\">Int</span>(<span class=\"type\">MEM_SIZE</span>))</span><br><span class=\"line\">               memcpy(buf, part, <span class=\"type\">Int</span>(<span class=\"type\">MEM_SIZE</span>))</span><br><span class=\"line\">               <span class=\"keyword\">var</span> data = <span class=\"type\">Data</span>.<span class=\"keyword\">init</span>(bytes: buf!, <span class=\"built_in\">count</span>: <span class=\"type\">Int</span>(<span class=\"type\">MEM_SIZE</span>))</span><br><span class=\"line\">               data.<span class=\"built_in\">reverse</span>()</span><br><span class=\"line\">               free(buf)</span><br><span class=\"line\">               </span><br><span class=\"line\">               semaphore.wait() <span class=\"comment\">// 抢占信号资源</span></span><br><span class=\"line\">               fhOut?.seek(toFileOffset: leftSize + <span class=\"type\">MEM_SIZE</span> * (<span class=\"built_in\">count</span> - i - <span class=\"number\">1</span>))</span><br><span class=\"line\">               fhOut?.write(data)</span><br><span class=\"line\">               fhOut?.synchronizeFile()</span><br><span class=\"line\">               semaphore.signal() <span class=\"comment\">// 释放信号资源</span></span><br><span class=\"line\"></span><br><span class=\"line\">               munmap(part, <span class=\"type\">Int</span>(<span class=\"type\">MEM_SIZE</span>))</span><br><span class=\"line\">               <span class=\"built_in\">print</span>(<span class=\"string\">\"操作成功 i= \\(i)\"</span>)</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       </span><br><span class=\"line\">       <span class=\"comment\">//等队列中所有操作结束，才能执行后面的close句柄的操作</span></span><br><span class=\"line\">       queue.waitUntilAllOperationsAreFinished()</span><br><span class=\"line\">       fhIn?.closeFile()</span><br><span class=\"line\">       fhOut?.closeFile()</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjn77vbr90000n8qsd06icpdn","category_id":"cjn77vbrf0002n8qskcss6bi7","_id":"cjn77vbrq000bn8qsyj7a693x"},{"post_id":"cjn77vbre0001n8qsvskzkq16","category_id":"cjn77vbrf0002n8qskcss6bi7","_id":"cjn77vbrs000en8qsfp9yx5v7"},{"post_id":"cjn77vbri0005n8qszjm0d63g","category_id":"cjn77vbrq000an8qsj98pikd4","_id":"cjn77vbrt000hn8qstmmofoyc"},{"post_id":"cjn77vbrj0006n8qsobvuqcay","category_id":"cjn77vbrs000fn8qs8s9cur19","_id":"cjn77vbru000nn8qsh2pd9c6l"},{"post_id":"cjn77vbrj0006n8qsobvuqcay","category_id":"cjn77vbru000kn8qsnukyyebg","_id":"cjn77vbrv000pn8qs9o3u5087"}],"PostTag":[{"post_id":"cjn77vbr90000n8qsd06icpdn","tag_id":"cjn77vbrh0003n8qs2ttqhylf","_id":"cjn77vbrm0009n8qspe7eo7oy"},{"post_id":"cjn77vbre0001n8qsvskzkq16","tag_id":"cjn77vbrh0003n8qs2ttqhylf","_id":"cjn77vbrr000dn8qskizcd650"},{"post_id":"cjn77vbri0005n8qszjm0d63g","tag_id":"cjn77vbrq000cn8qsa60744lr","_id":"cjn77vbru000jn8qs3765cjhe"},{"post_id":"cjn77vbri0005n8qszjm0d63g","tag_id":"cjn77vbrs000gn8qslx63dut8","_id":"cjn77vbru000ln8qs4kpzau0g"},{"post_id":"cjn77vbrj0006n8qsobvuqcay","tag_id":"cjn77vbrt000in8qsr94k6wz1","_id":"cjn77vbrv000on8qs5ow73nsf"},{"post_id":"cjn77vbrj0006n8qsobvuqcay","tag_id":"cjn77vbru000mn8qssrbqd40o","_id":"cjn77vbrv000qn8qs02zeitqn"}],"Tag":[{"name":"ReactNative","_id":"cjn77vbrh0003n8qs2ttqhylf"},{"name":"hexo","_id":"cjn77vbrq000cn8qsa60744lr"},{"name":"Anisina","_id":"cjn77vbrs000gn8qslx63dut8"},{"name":"算法","_id":"cjn77vbrt000in8qsr94k6wz1"},{"name":"mmap","_id":"cjn77vbru000mn8qssrbqd40o"}]}}